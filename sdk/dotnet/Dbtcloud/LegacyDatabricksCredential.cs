// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    [Obsolete(@"Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource")]
    [DbtcloudResourceType("dbtcloud:index/legacyDatabricksCredential:LegacyDatabricksCredential")]
    public partial class LegacyDatabricksCredential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Databricks adapter ID for the credential
        /// </summary>
        [Output("adapterId")]
        public Output<int> AdapterId { get; private set; } = null!;

        /// <summary>
        /// The type of the adapter (databricks or spark)
        /// </summary>
        [Output("adapterType")]
        public Output<string> AdapterType { get; private set; } = null!;

        /// <summary>
        /// The catalog where to create models (only for the databricks adapter)
        /// </summary>
        [Output("catalog")]
        public Output<string?> Catalog { get; private set; } = null!;

        /// <summary>
        /// The system Databricks credential ID
        /// </summary>
        [Output("credentialId")]
        public Output<int> CredentialId { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the Databricks credential in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The schema where to create models
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// Target name
        /// </summary>
        [Output("targetName")]
        public Output<string?> TargetName { get; private set; } = null!;

        /// <summary>
        /// Token for Databricks user
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;


        /// <summary>
        /// Create a LegacyDatabricksCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LegacyDatabricksCredential(string name, LegacyDatabricksCredentialArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/legacyDatabricksCredential:LegacyDatabricksCredential", name, args ?? new LegacyDatabricksCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LegacyDatabricksCredential(string name, Input<string> id, LegacyDatabricksCredentialState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/legacyDatabricksCredential:LegacyDatabricksCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/a-schot/pulumi-dbtcloud/releases/download/v${VERSION}",
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LegacyDatabricksCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LegacyDatabricksCredential Get(string name, Input<string> id, LegacyDatabricksCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new LegacyDatabricksCredential(name, id, state, options);
        }
    }

    public sealed class LegacyDatabricksCredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Databricks adapter ID for the credential
        /// </summary>
        [Input("adapterId", required: true)]
        public Input<int> AdapterId { get; set; } = null!;

        /// <summary>
        /// The type of the adapter (databricks or spark)
        /// </summary>
        [Input("adapterType", required: true)]
        public Input<string> AdapterType { get; set; } = null!;

        /// <summary>
        /// The catalog where to create models (only for the databricks adapter)
        /// </summary>
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        /// <summary>
        /// Project ID to create the Databricks credential in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// The schema where to create models
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        /// <summary>
        /// Target name
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        [Input("token", required: true)]
        private Input<string>? _token;

        /// <summary>
        /// Token for Databricks user
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public LegacyDatabricksCredentialArgs()
        {
        }
        public static new LegacyDatabricksCredentialArgs Empty => new LegacyDatabricksCredentialArgs();
    }

    public sealed class LegacyDatabricksCredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Databricks adapter ID for the credential
        /// </summary>
        [Input("adapterId")]
        public Input<int>? AdapterId { get; set; }

        /// <summary>
        /// The type of the adapter (databricks or spark)
        /// </summary>
        [Input("adapterType")]
        public Input<string>? AdapterType { get; set; }

        /// <summary>
        /// The catalog where to create models (only for the databricks adapter)
        /// </summary>
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        /// <summary>
        /// The system Databricks credential ID
        /// </summary>
        [Input("credentialId")]
        public Input<int>? CredentialId { get; set; }

        /// <summary>
        /// Project ID to create the Databricks credential in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// The schema where to create models
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token for Databricks user
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public LegacyDatabricksCredentialState()
        {
        }
        public static new LegacyDatabricksCredentialState Empty => new LegacyDatabricksCredentialState();
    }
}

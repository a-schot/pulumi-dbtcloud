// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    public static class LegacyGetRepository
    {
        public static Task<LegacyGetRepositoryResult> InvokeAsync(LegacyGetRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<LegacyGetRepositoryResult>("dbtcloud:index/legacyGetRepository:LegacyGetRepository", args ?? new LegacyGetRepositoryArgs(), options.WithDefaults());

        public static Output<LegacyGetRepositoryResult> Invoke(LegacyGetRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<LegacyGetRepositoryResult>("dbtcloud:index/legacyGetRepository:LegacyGetRepository", args ?? new LegacyGetRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class LegacyGetRepositoryArgs : global::Pulumi.InvokeArgs
    {
        [Input("fetchDeployKey")]
        public bool? FetchDeployKey { get; set; }

        [Input("projectId", required: true)]
        public int ProjectId { get; set; }

        [Input("repositoryId", required: true)]
        public int RepositoryId { get; set; }

        public LegacyGetRepositoryArgs()
        {
        }
        public static new LegacyGetRepositoryArgs Empty => new LegacyGetRepositoryArgs();
    }

    public sealed class LegacyGetRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("fetchDeployKey")]
        public Input<bool>? FetchDeployKey { get; set; }

        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        [Input("repositoryId", required: true)]
        public Input<int> RepositoryId { get; set; } = null!;

        public LegacyGetRepositoryInvokeArgs()
        {
        }
        public static new LegacyGetRepositoryInvokeArgs Empty => new LegacyGetRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class LegacyGetRepositoryResult
    {
        public readonly string DeployKey;
        public readonly bool? FetchDeployKey;
        public readonly string GitCloneStrategy;
        public readonly int GithubInstallationId;
        public readonly int GitlabProjectId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsActive;
        public readonly int ProjectId;
        public readonly string RemoteUrl;
        public readonly int RepositoryCredentialsId;
        public readonly int RepositoryId;

        [OutputConstructor]
        private LegacyGetRepositoryResult(
            string deployKey,

            bool? fetchDeployKey,

            string gitCloneStrategy,

            int githubInstallationId,

            int gitlabProjectId,

            string id,

            bool isActive,

            int projectId,

            string remoteUrl,

            int repositoryCredentialsId,

            int repositoryId)
        {
            DeployKey = deployKey;
            FetchDeployKey = fetchDeployKey;
            GitCloneStrategy = gitCloneStrategy;
            GithubInstallationId = githubInstallationId;
            GitlabProjectId = gitlabProjectId;
            Id = id;
            IsActive = isActive;
            ProjectId = projectId;
            RemoteUrl = remoteUrl;
            RepositoryCredentialsId = repositoryCredentialsId;
            RepositoryId = repositoryId;
        }
    }
}

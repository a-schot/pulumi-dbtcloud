// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    public static class GetBigqueryConnection
    {
        public static Task<GetBigqueryConnectionResult> InvokeAsync(GetBigqueryConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBigqueryConnectionResult>("dbtcloud:index/getBigqueryConnection:getBigqueryConnection", args ?? new GetBigqueryConnectionArgs(), options.WithDefaults());

        public static Output<GetBigqueryConnectionResult> Invoke(GetBigqueryConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBigqueryConnectionResult>("dbtcloud:index/getBigqueryConnection:getBigqueryConnection", args ?? new GetBigqueryConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBigqueryConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Connection Identifier
        /// </summary>
        [Input("connectionId", required: true)]
        public int ConnectionId { get; set; }

        /// <summary>
        /// Project ID to create the connection in
        /// </summary>
        [Input("projectId", required: true)]
        public int ProjectId { get; set; }

        public GetBigqueryConnectionArgs()
        {
        }
        public static new GetBigqueryConnectionArgs Empty => new GetBigqueryConnectionArgs();
    }

    public sealed class GetBigqueryConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Connection Identifier
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<int> ConnectionId { get; set; } = null!;

        /// <summary>
        /// Project ID to create the connection in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        public GetBigqueryConnectionInvokeArgs()
        {
        }
        public static new GetBigqueryConnectionInvokeArgs Empty => new GetBigqueryConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetBigqueryConnectionResult
    {
        /// <summary>
        /// Auth Provider X509 Cert URL for the Service Account
        /// </summary>
        public readonly string AuthProviderX509CertUrl;
        /// <summary>
        /// Auth URI for the Service Account
        /// </summary>
        public readonly string AuthUri;
        /// <summary>
        /// Service Account email
        /// </summary>
        public readonly string ClientEmail;
        /// <summary>
        /// Client ID of the Service Account
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// Client X509 Cert URL for the Service Account
        /// </summary>
        public readonly string ClientX509CertUrl;
        /// <summary>
        /// Connection Identifier
        /// </summary>
        public readonly int ConnectionId;
        /// <summary>
        /// Dataproc cluster name for PySpark workloads
        /// </summary>
        public readonly string DataprocClusterName;
        /// <summary>
        /// Google Cloud region for PySpark workloads on Dataproc
        /// </summary>
        public readonly string DataprocRegion;
        /// <summary>
        /// Project to bill for query execution
        /// </summary>
        public readonly string ExecutionProject;
        /// <summary>
        /// GCP project ID
        /// </summary>
        public readonly string GcpProjectId;
        /// <summary>
        /// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        /// </summary>
        public readonly string GcsBucket;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the connection is active
        /// </summary>
        public readonly bool IsActive;
        /// <summary>
        /// Whether the connection is configured for OAuth or not
        /// </summary>
        public readonly bool IsConfiguredForOauth;
        /// <summary>
        /// Location to create new Datasets in
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Max number of bytes that can be billed for a given BigQuery query
        /// </summary>
        public readonly int MaximumBytesBilled;
        /// <summary>
        /// Connection name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The priority with which to execute BigQuery queries
        /// </summary>
        public readonly string Priority;
        /// <summary>
        /// Private key of the Service Account
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// Private key ID of the Service Account
        /// </summary>
        public readonly string PrivateKeyId;
        /// <summary>
        /// Project ID to create the connection in
        /// </summary>
        public readonly int ProjectId;
        /// <summary>
        /// Number of retries for queries
        /// </summary>
        public readonly int Retries;
        /// <summary>
        /// Timeout in seconds for queries
        /// </summary>
        public readonly int TimeoutSeconds;
        /// <summary>
        /// Token URI for the Service Account
        /// </summary>
        public readonly string TokenUri;
        /// <summary>
        /// The type of connection
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetBigqueryConnectionResult(
            string authProviderX509CertUrl,

            string authUri,

            string clientEmail,

            string clientId,

            string clientX509CertUrl,

            int connectionId,

            string dataprocClusterName,

            string dataprocRegion,

            string executionProject,

            string gcpProjectId,

            string gcsBucket,

            string id,

            bool isActive,

            bool isConfiguredForOauth,

            string location,

            int maximumBytesBilled,

            string name,

            string priority,

            string privateKey,

            string privateKeyId,

            int projectId,

            int retries,

            int timeoutSeconds,

            string tokenUri,

            string type)
        {
            AuthProviderX509CertUrl = authProviderX509CertUrl;
            AuthUri = authUri;
            ClientEmail = clientEmail;
            ClientId = clientId;
            ClientX509CertUrl = clientX509CertUrl;
            ConnectionId = connectionId;
            DataprocClusterName = dataprocClusterName;
            DataprocRegion = dataprocRegion;
            ExecutionProject = executionProject;
            GcpProjectId = gcpProjectId;
            GcsBucket = gcsBucket;
            Id = id;
            IsActive = isActive;
            IsConfiguredForOauth = isConfiguredForOauth;
            Location = location;
            MaximumBytesBilled = maximumBytesBilled;
            Name = name;
            Priority = priority;
            PrivateKey = privateKey;
            PrivateKeyId = privateKeyId;
            ProjectId = projectId;
            Retries = retries;
            TimeoutSeconds = timeoutSeconds;
            TokenUri = tokenUri;
            Type = type;
        }
    }
}

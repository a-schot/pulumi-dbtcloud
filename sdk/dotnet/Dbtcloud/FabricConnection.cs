// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    /// <summary>
    /// Resource to create Microsoft Fabric connections in dbt Cloud
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Dbtcloud = ASchot.Pulumi.Dbtcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myFabricConnection = new Dbtcloud.FabricConnection("myFabricConnection", new()
    ///     {
    ///         ProjectId = dbtcloud_project.Dbt_project.Id,
    ///         Server = "my-server",
    ///         Database = "my-database",
    ///         Port = 1234,
    ///         LoginTimeout = 30,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import dbtcloud:index/fabricConnection:FabricConnection my_connection "project_id:connection_id"
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import dbtcloud:index/fabricConnection:FabricConnection my_connection 12345:6789
    /// ```
    /// </summary>
    [DbtcloudResourceType("dbtcloud:index/fabricConnection:FabricConnection")]
    public partial class FabricConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Adapter id created for the Fabric connection
        /// </summary>
        [Output("adapterId")]
        public Output<int> AdapterId { get; private set; } = null!;

        /// <summary>
        /// Connection Identifier
        /// </summary>
        [Output("connectionId")]
        public Output<int> ConnectionId { get; private set; } = null!;

        /// <summary>
        /// The database to connect to for this connection.
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
        /// </summary>
        [Output("loginTimeout")]
        public Output<int?> LoginTimeout { get; private set; } = null!;

        /// <summary>
        /// Connection name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The port to connect to for this connection.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the connection in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
        /// </summary>
        [Output("queryTimeout")]
        public Output<int?> QueryTimeout { get; private set; } = null!;

        /// <summary>
        /// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
        /// </summary>
        [Output("retries")]
        public Output<int?> Retries { get; private set; } = null!;

        /// <summary>
        /// The server hostname.
        /// </summary>
        [Output("server")]
        public Output<string> Server { get; private set; } = null!;


        /// <summary>
        /// Create a FabricConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FabricConnection(string name, FabricConnectionArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/fabricConnection:FabricConnection", name, args ?? new FabricConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FabricConnection(string name, Input<string> id, FabricConnectionState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/fabricConnection:FabricConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github::api.github.com/a-schot/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FabricConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FabricConnection Get(string name, Input<string> id, FabricConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new FabricConnection(name, id, state, options);
        }
    }

    public sealed class FabricConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The database to connect to for this connection.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
        /// </summary>
        [Input("loginTimeout")]
        public Input<int>? LoginTimeout { get; set; }

        /// <summary>
        /// Connection name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The port to connect to for this connection.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// Project ID to create the connection in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
        /// </summary>
        [Input("queryTimeout")]
        public Input<int>? QueryTimeout { get; set; }

        /// <summary>
        /// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        /// <summary>
        /// The server hostname.
        /// </summary>
        [Input("server", required: true)]
        public Input<string> Server { get; set; } = null!;

        public FabricConnectionArgs()
        {
        }
        public static new FabricConnectionArgs Empty => new FabricConnectionArgs();
    }

    public sealed class FabricConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Adapter id created for the Fabric connection
        /// </summary>
        [Input("adapterId")]
        public Input<int>? AdapterId { get; set; }

        /// <summary>
        /// Connection Identifier
        /// </summary>
        [Input("connectionId")]
        public Input<int>? ConnectionId { get; set; }

        /// <summary>
        /// The database to connect to for this connection.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
        /// </summary>
        [Input("loginTimeout")]
        public Input<int>? LoginTimeout { get; set; }

        /// <summary>
        /// Connection name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The port to connect to for this connection.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Project ID to create the connection in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
        /// </summary>
        [Input("queryTimeout")]
        public Input<int>? QueryTimeout { get; set; }

        /// <summary>
        /// The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        /// <summary>
        /// The server hostname.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        public FabricConnectionState()
        {
        }
        public static new FabricConnectionState Empty => new FabricConnectionState();
    }
}

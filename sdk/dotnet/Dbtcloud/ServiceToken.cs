// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Dbtcloud = ASchot.Pulumi.Dbtcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // NOTE for customers using the LEGACY dbt_cloud provider:
    ///     var testServiceToken = new Dbtcloud.ServiceToken("testServiceToken", new()
    ///     {
    ///         ServiceTokenPermissions = new[]
    ///         {
    ///             new Dbtcloud.Inputs.ServiceTokenServiceTokenPermissionArgs
    ///             {
    ///                 PermissionSet = "git_admin",
    ///                 AllProjects = true,
    ///             },
    ///             new Dbtcloud.Inputs.ServiceTokenServiceTokenPermissionArgs
    ///             {
    ///                 PermissionSet = "job_admin",
    ///                 AllProjects = false,
    ///                 ProjectId = dbtcloud_project.Dbt_project.Id,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import using a group ID found in the URL or via the API.
    /// 
    /// ```sh
    ///  $ pulumi import dbtcloud:index/serviceToken:ServiceToken test_service_token "service_token_id"
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import dbtcloud:index/serviceToken:ServiceToken test_service_token 12345
    /// ```
    /// </summary>
    [DbtcloudResourceType("dbtcloud:index/serviceToken:ServiceToken")]
    public partial class ServiceToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Service token name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Permissions set for the service token
        /// </summary>
        [Output("serviceTokenPermissions")]
        public Output<ImmutableArray<Outputs.ServiceTokenServiceTokenPermission>> ServiceTokenPermissions { get; private set; } = null!;

        /// <summary>
        /// Service token state (1 is active, 2 is inactive)
        /// </summary>
        [Output("state")]
        public Output<int?> State { get; private set; } = null!;

        /// <summary>
        /// Service token secret value (only accessible on creation))
        /// </summary>
        [Output("tokenString")]
        public Output<string> TokenString { get; private set; } = null!;

        /// <summary>
        /// Service token UID (part of the token)
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceToken(string name, ServiceTokenArgs? args = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/serviceToken:ServiceToken", name, args ?? new ServiceTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceToken(string name, Input<string> id, ServiceTokenState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/serviceToken:ServiceToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/a-schot/pulumi-dbtcloud/releases/download/v${VERSION}",
                AdditionalSecretOutputs =
                {
                    "tokenString",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceToken Get(string name, Input<string> id, ServiceTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceToken(name, id, state, options);
        }
    }

    public sealed class ServiceTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Service token name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serviceTokenPermissions")]
        private InputList<Inputs.ServiceTokenServiceTokenPermissionArgs>? _serviceTokenPermissions;

        /// <summary>
        /// Permissions set for the service token
        /// </summary>
        public InputList<Inputs.ServiceTokenServiceTokenPermissionArgs> ServiceTokenPermissions
        {
            get => _serviceTokenPermissions ?? (_serviceTokenPermissions = new InputList<Inputs.ServiceTokenServiceTokenPermissionArgs>());
            set => _serviceTokenPermissions = value;
        }

        /// <summary>
        /// Service token state (1 is active, 2 is inactive)
        /// </summary>
        [Input("state")]
        public Input<int>? State { get; set; }

        public ServiceTokenArgs()
        {
        }
        public static new ServiceTokenArgs Empty => new ServiceTokenArgs();
    }

    public sealed class ServiceTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Service token name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serviceTokenPermissions")]
        private InputList<Inputs.ServiceTokenServiceTokenPermissionGetArgs>? _serviceTokenPermissions;

        /// <summary>
        /// Permissions set for the service token
        /// </summary>
        public InputList<Inputs.ServiceTokenServiceTokenPermissionGetArgs> ServiceTokenPermissions
        {
            get => _serviceTokenPermissions ?? (_serviceTokenPermissions = new InputList<Inputs.ServiceTokenServiceTokenPermissionGetArgs>());
            set => _serviceTokenPermissions = value;
        }

        /// <summary>
        /// Service token state (1 is active, 2 is inactive)
        /// </summary>
        [Input("state")]
        public Input<int>? State { get; set; }

        [Input("tokenString")]
        private Input<string>? _tokenString;

        /// <summary>
        /// Service token secret value (only accessible on creation))
        /// </summary>
        public Input<string>? TokenString
        {
            get => _tokenString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Service token UID (part of the token)
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public ServiceTokenState()
        {
        }
        public static new ServiceTokenState Empty => new ServiceTokenState();
    }
}

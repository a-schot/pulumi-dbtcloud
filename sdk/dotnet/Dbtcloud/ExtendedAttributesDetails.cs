// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    /// <summary>
    /// This resource allows setting extended attributes which can be assigned to a given environment ([see docs](https://docs.getdbt.com/docs/dbt-cloud-environments#extended-attributes-beta)).&lt;br/&gt;&lt;br/&gt;In dbt Cloud those values are provided as YML but in the provider they need to be provided as JSON (see example below).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Dbtcloud = ASchot.Pulumi.Dbtcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function
    ///     // we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering
    ///     var myAttributes = new Dbtcloud.ExtendedAttributesDetails("myAttributes", new()
    ///     {
    ///         ExtendedAttributes = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["type"] = "databricks",
    ///             ["catalog"] = "dbt_catalog",
    ///             ["http_path"] = "/sql/your/http/path",
    ///             ["my_nested_field"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["subfield"] = "my_value",
    ///             },
    ///         }),
    ///         ProjectId = @var.Dbt_project.Id,
    ///     });
    /// 
    ///     var issueDepl = new Dbtcloud.Environment("issueDepl", new()
    ///     {
    ///         DbtVersion = "1.6.0-latest",
    ///         ProjectId = @var.Dbt_project.Id,
    ///         Type = "deployment",
    ///         UseCustomBranch = false,
    ///         CredentialId = @var.Dbt_credential_id,
    ///         DeploymentType = "production",
    ///         ExtendedAttributesId = myAttributes.ExtendedAttributesId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import using a project ID and extended attribute ID found in the URL or via the API.
    /// 
    /// ```sh
    ///  $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes "project_id_id:extended_attributes_id"
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes 12345:6789
    /// ```
    /// </summary>
    [DbtcloudResourceType("dbtcloud:index/extendedAttributes:ExtendedAttributes")]
    public partial class ExtendedAttributesDetails : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
        /// `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
        /// environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
        /// in your Terraform code. (see example)
        /// </summary>
        [Output("extendedAttributes")]
        public Output<string> ExtendedAttributes { get; private set; } = null!;

        /// <summary>
        /// Extended Attributes ID
        /// </summary>
        [Output("extendedAttributesId")]
        public Output<int> ExtendedAttributesId { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the extended attributes in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Extended Attributes state (1 is active, 2 is inactive)
        /// </summary>
        [Output("state")]
        public Output<int?> State { get; private set; } = null!;


        /// <summary>
        /// Create a ExtendedAttributesDetails resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExtendedAttributesDetails(string name, ExtendedAttributesDetailsArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/extendedAttributes:ExtendedAttributes", name, args ?? new ExtendedAttributesDetailsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExtendedAttributesDetails(string name, Input<string> id, ExtendedAttributesDetailsState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/extendedAttributes:ExtendedAttributes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/a-schot/pulumi-dbtcloud",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExtendedAttributesDetails resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExtendedAttributesDetails Get(string name, Input<string> id, ExtendedAttributesDetailsState? state = null, CustomResourceOptions? options = null)
        {
            return new ExtendedAttributesDetails(name, id, state, options);
        }
    }

    public sealed class ExtendedAttributesDetailsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
        /// `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
        /// environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
        /// in your Terraform code. (see example)
        /// </summary>
        [Input("extendedAttributes", required: true)]
        public Input<string> ExtendedAttributes { get; set; } = null!;

        /// <summary>
        /// Project ID to create the extended attributes in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// Extended Attributes state (1 is active, 2 is inactive)
        /// </summary>
        [Input("state")]
        public Input<int>? State { get; set; }

        public ExtendedAttributesDetailsArgs()
        {
        }
        public static new ExtendedAttributesDetailsArgs Empty => new ExtendedAttributesDetailsArgs();
    }

    public sealed class ExtendedAttributesDetailsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
        /// `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
        /// environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
        /// in your Terraform code. (see example)
        /// </summary>
        [Input("extendedAttributes")]
        public Input<string>? ExtendedAttributes { get; set; }

        /// <summary>
        /// Extended Attributes ID
        /// </summary>
        [Input("extendedAttributesId")]
        public Input<int>? ExtendedAttributesId { get; set; }

        /// <summary>
        /// Project ID to create the extended attributes in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// Extended Attributes state (1 is active, 2 is inactive)
        /// </summary>
        [Input("state")]
        public Input<int>? State { get; set; }

        public ExtendedAttributesDetailsState()
        {
        }
        public static new ExtendedAttributesDetailsState Empty => new ExtendedAttributesDetailsState();
    }
}

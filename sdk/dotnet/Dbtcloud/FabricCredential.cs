// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Import using a project ID and credential ID found in the URL or via the API.
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential "project_id:credential_id"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential 12345:6789
    /// ```
    /// </summary>
    [DbtcloudResourceType("dbtcloud:index/fabricCredential:FabricCredential")]
    public partial class FabricCredential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Fabric adapter ID for the credential
        /// </summary>
        [Output("adapterId")]
        public Output<int> AdapterId { get; private set; } = null!;

        /// <summary>
        /// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
        /// </summary>
        [Output("clientSecret")]
        public Output<string?> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// The system Fabric credential ID
        /// </summary>
        [Output("credentialId")]
        public Output<int> CredentialId { get; private set; } = null!;

        /// <summary>
        /// The password for the account to connect to. Only used when connection with AD user/pass
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the Fabric credential in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The schema where to create the dbt models
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// Optionally set this to the principal who should own the schemas created by dbt
        /// </summary>
        [Output("schemaAuthorization")]
        public Output<string?> SchemaAuthorization { get; private set; } = null!;

        /// <summary>
        /// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
        /// </summary>
        [Output("tenantId")]
        public Output<string?> TenantId { get; private set; } = null!;

        /// <summary>
        /// The username of the Fabric account to connect to. Only used when connection with AD user/pass
        /// </summary>
        [Output("user")]
        public Output<string?> User { get; private set; } = null!;


        /// <summary>
        /// Create a FabricCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FabricCredential(string name, FabricCredentialArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/fabricCredential:FabricCredential", name, args ?? new FabricCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FabricCredential(string name, Input<string> id, FabricCredentialState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/fabricCredential:FabricCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/a-schot/pulumi-dbtcloud",
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FabricCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FabricCredential Get(string name, Input<string> id, FabricCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new FabricCredential(name, id, state, options);
        }
    }

    public sealed class FabricCredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Fabric adapter ID for the credential
        /// </summary>
        [Input("adapterId", required: true)]
        public Input<int> AdapterId { get; set; } = null!;

        /// <summary>
        /// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for the account to connect to. Only used when connection with AD user/pass
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Project ID to create the Fabric credential in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// The schema where to create the dbt models
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        /// <summary>
        /// Optionally set this to the principal who should own the schemas created by dbt
        /// </summary>
        [Input("schemaAuthorization")]
        public Input<string>? SchemaAuthorization { get; set; }

        /// <summary>
        /// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The username of the Fabric account to connect to. Only used when connection with AD user/pass
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public FabricCredentialArgs()
        {
        }
        public static new FabricCredentialArgs Empty => new FabricCredentialArgs();
    }

    public sealed class FabricCredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Fabric adapter ID for the credential
        /// </summary>
        [Input("adapterId")]
        public Input<int>? AdapterId { get; set; }

        /// <summary>
        /// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The system Fabric credential ID
        /// </summary>
        [Input("credentialId")]
        public Input<int>? CredentialId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for the account to connect to. Only used when connection with AD user/pass
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Project ID to create the Fabric credential in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// The schema where to create the dbt models
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// Optionally set this to the principal who should own the schemas created by dbt
        /// </summary>
        [Input("schemaAuthorization")]
        public Input<string>? SchemaAuthorization { get; set; }

        /// <summary>
        /// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The username of the Fabric account to connect to. Only used when connection with AD user/pass
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public FabricCredentialState()
        {
        }
        public static new FabricCredentialState Empty => new FabricCredentialState();
    }
}

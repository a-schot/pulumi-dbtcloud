// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    [Obsolete(@"Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource")]
    [DbtcloudResourceType("dbtcloud:index/legacyServiceToken:LegacyServiceToken")]
    public partial class LegacyServiceToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Service token name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Permissions set for the service token
        /// </summary>
        [Output("serviceTokenPermissions")]
        public Output<ImmutableArray<Outputs.LegacyServiceTokenServiceTokenPermission>> ServiceTokenPermissions { get; private set; } = null!;

        /// <summary>
        /// Service token state (1 is active, 2 is inactive)
        /// </summary>
        [Output("state")]
        public Output<int?> State { get; private set; } = null!;

        /// <summary>
        /// Service token secret value (only accessible on creation))
        /// </summary>
        [Output("tokenString")]
        public Output<string> TokenString { get; private set; } = null!;

        /// <summary>
        /// Service token UID (part of the token)
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a LegacyServiceToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LegacyServiceToken(string name, LegacyServiceTokenArgs? args = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/legacyServiceToken:LegacyServiceToken", name, args ?? new LegacyServiceTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LegacyServiceToken(string name, Input<string> id, LegacyServiceTokenState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/legacyServiceToken:LegacyServiceToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/a-schot/pulumi-dbtcloud/releases/download/v${VERSION}",
                AdditionalSecretOutputs =
                {
                    "tokenString",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LegacyServiceToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LegacyServiceToken Get(string name, Input<string> id, LegacyServiceTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new LegacyServiceToken(name, id, state, options);
        }
    }

    public sealed class LegacyServiceTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Service token name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serviceTokenPermissions")]
        private InputList<Inputs.LegacyServiceTokenServiceTokenPermissionArgs>? _serviceTokenPermissions;

        /// <summary>
        /// Permissions set for the service token
        /// </summary>
        public InputList<Inputs.LegacyServiceTokenServiceTokenPermissionArgs> ServiceTokenPermissions
        {
            get => _serviceTokenPermissions ?? (_serviceTokenPermissions = new InputList<Inputs.LegacyServiceTokenServiceTokenPermissionArgs>());
            set => _serviceTokenPermissions = value;
        }

        /// <summary>
        /// Service token state (1 is active, 2 is inactive)
        /// </summary>
        [Input("state")]
        public Input<int>? State { get; set; }

        public LegacyServiceTokenArgs()
        {
        }
        public static new LegacyServiceTokenArgs Empty => new LegacyServiceTokenArgs();
    }

    public sealed class LegacyServiceTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Service token name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serviceTokenPermissions")]
        private InputList<Inputs.LegacyServiceTokenServiceTokenPermissionGetArgs>? _serviceTokenPermissions;

        /// <summary>
        /// Permissions set for the service token
        /// </summary>
        public InputList<Inputs.LegacyServiceTokenServiceTokenPermissionGetArgs> ServiceTokenPermissions
        {
            get => _serviceTokenPermissions ?? (_serviceTokenPermissions = new InputList<Inputs.LegacyServiceTokenServiceTokenPermissionGetArgs>());
            set => _serviceTokenPermissions = value;
        }

        /// <summary>
        /// Service token state (1 is active, 2 is inactive)
        /// </summary>
        [Input("state")]
        public Input<int>? State { get; set; }

        [Input("tokenString")]
        private Input<string>? _tokenString;

        /// <summary>
        /// Service token secret value (only accessible on creation))
        /// </summary>
        public Input<string>? TokenString
        {
            get => _tokenString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Service token UID (part of the token)
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public LegacyServiceTokenState()
        {
        }
        public static new LegacyServiceTokenState Empty => new LegacyServiceTokenState();
    }
}

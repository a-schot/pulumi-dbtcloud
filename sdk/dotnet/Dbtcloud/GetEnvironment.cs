// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    public static class GetEnvironment
    {
        public static Task<GetEnvironmentResult> InvokeAsync(GetEnvironmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentResult>("dbtcloud:index/getEnvironment:getEnvironment", args ?? new GetEnvironmentArgs(), options.WithDefaults());

        public static Output<GetEnvironmentResult> Invoke(GetEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentResult>("dbtcloud:index/getEnvironment:getEnvironment", args ?? new GetEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the environment
        /// </summary>
        [Input("environmentId", required: true)]
        public int EnvironmentId { get; set; }

        /// <summary>
        /// Project ID to create the environment in
        /// </summary>
        [Input("projectId", required: true)]
        public int ProjectId { get; set; }

        public GetEnvironmentArgs()
        {
        }
        public static new GetEnvironmentArgs Empty => new GetEnvironmentArgs();
    }

    public sealed class GetEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the environment
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<int> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Project ID to create the environment in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        public GetEnvironmentInvokeArgs()
        {
        }
        public static new GetEnvironmentInvokeArgs Empty => new GetEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvironmentResult
    {
        /// <summary>
        /// Credential ID to create the environment with
        /// </summary>
        public readonly int CredentialId;
        /// <summary>
        /// Which custom branch to use in this environment
        /// </summary>
        public readonly string CustomBranch;
        /// <summary>
        /// Version number of dbt to use in this environment, usually in the format 1.2.0-latest rather than core versions
        /// </summary>
        public readonly string DbtVersion;
        /// <summary>
        /// The type of deployment environment (currently 'production' or empty)
        /// </summary>
        public readonly string DeploymentType;
        /// <summary>
        /// ID of the environment
        /// </summary>
        public readonly int EnvironmentId;
        /// <summary>
        /// The ID of the extended attributes applied
        /// </summary>
        public readonly int ExtendedAttributesId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the environment is active
        /// </summary>
        public readonly bool IsActive;
        /// <summary>
        /// Environment name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Project ID to create the environment in
        /// </summary>
        public readonly int ProjectId;
        /// <summary>
        /// The type of environment (must be either development or deployment)
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Whether to use a custom git branch in this environment
        /// </summary>
        public readonly bool UseCustomBranch;

        [OutputConstructor]
        private GetEnvironmentResult(
            int credentialId,

            string customBranch,

            string dbtVersion,

            string deploymentType,

            int environmentId,

            int extendedAttributesId,

            string id,

            bool isActive,

            string name,

            int projectId,

            string type,

            bool useCustomBranch)
        {
            CredentialId = credentialId;
            CustomBranch = customBranch;
            DbtVersion = dbtVersion;
            DeploymentType = deploymentType;
            EnvironmentId = environmentId;
            ExtendedAttributesId = extendedAttributesId;
            Id = id;
            IsActive = isActive;
            Name = name;
            ProjectId = projectId;
            Type = type;
            UseCustomBranch = useCustomBranch;
        }
    }
}

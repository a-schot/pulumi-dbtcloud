// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    [Obsolete(@"Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource")]
    [DbtcloudResourceType("dbtcloud:index/legacyBigqueryCredential:LegacyBigqueryCredential")]
    public partial class LegacyBigqueryCredential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The system BigQuery credential ID
        /// </summary>
        [Output("credentialId")]
        public Output<int> CredentialId { get; private set; } = null!;

        /// <summary>
        /// Default dataset name
        /// </summary>
        [Output("dataset")]
        public Output<string> Dataset { get; private set; } = null!;

        /// <summary>
        /// Whether the BigQuery credential is active
        /// </summary>
        [Output("isActive")]
        public Output<bool?> IsActive { get; private set; } = null!;

        /// <summary>
        /// Number of threads to use
        /// </summary>
        [Output("numThreads")]
        public Output<int> NumThreads { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the BigQuery credential in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a LegacyBigqueryCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LegacyBigqueryCredential(string name, LegacyBigqueryCredentialArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/legacyBigqueryCredential:LegacyBigqueryCredential", name, args ?? new LegacyBigqueryCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LegacyBigqueryCredential(string name, Input<string> id, LegacyBigqueryCredentialState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/legacyBigqueryCredential:LegacyBigqueryCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/a-schot/pulumi-dbtcloud/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LegacyBigqueryCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LegacyBigqueryCredential Get(string name, Input<string> id, LegacyBigqueryCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new LegacyBigqueryCredential(name, id, state, options);
        }
    }

    public sealed class LegacyBigqueryCredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default dataset name
        /// </summary>
        [Input("dataset", required: true)]
        public Input<string> Dataset { get; set; } = null!;

        /// <summary>
        /// Whether the BigQuery credential is active
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// Number of threads to use
        /// </summary>
        [Input("numThreads", required: true)]
        public Input<int> NumThreads { get; set; } = null!;

        /// <summary>
        /// Project ID to create the BigQuery credential in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        public LegacyBigqueryCredentialArgs()
        {
        }
        public static new LegacyBigqueryCredentialArgs Empty => new LegacyBigqueryCredentialArgs();
    }

    public sealed class LegacyBigqueryCredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The system BigQuery credential ID
        /// </summary>
        [Input("credentialId")]
        public Input<int>? CredentialId { get; set; }

        /// <summary>
        /// Default dataset name
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// Whether the BigQuery credential is active
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// Number of threads to use
        /// </summary>
        [Input("numThreads")]
        public Input<int>? NumThreads { get; set; }

        /// <summary>
        /// Project ID to create the BigQuery credential in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        public LegacyBigqueryCredentialState()
        {
        }
        public static new LegacyBigqueryCredentialState Empty => new LegacyBigqueryCredentialState();
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    [Obsolete(@"Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource")]
    [DbtcloudResourceType("dbtcloud:index/legacyProject:LegacyProject")]
    public partial class LegacyProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// dbt project subdirectory path
        /// </summary>
        [Output("dbtProjectSubdirectory")]
        public Output<string?> DbtProjectSubdirectory { get; private set; } = null!;

        /// <summary>
        /// Project name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a LegacyProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LegacyProject(string name, LegacyProjectArgs? args = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/legacyProject:LegacyProject", name, args ?? new LegacyProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LegacyProject(string name, Input<string> id, LegacyProjectState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/legacyProject:LegacyProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/a-schot/pulumi-dbtcloud/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LegacyProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LegacyProject Get(string name, Input<string> id, LegacyProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new LegacyProject(name, id, state, options);
        }
    }

    public sealed class LegacyProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// dbt project subdirectory path
        /// </summary>
        [Input("dbtProjectSubdirectory")]
        public Input<string>? DbtProjectSubdirectory { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public LegacyProjectArgs()
        {
        }
        public static new LegacyProjectArgs Empty => new LegacyProjectArgs();
    }

    public sealed class LegacyProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// dbt project subdirectory path
        /// </summary>
        [Input("dbtProjectSubdirectory")]
        public Input<string>? DbtProjectSubdirectory { get; set; }

        /// <summary>
        /// Project name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public LegacyProjectState()
        {
        }
        public static new LegacyProjectState Empty => new LegacyProjectState();
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ASchot.Pulumi.Dbtcloud
{
    public static class GetProject
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dbtcloud = Pulumi.Dbtcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProject = Dbtcloud.GetProject.Invoke(new()
        ///     {
        ///         ProjectId = @var.Dbt_cloud_project_id,
        ///     });
        /// 
        ///     var anotherTestProject = Dbtcloud.GetProject.Invoke(new()
        ///     {
        ///         Name = "My other project name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectResult> InvokeAsync(GetProjectArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectResult>("dbtcloud:index/getProject:getProject", args ?? new GetProjectArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dbtcloud = Pulumi.Dbtcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProject = Dbtcloud.GetProject.Invoke(new()
        ///     {
        ///         ProjectId = @var.Dbt_cloud_project_id,
        ///     });
        /// 
        ///     var anotherTestProject = Dbtcloud.GetProject.Invoke(new()
        ///     {
        ///         Name = "My other project name",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectResult> Invoke(GetProjectInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectResult>("dbtcloud:index/getProject:getProject", args ?? new GetProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Given name for project
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// ID of the project to represent
        /// </summary>
        [Input("projectId")]
        public int? ProjectId { get; set; }

        public GetProjectArgs()
        {
        }
        public static new GetProjectArgs Empty => new GetProjectArgs();
    }

    public sealed class GetProjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Given name for project
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the project to represent
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        public GetProjectInvokeArgs()
        {
        }
        public static new GetProjectInvokeArgs Empty => new GetProjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectResult
    {
        /// <summary>
        /// ID of the connection associated with the project
        /// </summary>
        public readonly int ConnectionId;
        /// <summary>
        /// ID of Job for the documentation
        /// </summary>
        public readonly int DocsJobId;
        /// <summary>
        /// ID of Job for source freshness
        /// </summary>
        public readonly int FreshnessJobId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Given name for project
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ID of the project to represent
        /// </summary>
        public readonly int? ProjectId;
        /// <summary>
        /// ID of the repository associated with the project
        /// </summary>
        public readonly int RepositoryId;
        /// <summary>
        /// Project state should be 1 = active, as 2 = deleted
        /// </summary>
        public readonly int State;

        [OutputConstructor]
        private GetProjectResult(
            int connectionId,

            int docsJobId,

            int freshnessJobId,

            string id,

            string name,

            int? projectId,

            int repositoryId,

            int state)
        {
            ConnectionId = connectionId;
            DocsJobId = docsJobId;
            FreshnessJobId = freshnessJobId;
            Id = id;
            Name = name;
            ProjectId = projectId;
            RepositoryId = repositoryId;
            State = state;
        }
    }
}

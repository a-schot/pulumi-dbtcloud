// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BigqueryConnectionArgs, BigqueryConnectionState } from "./bigqueryConnection";
export type BigqueryConnection = import("./bigqueryConnection").BigqueryConnection;
export const BigqueryConnection: typeof import("./bigqueryConnection").BigqueryConnection = null as any;
utilities.lazyLoad(exports, ["BigqueryConnection"], () => require("./bigqueryConnection"));

export { BigqueryCredentialArgs, BigqueryCredentialState } from "./bigqueryCredential";
export type BigqueryCredential = import("./bigqueryCredential").BigqueryCredential;
export const BigqueryCredential: typeof import("./bigqueryCredential").BigqueryCredential = null as any;
utilities.lazyLoad(exports, ["BigqueryCredential"], () => require("./bigqueryCredential"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { DatabricksCredentialArgs, DatabricksCredentialState } from "./databricksCredential";
export type DatabricksCredential = import("./databricksCredential").DatabricksCredential;
export const DatabricksCredential: typeof import("./databricksCredential").DatabricksCredential = null as any;
utilities.lazyLoad(exports, ["DatabricksCredential"], () => require("./databricksCredential"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { EnvironmentVariableArgs, EnvironmentVariableState } from "./environmentVariable";
export type EnvironmentVariable = import("./environmentVariable").EnvironmentVariable;
export const EnvironmentVariable: typeof import("./environmentVariable").EnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["EnvironmentVariable"], () => require("./environmentVariable"));

export { EnvironmentVariableJobOverrideArgs, EnvironmentVariableJobOverrideState } from "./environmentVariableJobOverride";
export type EnvironmentVariableJobOverride = import("./environmentVariableJobOverride").EnvironmentVariableJobOverride;
export const EnvironmentVariableJobOverride: typeof import("./environmentVariableJobOverride").EnvironmentVariableJobOverride = null as any;
utilities.lazyLoad(exports, ["EnvironmentVariableJobOverride"], () => require("./environmentVariableJobOverride"));

export { ExtendedAttributesArgs, ExtendedAttributesState } from "./extendedAttributes";
export type ExtendedAttributes = import("./extendedAttributes").ExtendedAttributes;
export const ExtendedAttributes: typeof import("./extendedAttributes").ExtendedAttributes = null as any;
utilities.lazyLoad(exports, ["ExtendedAttributes"], () => require("./extendedAttributes"));

export { FabricConnectionArgs, FabricConnectionState } from "./fabricConnection";
export type FabricConnection = import("./fabricConnection").FabricConnection;
export const FabricConnection: typeof import("./fabricConnection").FabricConnection = null as any;
utilities.lazyLoad(exports, ["FabricConnection"], () => require("./fabricConnection"));

export { FabricCredentialArgs, FabricCredentialState } from "./fabricCredential";
export type FabricCredential = import("./fabricCredential").FabricCredential;
export const FabricCredential: typeof import("./fabricCredential").FabricCredential = null as any;
utilities.lazyLoad(exports, ["FabricCredential"], () => require("./fabricCredential"));

export { GetAzureDevOpsProjectArgs, GetAzureDevOpsProjectResult, GetAzureDevOpsProjectOutputArgs } from "./getAzureDevOpsProject";
export const getAzureDevOpsProject: typeof import("./getAzureDevOpsProject").getAzureDevOpsProject = null as any;
export const getAzureDevOpsProjectOutput: typeof import("./getAzureDevOpsProject").getAzureDevOpsProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAzureDevOpsProject","getAzureDevOpsProjectOutput"], () => require("./getAzureDevOpsProject"));

export { GetAzureDevOpsRepositoryArgs, GetAzureDevOpsRepositoryResult, GetAzureDevOpsRepositoryOutputArgs } from "./getAzureDevOpsRepository";
export const getAzureDevOpsRepository: typeof import("./getAzureDevOpsRepository").getAzureDevOpsRepository = null as any;
export const getAzureDevOpsRepositoryOutput: typeof import("./getAzureDevOpsRepository").getAzureDevOpsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getAzureDevOpsRepository","getAzureDevOpsRepositoryOutput"], () => require("./getAzureDevOpsRepository"));

export { GetBigQueryCredentialArgs, GetBigQueryCredentialResult, GetBigQueryCredentialOutputArgs } from "./getBigQueryCredential";
export const getBigQueryCredential: typeof import("./getBigQueryCredential").getBigQueryCredential = null as any;
export const getBigQueryCredentialOutput: typeof import("./getBigQueryCredential").getBigQueryCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getBigQueryCredential","getBigQueryCredentialOutput"], () => require("./getBigQueryCredential"));

export { GetBigqueryConnectionArgs, GetBigqueryConnectionResult, GetBigqueryConnectionOutputArgs } from "./getBigqueryConnection";
export const getBigqueryConnection: typeof import("./getBigqueryConnection").getBigqueryConnection = null as any;
export const getBigqueryConnectionOutput: typeof import("./getBigqueryConnection").getBigqueryConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getBigqueryConnection","getBigqueryConnectionOutput"], () => require("./getBigqueryConnection"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetDatabricksCredentialArgs, GetDatabricksCredentialResult, GetDatabricksCredentialOutputArgs } from "./getDatabricksCredential";
export const getDatabricksCredential: typeof import("./getDatabricksCredential").getDatabricksCredential = null as any;
export const getDatabricksCredentialOutput: typeof import("./getDatabricksCredential").getDatabricksCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDatabricksCredential","getDatabricksCredentialOutput"], () => require("./getDatabricksCredential"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetEnvironmentVariableArgs, GetEnvironmentVariableResult, GetEnvironmentVariableOutputArgs } from "./getEnvironmentVariable";
export const getEnvironmentVariable: typeof import("./getEnvironmentVariable").getEnvironmentVariable = null as any;
export const getEnvironmentVariableOutput: typeof import("./getEnvironmentVariable").getEnvironmentVariableOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentVariable","getEnvironmentVariableOutput"], () => require("./getEnvironmentVariable"));

export { GetExtendedAttributesArgs, GetExtendedAttributesResult, GetExtendedAttributesOutputArgs } from "./getExtendedAttributes";
export const getExtendedAttributes: typeof import("./getExtendedAttributes").getExtendedAttributes = null as any;
export const getExtendedAttributesOutput: typeof import("./getExtendedAttributes").getExtendedAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedAttributes","getExtendedAttributesOutput"], () => require("./getExtendedAttributes"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupUsersArgs, GetGroupUsersResult, GetGroupUsersOutputArgs } from "./getGroupUsers";
export const getGroupUsers: typeof import("./getGroupUsers").getGroupUsers = null as any;
export const getGroupUsersOutput: typeof import("./getGroupUsers").getGroupUsersOutput = null as any;
utilities.lazyLoad(exports, ["getGroupUsers","getGroupUsersOutput"], () => require("./getGroupUsers"));

export { GetJobArgs, GetJobResult, GetJobOutputArgs } from "./getJob";
export const getJob: typeof import("./getJob").getJob = null as any;
export const getJobOutput: typeof import("./getJob").getJobOutput = null as any;
utilities.lazyLoad(exports, ["getJob","getJobOutput"], () => require("./getJob"));

export { GetNotificationArgs, GetNotificationResult, GetNotificationOutputArgs } from "./getNotification";
export const getNotification: typeof import("./getNotification").getNotification = null as any;
export const getNotificationOutput: typeof import("./getNotification").getNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getNotification","getNotificationOutput"], () => require("./getNotification"));

export { GetPostgresCredentialArgs, GetPostgresCredentialResult, GetPostgresCredentialOutputArgs } from "./getPostgresCredential";
export const getPostgresCredential: typeof import("./getPostgresCredential").getPostgresCredential = null as any;
export const getPostgresCredentialOutput: typeof import("./getPostgresCredential").getPostgresCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresCredential","getPostgresCredentialOutput"], () => require("./getPostgresCredential"));

export { GetPrivatelinkEndpointArgs, GetPrivatelinkEndpointResult, GetPrivatelinkEndpointOutputArgs } from "./getPrivatelinkEndpoint";
export const getPrivatelinkEndpoint: typeof import("./getPrivatelinkEndpoint").getPrivatelinkEndpoint = null as any;
export const getPrivatelinkEndpointOutput: typeof import("./getPrivatelinkEndpoint").getPrivatelinkEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkEndpoint","getPrivatelinkEndpointOutput"], () => require("./getPrivatelinkEndpoint"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { GetServiceTokenArgs, GetServiceTokenResult, GetServiceTokenOutputArgs } from "./getServiceToken";
export const getServiceToken: typeof import("./getServiceToken").getServiceToken = null as any;
export const getServiceTokenOutput: typeof import("./getServiceToken").getServiceTokenOutput = null as any;
utilities.lazyLoad(exports, ["getServiceToken","getServiceTokenOutput"], () => require("./getServiceToken"));

export { GetSnowflakeCredentialArgs, GetSnowflakeCredentialResult, GetSnowflakeCredentialOutputArgs } from "./getSnowflakeCredential";
export const getSnowflakeCredential: typeof import("./getSnowflakeCredential").getSnowflakeCredential = null as any;
export const getSnowflakeCredentialOutput: typeof import("./getSnowflakeCredential").getSnowflakeCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getSnowflakeCredential","getSnowflakeCredentialOutput"], () => require("./getSnowflakeCredential"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupsArgs, GetUserGroupsResult, GetUserGroupsOutputArgs } from "./getUserGroups";
export const getUserGroups: typeof import("./getUserGroups").getUserGroups = null as any;
export const getUserGroupsOutput: typeof import("./getUserGroups").getUserGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroups","getUserGroupsOutput"], () => require("./getUserGroups"));

export { GetWebhookArgs, GetWebhookResult, GetWebhookOutputArgs } from "./getWebhook";
export const getWebhook: typeof import("./getWebhook").getWebhook = null as any;
export const getWebhookOutput: typeof import("./getWebhook").getWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getWebhook","getWebhookOutput"], () => require("./getWebhook"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { JobArgs, JobState } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { LegacyBigqueryConnectionArgs, LegacyBigqueryConnectionState } from "./legacyBigqueryConnection";
export type LegacyBigqueryConnection = import("./legacyBigqueryConnection").LegacyBigqueryConnection;
export const LegacyBigqueryConnection: typeof import("./legacyBigqueryConnection").LegacyBigqueryConnection = null as any;
utilities.lazyLoad(exports, ["LegacyBigqueryConnection"], () => require("./legacyBigqueryConnection"));

export { LegacyBigqueryCredentialArgs, LegacyBigqueryCredentialState } from "./legacyBigqueryCredential";
export type LegacyBigqueryCredential = import("./legacyBigqueryCredential").LegacyBigqueryCredential;
export const LegacyBigqueryCredential: typeof import("./legacyBigqueryCredential").LegacyBigqueryCredential = null as any;
utilities.lazyLoad(exports, ["LegacyBigqueryCredential"], () => require("./legacyBigqueryCredential"));

export { LegacyConnectionArgs, LegacyConnectionState } from "./legacyConnection";
export type LegacyConnection = import("./legacyConnection").LegacyConnection;
export const LegacyConnection: typeof import("./legacyConnection").LegacyConnection = null as any;
utilities.lazyLoad(exports, ["LegacyConnection"], () => require("./legacyConnection"));

export { LegacyDatabricksCredentialArgs, LegacyDatabricksCredentialState } from "./legacyDatabricksCredential";
export type LegacyDatabricksCredential = import("./legacyDatabricksCredential").LegacyDatabricksCredential;
export const LegacyDatabricksCredential: typeof import("./legacyDatabricksCredential").LegacyDatabricksCredential = null as any;
utilities.lazyLoad(exports, ["LegacyDatabricksCredential"], () => require("./legacyDatabricksCredential"));

export { LegacyEnvironmentArgs, LegacyEnvironmentState } from "./legacyEnvironment";
export type LegacyEnvironment = import("./legacyEnvironment").LegacyEnvironment;
export const LegacyEnvironment: typeof import("./legacyEnvironment").LegacyEnvironment = null as any;
utilities.lazyLoad(exports, ["LegacyEnvironment"], () => require("./legacyEnvironment"));

export { LegacyEnvironmentVariableArgs, LegacyEnvironmentVariableState } from "./legacyEnvironmentVariable";
export type LegacyEnvironmentVariable = import("./legacyEnvironmentVariable").LegacyEnvironmentVariable;
export const LegacyEnvironmentVariable: typeof import("./legacyEnvironmentVariable").LegacyEnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["LegacyEnvironmentVariable"], () => require("./legacyEnvironmentVariable"));

export { LegacyGetBigqueryConnectionArgs, LegacyGetBigqueryConnectionResult, LegacyGetBigqueryConnectionOutputArgs } from "./legacyGetBigqueryConnection";
export const legacyGetBigqueryConnection: typeof import("./legacyGetBigqueryConnection").legacyGetBigqueryConnection = null as any;
export const legacyGetBigqueryConnectionOutput: typeof import("./legacyGetBigqueryConnection").legacyGetBigqueryConnectionOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetBigqueryConnection","legacyGetBigqueryConnectionOutput"], () => require("./legacyGetBigqueryConnection"));

export { LegacyGetBigqueryCredentialArgs, LegacyGetBigqueryCredentialResult, LegacyGetBigqueryCredentialOutputArgs } from "./legacyGetBigqueryCredential";
export const legacyGetBigqueryCredential: typeof import("./legacyGetBigqueryCredential").legacyGetBigqueryCredential = null as any;
export const legacyGetBigqueryCredentialOutput: typeof import("./legacyGetBigqueryCredential").legacyGetBigqueryCredentialOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetBigqueryCredential","legacyGetBigqueryCredentialOutput"], () => require("./legacyGetBigqueryCredential"));

export { LegacyGetConnectionArgs, LegacyGetConnectionResult, LegacyGetConnectionOutputArgs } from "./legacyGetConnection";
export const legacyGetConnection: typeof import("./legacyGetConnection").legacyGetConnection = null as any;
export const legacyGetConnectionOutput: typeof import("./legacyGetConnection").legacyGetConnectionOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetConnection","legacyGetConnectionOutput"], () => require("./legacyGetConnection"));

export { LegacyGetDatabricksCredentialArgs, LegacyGetDatabricksCredentialResult, LegacyGetDatabricksCredentialOutputArgs } from "./legacyGetDatabricksCredential";
export const legacyGetDatabricksCredential: typeof import("./legacyGetDatabricksCredential").legacyGetDatabricksCredential = null as any;
export const legacyGetDatabricksCredentialOutput: typeof import("./legacyGetDatabricksCredential").legacyGetDatabricksCredentialOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetDatabricksCredential","legacyGetDatabricksCredentialOutput"], () => require("./legacyGetDatabricksCredential"));

export { LegacyGetEnvironmentArgs, LegacyGetEnvironmentResult, LegacyGetEnvironmentOutputArgs } from "./legacyGetEnvironment";
export const legacyGetEnvironment: typeof import("./legacyGetEnvironment").legacyGetEnvironment = null as any;
export const legacyGetEnvironmentOutput: typeof import("./legacyGetEnvironment").legacyGetEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetEnvironment","legacyGetEnvironmentOutput"], () => require("./legacyGetEnvironment"));

export { LegacyGetEnvironmentVariableArgs, LegacyGetEnvironmentVariableResult, LegacyGetEnvironmentVariableOutputArgs } from "./legacyGetEnvironmentVariable";
export const legacyGetEnvironmentVariable: typeof import("./legacyGetEnvironmentVariable").legacyGetEnvironmentVariable = null as any;
export const legacyGetEnvironmentVariableOutput: typeof import("./legacyGetEnvironmentVariable").legacyGetEnvironmentVariableOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetEnvironmentVariable","legacyGetEnvironmentVariableOutput"], () => require("./legacyGetEnvironmentVariable"));

export { LegacyGetGroupArgs, LegacyGetGroupResult, LegacyGetGroupOutputArgs } from "./legacyGetGroup";
export const legacyGetGroup: typeof import("./legacyGetGroup").legacyGetGroup = null as any;
export const legacyGetGroupOutput: typeof import("./legacyGetGroup").legacyGetGroupOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetGroup","legacyGetGroupOutput"], () => require("./legacyGetGroup"));

export { LegacyGetJobArgs, LegacyGetJobResult, LegacyGetJobOutputArgs } from "./legacyGetJob";
export const legacyGetJob: typeof import("./legacyGetJob").legacyGetJob = null as any;
export const legacyGetJobOutput: typeof import("./legacyGetJob").legacyGetJobOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetJob","legacyGetJobOutput"], () => require("./legacyGetJob"));

export { LegacyGetPostgresCredentialArgs, LegacyGetPostgresCredentialResult, LegacyGetPostgresCredentialOutputArgs } from "./legacyGetPostgresCredential";
export const legacyGetPostgresCredential: typeof import("./legacyGetPostgresCredential").legacyGetPostgresCredential = null as any;
export const legacyGetPostgresCredentialOutput: typeof import("./legacyGetPostgresCredential").legacyGetPostgresCredentialOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetPostgresCredential","legacyGetPostgresCredentialOutput"], () => require("./legacyGetPostgresCredential"));

export { LegacyGetPrivatelinkEndpointArgs, LegacyGetPrivatelinkEndpointResult, LegacyGetPrivatelinkEndpointOutputArgs } from "./legacyGetPrivatelinkEndpoint";
export const legacyGetPrivatelinkEndpoint: typeof import("./legacyGetPrivatelinkEndpoint").legacyGetPrivatelinkEndpoint = null as any;
export const legacyGetPrivatelinkEndpointOutput: typeof import("./legacyGetPrivatelinkEndpoint").legacyGetPrivatelinkEndpointOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetPrivatelinkEndpoint","legacyGetPrivatelinkEndpointOutput"], () => require("./legacyGetPrivatelinkEndpoint"));

export { LegacyGetProjectArgs, LegacyGetProjectResult, LegacyGetProjectOutputArgs } from "./legacyGetProject";
export const legacyGetProject: typeof import("./legacyGetProject").legacyGetProject = null as any;
export const legacyGetProjectOutput: typeof import("./legacyGetProject").legacyGetProjectOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetProject","legacyGetProjectOutput"], () => require("./legacyGetProject"));

export { LegacyGetRepositoryArgs, LegacyGetRepositoryResult, LegacyGetRepositoryOutputArgs } from "./legacyGetRepository";
export const legacyGetRepository: typeof import("./legacyGetRepository").legacyGetRepository = null as any;
export const legacyGetRepositoryOutput: typeof import("./legacyGetRepository").legacyGetRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetRepository","legacyGetRepositoryOutput"], () => require("./legacyGetRepository"));

export { LegacyGetServiceTokenArgs, LegacyGetServiceTokenResult, LegacyGetServiceTokenOutputArgs } from "./legacyGetServiceToken";
export const legacyGetServiceToken: typeof import("./legacyGetServiceToken").legacyGetServiceToken = null as any;
export const legacyGetServiceTokenOutput: typeof import("./legacyGetServiceToken").legacyGetServiceTokenOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetServiceToken","legacyGetServiceTokenOutput"], () => require("./legacyGetServiceToken"));

export { LegacyGetSnowflakeCredentialArgs, LegacyGetSnowflakeCredentialResult, LegacyGetSnowflakeCredentialOutputArgs } from "./legacyGetSnowflakeCredential";
export const legacyGetSnowflakeCredential: typeof import("./legacyGetSnowflakeCredential").legacyGetSnowflakeCredential = null as any;
export const legacyGetSnowflakeCredentialOutput: typeof import("./legacyGetSnowflakeCredential").legacyGetSnowflakeCredentialOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetSnowflakeCredential","legacyGetSnowflakeCredentialOutput"], () => require("./legacyGetSnowflakeCredential"));

export { LegacyGetUserArgs, LegacyGetUserResult, LegacyGetUserOutputArgs } from "./legacyGetUser";
export const legacyGetUser: typeof import("./legacyGetUser").legacyGetUser = null as any;
export const legacyGetUserOutput: typeof import("./legacyGetUser").legacyGetUserOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetUser","legacyGetUserOutput"], () => require("./legacyGetUser"));

export { LegacyGetWebhookArgs, LegacyGetWebhookResult, LegacyGetWebhookOutputArgs } from "./legacyGetWebhook";
export const legacyGetWebhook: typeof import("./legacyGetWebhook").legacyGetWebhook = null as any;
export const legacyGetWebhookOutput: typeof import("./legacyGetWebhook").legacyGetWebhookOutput = null as any;
utilities.lazyLoad(exports, ["legacyGetWebhook","legacyGetWebhookOutput"], () => require("./legacyGetWebhook"));

export { LegacyGroupArgs, LegacyGroupState } from "./legacyGroup";
export type LegacyGroup = import("./legacyGroup").LegacyGroup;
export const LegacyGroup: typeof import("./legacyGroup").LegacyGroup = null as any;
utilities.lazyLoad(exports, ["LegacyGroup"], () => require("./legacyGroup"));

export { LegacyJobArgs, LegacyJobState } from "./legacyJob";
export type LegacyJob = import("./legacyJob").LegacyJob;
export const LegacyJob: typeof import("./legacyJob").LegacyJob = null as any;
utilities.lazyLoad(exports, ["LegacyJob"], () => require("./legacyJob"));

export { LegacyPostgresCredentialArgs, LegacyPostgresCredentialState } from "./legacyPostgresCredential";
export type LegacyPostgresCredential = import("./legacyPostgresCredential").LegacyPostgresCredential;
export const LegacyPostgresCredential: typeof import("./legacyPostgresCredential").LegacyPostgresCredential = null as any;
utilities.lazyLoad(exports, ["LegacyPostgresCredential"], () => require("./legacyPostgresCredential"));

export { LegacyProjectArgs, LegacyProjectState } from "./legacyProject";
export type LegacyProject = import("./legacyProject").LegacyProject;
export const LegacyProject: typeof import("./legacyProject").LegacyProject = null as any;
utilities.lazyLoad(exports, ["LegacyProject"], () => require("./legacyProject"));

export { LegacyProjectArtefactsArgs, LegacyProjectArtefactsState } from "./legacyProjectArtefacts";
export type LegacyProjectArtefacts = import("./legacyProjectArtefacts").LegacyProjectArtefacts;
export const LegacyProjectArtefacts: typeof import("./legacyProjectArtefacts").LegacyProjectArtefacts = null as any;
utilities.lazyLoad(exports, ["LegacyProjectArtefacts"], () => require("./legacyProjectArtefacts"));

export { LegacyProjectConnectionArgs, LegacyProjectConnectionState } from "./legacyProjectConnection";
export type LegacyProjectConnection = import("./legacyProjectConnection").LegacyProjectConnection;
export const LegacyProjectConnection: typeof import("./legacyProjectConnection").LegacyProjectConnection = null as any;
utilities.lazyLoad(exports, ["LegacyProjectConnection"], () => require("./legacyProjectConnection"));

export { LegacyProjectRepositoryArgs, LegacyProjectRepositoryState } from "./legacyProjectRepository";
export type LegacyProjectRepository = import("./legacyProjectRepository").LegacyProjectRepository;
export const LegacyProjectRepository: typeof import("./legacyProjectRepository").LegacyProjectRepository = null as any;
utilities.lazyLoad(exports, ["LegacyProjectRepository"], () => require("./legacyProjectRepository"));

export { LegacyRepositoryArgs, LegacyRepositoryState } from "./legacyRepository";
export type LegacyRepository = import("./legacyRepository").LegacyRepository;
export const LegacyRepository: typeof import("./legacyRepository").LegacyRepository = null as any;
utilities.lazyLoad(exports, ["LegacyRepository"], () => require("./legacyRepository"));

export { LegacyServiceTokenArgs, LegacyServiceTokenState } from "./legacyServiceToken";
export type LegacyServiceToken = import("./legacyServiceToken").LegacyServiceToken;
export const LegacyServiceToken: typeof import("./legacyServiceToken").LegacyServiceToken = null as any;
utilities.lazyLoad(exports, ["LegacyServiceToken"], () => require("./legacyServiceToken"));

export { LegacySnowflakeCredentialArgs, LegacySnowflakeCredentialState } from "./legacySnowflakeCredential";
export type LegacySnowflakeCredential = import("./legacySnowflakeCredential").LegacySnowflakeCredential;
export const LegacySnowflakeCredential: typeof import("./legacySnowflakeCredential").LegacySnowflakeCredential = null as any;
utilities.lazyLoad(exports, ["LegacySnowflakeCredential"], () => require("./legacySnowflakeCredential"));

export { LegacyWebhookArgs, LegacyWebhookState } from "./legacyWebhook";
export type LegacyWebhook = import("./legacyWebhook").LegacyWebhook;
export const LegacyWebhook: typeof import("./legacyWebhook").LegacyWebhook = null as any;
utilities.lazyLoad(exports, ["LegacyWebhook"], () => require("./legacyWebhook"));

export { LicenseMapArgs, LicenseMapState } from "./licenseMap";
export type LicenseMap = import("./licenseMap").LicenseMap;
export const LicenseMap: typeof import("./licenseMap").LicenseMap = null as any;
utilities.lazyLoad(exports, ["LicenseMap"], () => require("./licenseMap"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { PostgresCredentialArgs, PostgresCredentialState } from "./postgresCredential";
export type PostgresCredential = import("./postgresCredential").PostgresCredential;
export const PostgresCredential: typeof import("./postgresCredential").PostgresCredential = null as any;
utilities.lazyLoad(exports, ["PostgresCredential"], () => require("./postgresCredential"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectArtefactsArgs, ProjectArtefactsState } from "./projectArtefacts";
export type ProjectArtefacts = import("./projectArtefacts").ProjectArtefacts;
export const ProjectArtefacts: typeof import("./projectArtefacts").ProjectArtefacts = null as any;
utilities.lazyLoad(exports, ["ProjectArtefacts"], () => require("./projectArtefacts"));

export { ProjectConnectionArgs, ProjectConnectionState } from "./projectConnection";
export type ProjectConnection = import("./projectConnection").ProjectConnection;
export const ProjectConnection: typeof import("./projectConnection").ProjectConnection = null as any;
utilities.lazyLoad(exports, ["ProjectConnection"], () => require("./projectConnection"));

export { ProjectRepositoryArgs, ProjectRepositoryState } from "./projectRepository";
export type ProjectRepository = import("./projectRepository").ProjectRepository;
export const ProjectRepository: typeof import("./projectRepository").ProjectRepository = null as any;
utilities.lazyLoad(exports, ["ProjectRepository"], () => require("./projectRepository"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { ServiceTokenArgs, ServiceTokenState } from "./serviceToken";
export type ServiceToken = import("./serviceToken").ServiceToken;
export const ServiceToken: typeof import("./serviceToken").ServiceToken = null as any;
utilities.lazyLoad(exports, ["ServiceToken"], () => require("./serviceToken"));

export { SnowflakeCredentialArgs, SnowflakeCredentialState } from "./snowflakeCredential";
export type SnowflakeCredential = import("./snowflakeCredential").SnowflakeCredential;
export const SnowflakeCredential: typeof import("./snowflakeCredential").SnowflakeCredential = null as any;
utilities.lazyLoad(exports, ["SnowflakeCredential"], () => require("./snowflakeCredential"));

export { UserGroupsArgs, UserGroupsState } from "./userGroups";
export type UserGroups = import("./userGroups").UserGroups;
export const UserGroups: typeof import("./userGroups").UserGroups = null as any;
utilities.lazyLoad(exports, ["UserGroups"], () => require("./userGroups"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dbtcloud:index/bigqueryConnection:BigqueryConnection":
                return new BigqueryConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/bigqueryCredential:BigqueryCredential":
                return new BigqueryCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "dbtcloud:index/databricksCredential:DatabricksCredential":
                return new DatabricksCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "dbtcloud:index/environmentVariable:EnvironmentVariable":
                return new EnvironmentVariable(name, <any>undefined, { urn })
            case "dbtcloud:index/environmentVariableJobOverride:EnvironmentVariableJobOverride":
                return new EnvironmentVariableJobOverride(name, <any>undefined, { urn })
            case "dbtcloud:index/extendedAttributes:ExtendedAttributes":
                return new ExtendedAttributes(name, <any>undefined, { urn })
            case "dbtcloud:index/fabricConnection:FabricConnection":
                return new FabricConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/fabricCredential:FabricCredential":
                return new FabricCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "dbtcloud:index/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyBigqueryConnection:LegacyBigqueryConnection":
                return new LegacyBigqueryConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyBigqueryCredential:LegacyBigqueryCredential":
                return new LegacyBigqueryCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyConnection:LegacyConnection":
                return new LegacyConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyDatabricksCredential:LegacyDatabricksCredential":
                return new LegacyDatabricksCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyEnvironment:LegacyEnvironment":
                return new LegacyEnvironment(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyEnvironmentVariable:LegacyEnvironmentVariable":
                return new LegacyEnvironmentVariable(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyGroup:LegacyGroup":
                return new LegacyGroup(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyJob:LegacyJob":
                return new LegacyJob(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyPostgresCredential:LegacyPostgresCredential":
                return new LegacyPostgresCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyProject:LegacyProject":
                return new LegacyProject(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyProjectArtefacts:LegacyProjectArtefacts":
                return new LegacyProjectArtefacts(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyProjectConnection:LegacyProjectConnection":
                return new LegacyProjectConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyProjectRepository:LegacyProjectRepository":
                return new LegacyProjectRepository(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyRepository:LegacyRepository":
                return new LegacyRepository(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyServiceToken:LegacyServiceToken":
                return new LegacyServiceToken(name, <any>undefined, { urn })
            case "dbtcloud:index/legacySnowflakeCredential:LegacySnowflakeCredential":
                return new LegacySnowflakeCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/legacyWebhook:LegacyWebhook":
                return new LegacyWebhook(name, <any>undefined, { urn })
            case "dbtcloud:index/licenseMap:LicenseMap":
                return new LicenseMap(name, <any>undefined, { urn })
            case "dbtcloud:index/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "dbtcloud:index/postgresCredential:PostgresCredential":
                return new PostgresCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "dbtcloud:index/projectArtefacts:ProjectArtefacts":
                return new ProjectArtefacts(name, <any>undefined, { urn })
            case "dbtcloud:index/projectConnection:ProjectConnection":
                return new ProjectConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/projectRepository:ProjectRepository":
                return new ProjectRepository(name, <any>undefined, { urn })
            case "dbtcloud:index/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "dbtcloud:index/serviceToken:ServiceToken":
                return new ServiceToken(name, <any>undefined, { urn })
            case "dbtcloud:index/snowflakeCredential:SnowflakeCredential":
                return new SnowflakeCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/userGroups:UserGroups":
                return new UserGroups(name, <any>undefined, { urn })
            case "dbtcloud:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dbtcloud", "index/bigqueryConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/bigqueryCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/connection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/databricksCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/environment", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/environmentVariable", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/environmentVariableJobOverride", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/extendedAttributes", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/fabricConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/fabricCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/group", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/job", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyBigqueryConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyBigqueryCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyDatabricksCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyEnvironment", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyEnvironmentVariable", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyGroup", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyJob", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyPostgresCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyProject", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyProjectArtefacts", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyProjectConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyProjectRepository", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyRepository", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyServiceToken", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacySnowflakeCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/legacyWebhook", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/licenseMap", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/notification", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/postgresCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/project", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/projectArtefacts", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/projectConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/projectRepository", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/repository", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/serviceToken", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/snowflakeCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/userGroups", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("dbtcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dbtcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * *Note*: Some upstream resources can be slow to create, so if creating a project at
 * the same time as the repository, it's recommended to use the `dependsOn` meta argument.
 *
 * In order to find the `githubInstallationId`, you can log in to dbt Cloud, replace `<dbt_cloud_url>` by your dbt Cloud
 * URL and run the following commands in the Google Chrome console:
 *
 * Alternatively, you can go to the page `https://<dbt_cloud_url>/api/v2/integrations/github/installations/` and read the
 * value of `id`  or use the `http` provider to retrieve it automatically like in the example below.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Import using a project ID and repository ID found in the URL or via the API.
 *
 * ```sh
 * $ pulumi import dbtcloud:index/repository:Repository test_repository "project_id:repository_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/repository:Repository test_repository 12345:6789
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)
     */
    public readonly azureActiveDirectoryProjectId!: pulumi.Output<string | undefined>;
    /**
     * The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)
     */
    public readonly azureActiveDirectoryRepositoryId!: pulumi.Output<string | undefined>;
    /**
     * If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     */
    public readonly azureBypassWebhookRegistrationFailure!: pulumi.Output<boolean | undefined>;
    /**
     * Public key generated by dbt when using `deployKey` clone strategy
     */
    public /*out*/ readonly deployKey!: pulumi.Output<string>;
    /**
     * Whether we should return the public deploy key - (for the `deployKey` strategy)
     */
    public readonly fetchDeployKey!: pulumi.Output<boolean | undefined>;
    /**
     * Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
     */
    public readonly gitCloneStrategy!: pulumi.Output<string | undefined>;
    /**
     * Identifier for the GitHub App - (for GitHub native integration only)
     */
    public readonly githubInstallationId!: pulumi.Output<number | undefined>;
    /**
     * Identifier for the Gitlab project -  (for GitLab native integration only)
     */
    public readonly gitlabProjectId!: pulumi.Output<number | undefined>;
    /**
     * Whether the repository is active
     */
    public readonly isActive!: pulumi.Output<boolean | undefined>;
    /**
     * Project ID to create the repository in
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    public readonly remoteUrl!: pulumi.Output<string>;
    /**
     * Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     */
    public /*out*/ readonly repositoryCredentialsId!: pulumi.Output<number>;
    /**
     * Repository Identifier
     */
    public /*out*/ readonly repositoryId!: pulumi.Output<number>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["azureActiveDirectoryProjectId"] = state ? state.azureActiveDirectoryProjectId : undefined;
            resourceInputs["azureActiveDirectoryRepositoryId"] = state ? state.azureActiveDirectoryRepositoryId : undefined;
            resourceInputs["azureBypassWebhookRegistrationFailure"] = state ? state.azureBypassWebhookRegistrationFailure : undefined;
            resourceInputs["deployKey"] = state ? state.deployKey : undefined;
            resourceInputs["fetchDeployKey"] = state ? state.fetchDeployKey : undefined;
            resourceInputs["gitCloneStrategy"] = state ? state.gitCloneStrategy : undefined;
            resourceInputs["githubInstallationId"] = state ? state.githubInstallationId : undefined;
            resourceInputs["gitlabProjectId"] = state ? state.gitlabProjectId : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["remoteUrl"] = state ? state.remoteUrl : undefined;
            resourceInputs["repositoryCredentialsId"] = state ? state.repositoryCredentialsId : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.remoteUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteUrl'");
            }
            resourceInputs["azureActiveDirectoryProjectId"] = args ? args.azureActiveDirectoryProjectId : undefined;
            resourceInputs["azureActiveDirectoryRepositoryId"] = args ? args.azureActiveDirectoryRepositoryId : undefined;
            resourceInputs["azureBypassWebhookRegistrationFailure"] = args ? args.azureBypassWebhookRegistrationFailure : undefined;
            resourceInputs["fetchDeployKey"] = args ? args.fetchDeployKey : undefined;
            resourceInputs["gitCloneStrategy"] = args ? args.gitCloneStrategy : undefined;
            resourceInputs["githubInstallationId"] = args ? args.githubInstallationId : undefined;
            resourceInputs["gitlabProjectId"] = args ? args.gitlabProjectId : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["remoteUrl"] = args ? args.remoteUrl : undefined;
            resourceInputs["deployKey"] = undefined /*out*/;
            resourceInputs["repositoryCredentialsId"] = undefined /*out*/;
            resourceInputs["repositoryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)
     */
    azureActiveDirectoryProjectId?: pulumi.Input<string>;
    /**
     * The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)
     */
    azureActiveDirectoryRepositoryId?: pulumi.Input<string>;
    /**
     * If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     */
    azureBypassWebhookRegistrationFailure?: pulumi.Input<boolean>;
    /**
     * Public key generated by dbt when using `deployKey` clone strategy
     */
    deployKey?: pulumi.Input<string>;
    /**
     * Whether we should return the public deploy key - (for the `deployKey` strategy)
     */
    fetchDeployKey?: pulumi.Input<boolean>;
    /**
     * Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
     */
    gitCloneStrategy?: pulumi.Input<string>;
    /**
     * Identifier for the GitHub App - (for GitHub native integration only)
     */
    githubInstallationId?: pulumi.Input<number>;
    /**
     * Identifier for the Gitlab project -  (for GitLab native integration only)
     */
    gitlabProjectId?: pulumi.Input<number>;
    /**
     * Whether the repository is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Project ID to create the repository in
     */
    projectId?: pulumi.Input<number>;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    remoteUrl?: pulumi.Input<string>;
    /**
     * Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     */
    repositoryCredentialsId?: pulumi.Input<number>;
    /**
     * Repository Identifier
     */
    repositoryId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)
     */
    azureActiveDirectoryProjectId?: pulumi.Input<string>;
    /**
     * The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)
     */
    azureActiveDirectoryRepositoryId?: pulumi.Input<string>;
    /**
     * If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)
     */
    azureBypassWebhookRegistrationFailure?: pulumi.Input<boolean>;
    /**
     * Whether we should return the public deploy key - (for the `deployKey` strategy)
     */
    fetchDeployKey?: pulumi.Input<boolean>;
    /**
     * Git clone strategy for the repository. Can be `deployKey` (default) for cloning via SSH Deploy Key, `githubApp` for GitHub native integration, `deployToken` for the GitLab native integration and `azureActiveDirectoryApp` for ADO native integration
     */
    gitCloneStrategy?: pulumi.Input<string>;
    /**
     * Identifier for the GitHub App - (for GitHub native integration only)
     */
    githubInstallationId?: pulumi.Input<number>;
    /**
     * Identifier for the Gitlab project -  (for GitLab native integration only)
     */
    gitlabProjectId?: pulumi.Input<number>;
    /**
     * Whether the repository is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Project ID to create the repository in
     */
    projectId: pulumi.Input<number>;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    remoteUrl: pulumi.Input<string>;
}

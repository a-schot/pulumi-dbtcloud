// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@aschot/pulumi-dbtcloud";
 *
 * // NOTE for customers using the LEGACY dbt_cloud provider:
 * const testServiceToken = new dbtcloud.ServiceToken("testServiceToken", {serviceTokenPermissions: [
 *     {
 *         permissionSet: "git_admin",
 *         allProjects: true,
 *     },
 *     {
 *         permissionSet: "job_admin",
 *         allProjects: false,
 *         projectId: dbtcloud_project.dbt_project.id,
 *     },
 * ]});
 * ```
 *
 * ## Import
 *
 * Import using a group ID found in the URL or via the API.
 *
 * ```sh
 * $ pulumi import dbtcloud:index/serviceToken:ServiceToken test_service_token "service_token_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/serviceToken:ServiceToken test_service_token 12345
 * ```
 */
export class ServiceToken extends pulumi.CustomResource {
    /**
     * Get an existing ServiceToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceTokenState, opts?: pulumi.CustomResourceOptions): ServiceToken {
        return new ServiceToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/serviceToken:ServiceToken';

    /**
     * Returns true if the given object is an instance of ServiceToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceToken.__pulumiType;
    }

    /**
     * Service token name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Permissions set for the service token
     */
    public readonly serviceTokenPermissions!: pulumi.Output<outputs.ServiceTokenServiceTokenPermission[] | undefined>;
    /**
     * Service token state (1 is active, 2 is inactive)
     */
    public readonly state!: pulumi.Output<number | undefined>;
    /**
     * Service token secret value (only accessible on creation))
     */
    public /*out*/ readonly tokenString!: pulumi.Output<string>;
    /**
     * Service token UID (part of the token)
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a ServiceToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceTokenArgs | ServiceTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceTokenState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceTokenPermissions"] = state ? state.serviceTokenPermissions : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tokenString"] = state ? state.tokenString : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as ServiceTokenArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceTokenPermissions"] = args ? args.serviceTokenPermissions : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tokenString"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tokenString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceToken resources.
 */
export interface ServiceTokenState {
    /**
     * Service token name
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions set for the service token
     */
    serviceTokenPermissions?: pulumi.Input<pulumi.Input<inputs.ServiceTokenServiceTokenPermission>[]>;
    /**
     * Service token state (1 is active, 2 is inactive)
     */
    state?: pulumi.Input<number>;
    /**
     * Service token secret value (only accessible on creation))
     */
    tokenString?: pulumi.Input<string>;
    /**
     * Service token UID (part of the token)
     */
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceToken resource.
 */
export interface ServiceTokenArgs {
    /**
     * Service token name
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions set for the service token
     */
    serviceTokenPermissions?: pulumi.Input<pulumi.Input<inputs.ServiceTokenServiceTokenPermission>[]>;
    /**
     * Service token state (1 is active, 2 is inactive)
     */
    state?: pulumi.Input<number>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LegacyGroup extends pulumi.CustomResource {
    /**
     * Get an existing LegacyGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LegacyGroupState, opts?: pulumi.CustomResourceOptions): LegacyGroup {
        return new LegacyGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/legacyGroup:LegacyGroup';

    /**
     * Returns true if the given object is an instance of LegacyGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LegacyGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LegacyGroup.__pulumiType;
    }

    /**
     * Whether or not to assign this group to users by default
     */
    public readonly assignByDefault!: pulumi.Output<boolean | undefined>;
    public readonly groupPermissions!: pulumi.Output<outputs.LegacyGroupGroupPermission[] | undefined>;
    /**
     * Whether the group is active
     */
    public readonly isActive!: pulumi.Output<boolean | undefined>;
    /**
     * Group name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * SSO mapping group names for this group
     */
    public readonly ssoMappingGroups!: pulumi.Output<string[] | undefined>;

    /**
     * Create a LegacyGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LegacyGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LegacyGroupArgs | LegacyGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LegacyGroupState | undefined;
            resourceInputs["assignByDefault"] = state ? state.assignByDefault : undefined;
            resourceInputs["groupPermissions"] = state ? state.groupPermissions : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ssoMappingGroups"] = state ? state.ssoMappingGroups : undefined;
        } else {
            const args = argsOrState as LegacyGroupArgs | undefined;
            resourceInputs["assignByDefault"] = args ? args.assignByDefault : undefined;
            resourceInputs["groupPermissions"] = args ? args.groupPermissions : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ssoMappingGroups"] = args ? args.ssoMappingGroups : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LegacyGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LegacyGroup resources.
 */
export interface LegacyGroupState {
    /**
     * Whether or not to assign this group to users by default
     */
    assignByDefault?: pulumi.Input<boolean>;
    groupPermissions?: pulumi.Input<pulumi.Input<inputs.LegacyGroupGroupPermission>[]>;
    /**
     * Whether the group is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Group name
     */
    name?: pulumi.Input<string>;
    /**
     * SSO mapping group names for this group
     */
    ssoMappingGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LegacyGroup resource.
 */
export interface LegacyGroupArgs {
    /**
     * Whether or not to assign this group to users by default
     */
    assignByDefault?: pulumi.Input<boolean>;
    groupPermissions?: pulumi.Input<pulumi.Input<inputs.LegacyGroupGroupPermission>[]>;
    /**
     * Whether the group is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Group name
     */
    name?: pulumi.Input<string>;
    /**
     * SSO mapping group names for this group
     */
    ssoMappingGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

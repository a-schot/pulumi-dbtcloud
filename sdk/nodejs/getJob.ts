// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getJob(args: GetJobArgs, opts?: pulumi.InvokeOptions): Promise<GetJobResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dbtcloud:index/getJob:getJob", {
        "jobId": args.jobId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getJob.
 */
export interface GetJobArgs {
    /**
     * ID of the job
     */
    jobId: number;
    /**
     * ID of the project the job is in
     */
    projectId: number;
}

/**
 * A collection of values returned by getJob.
 */
export interface GetJobResult {
    /**
     * ID of the environment this job defers to
     */
    readonly deferringEnvironmentId: number;
    /**
     * ID of the job this job defers to
     */
    readonly deferringJobId: number;
    /**
     * Long description for the job
     */
    readonly description: string;
    /**
     * ID of the environment the job is in
     */
    readonly environmentId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Which other job should trigger this job when it finishes, and on which conditions.
     */
    readonly jobCompletionTriggerConditions: outputs.GetJobJobCompletionTriggerCondition[];
    /**
     * ID of the job
     */
    readonly jobId: number;
    /**
     * Given name for the job
     */
    readonly name: string;
    /**
     * ID of the project the job is in
     */
    readonly projectId: number;
    /**
     * Whether this job defers on a previous run of itself (overrides value in deferring*job*id)
     */
    readonly selfDeferring: boolean;
    /**
     * Number of seconds before the job times out
     */
    readonly timeoutSeconds: number;
    /**
     * Flags for which types of triggers to use, keys of github*webhook, git*provider*webhook, schedule, custom*branch_only
     */
    readonly triggers: {[key: string]: boolean};
    /**
     * Whether the CI job should be automatically triggered on draft PRs
     */
    readonly triggersOnDraftPr: boolean;
}
export function getJobOutput(args: GetJobOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetJobResult> {
    return pulumi.output(args).apply((a: any) => getJob(a, opts))
}

/**
 * A collection of arguments for invoking getJob.
 */
export interface GetJobOutputArgs {
    /**
     * ID of the job
     */
    jobId: pulumi.Input<number>;
    /**
     * ID of the project the job is in
     */
    projectId: pulumi.Input<number>;
}

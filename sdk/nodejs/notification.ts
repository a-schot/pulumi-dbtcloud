// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@aschot/pulumi-dbtcloud";
 *
 * // dbt Cloud allows us to create internal and external notifications
 * // an internal notification will send emails to the user mentioned in `user_id`
 * //
 * // NOTE: If internal notification settings already exist for a user, currently you MUST import
 * // those first into the state file before you can create a new internal notification for that user.
 * // Failure to do so, will result in the user losing access to existing notifications and dbt
 * // support will need to be contacted to restore access.
 * // cmd: terraform import dbtcloud_notification.prod_job_internal_notification <user_id>
 * const prodJobInternalNotification = new dbtcloud.Notification("prodJobInternalNotification", {
 *     userId: 100,
 *     onSuccesses: [dbtcloud_job.prod_job.id],
 *     onFailures: [12345],
 *     notificationType: 1,
 * });
 * // we can also send "external" email notifications to emails to related to dbt Cloud users
 * const prodJobExternalNotification = new dbtcloud.Notification("prodJobExternalNotification", {
 *     userId: 100,
 *     onFailures: [
 *         23456,
 *         56788,
 *     ],
 *     onCancels: [dbtcloud_job.prod_job.id],
 *     notificationType: 4,
 *     externalEmail: "my_email@mail.com",
 * });
 * // and finally, we can set up Slack notifications
 * const prodJobSlackNotifications = new dbtcloud.Notification("prodJobSlackNotifications", {
 *     userId: 100,
 *     onFailures: [
 *         23456,
 *         56788,
 *     ],
 *     onCancels: [dbtcloud_job.prod_job.id],
 *     notificationType: 2,
 *     slackChannelId: "C12345ABCDE",
 *     slackChannelName: "#my-awesome-channel",
 * });
 * ```
 *
 * ## Import
 *
 * Import using a notification ID
 *
 * ```sh
 *  $ pulumi import dbtcloud:index/notification:Notification my_notification "notification_id"
 * ```
 *
 * ```sh
 *  $ pulumi import dbtcloud:index/notification:Notification my_notification 12345
 * ```
 */
export class Notification extends pulumi.CustomResource {
    /**
     * Get an existing Notification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationState, opts?: pulumi.CustomResourceOptions): Notification {
        return new Notification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/notification:Notification';

    /**
     * Returns true if the given object is an instance of Notification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notification.__pulumiType;
    }

    /**
     * The external email to receive the notification
     */
    public readonly externalEmail!: pulumi.Output<string | undefined>;
    /**
     * Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
     */
    public readonly notificationType!: pulumi.Output<number | undefined>;
    /**
     * List of job IDs to trigger the webhook on cancel
     */
    public readonly onCancels!: pulumi.Output<number[] | undefined>;
    /**
     * List of job IDs to trigger the webhook on failure
     */
    public readonly onFailures!: pulumi.Output<number[] | undefined>;
    /**
     * List of job IDs to trigger the webhook on success
     */
    public readonly onSuccesses!: pulumi.Output<number[] | undefined>;
    /**
     * The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
     */
    public readonly slackChannelId!: pulumi.Output<string | undefined>;
    /**
     * The name of the slack channel
     */
    public readonly slackChannelName!: pulumi.Output<string | undefined>;
    /**
     * State of the notification (1 = active (default), 2 = inactive)
     */
    public readonly state!: pulumi.Output<number | undefined>;
    /**
     * Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one
     */
    public readonly userId!: pulumi.Output<number>;

    /**
     * Create a Notification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationArgs | NotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationState | undefined;
            resourceInputs["externalEmail"] = state ? state.externalEmail : undefined;
            resourceInputs["notificationType"] = state ? state.notificationType : undefined;
            resourceInputs["onCancels"] = state ? state.onCancels : undefined;
            resourceInputs["onFailures"] = state ? state.onFailures : undefined;
            resourceInputs["onSuccesses"] = state ? state.onSuccesses : undefined;
            resourceInputs["slackChannelId"] = state ? state.slackChannelId : undefined;
            resourceInputs["slackChannelName"] = state ? state.slackChannelName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as NotificationArgs | undefined;
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["externalEmail"] = args ? args.externalEmail : undefined;
            resourceInputs["notificationType"] = args ? args.notificationType : undefined;
            resourceInputs["onCancels"] = args ? args.onCancels : undefined;
            resourceInputs["onFailures"] = args ? args.onFailures : undefined;
            resourceInputs["onSuccesses"] = args ? args.onSuccesses : undefined;
            resourceInputs["slackChannelId"] = args ? args.slackChannelId : undefined;
            resourceInputs["slackChannelName"] = args ? args.slackChannelName : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Notification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Notification resources.
 */
export interface NotificationState {
    /**
     * The external email to receive the notification
     */
    externalEmail?: pulumi.Input<string>;
    /**
     * Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
     */
    notificationType?: pulumi.Input<number>;
    /**
     * List of job IDs to trigger the webhook on cancel
     */
    onCancels?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of job IDs to trigger the webhook on failure
     */
    onFailures?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of job IDs to trigger the webhook on success
     */
    onSuccesses?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
     */
    slackChannelId?: pulumi.Input<string>;
    /**
     * The name of the slack channel
     */
    slackChannelName?: pulumi.Input<string>;
    /**
     * State of the notification (1 = active (default), 2 = inactive)
     */
    state?: pulumi.Input<number>;
    /**
     * Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Notification resource.
 */
export interface NotificationArgs {
    /**
     * The external email to receive the notification
     */
    externalEmail?: pulumi.Input<string>;
    /**
     * Type of notification (1 = dbt Cloud user email (default): does not require an externalEmail ; 2 = Slack channel: requires `slackChannelId` and `slackChannelName` ; 4 = external email: requires setting an `externalEmail`)
     */
    notificationType?: pulumi.Input<number>;
    /**
     * List of job IDs to trigger the webhook on cancel
     */
    onCancels?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of job IDs to trigger the webhook on failure
     */
    onFailures?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of job IDs to trigger the webhook on success
     */
    onSuccesses?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
     */
    slackChannelId?: pulumi.Input<string>;
    /**
     * The name of the slack channel
     */
    slackChannelName?: pulumi.Input<string>;
    /**
     * State of the notification (1 = active (default), 2 = inactive)
     */
    state?: pulumi.Input<number>;
    /**
     * Internal dbt Cloud User ID. Must be the userId for an existing user even if the notification is an external one
     */
    userId: pulumi.Input<number>;
}

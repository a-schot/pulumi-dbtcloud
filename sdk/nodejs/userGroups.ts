// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Assigns a set of dbt Cloud groups to a given User ID.
 *
 * > If additional groups were assigned manually in dbt Cloud, they will be removed. The full list of groups need to be provided as config.
 *
 * > This resource does not currently support deletion (e.g. a deleted resource will stay as-is in dbt Cloud).
 * This is intentional in order to prevent accidental deletion of all users groups assigned to a user.
 * If you would like a different behavior, please open an issue on GitHub. To remove all groups for a user, set "groupIds" to the empty set "[]".
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@aschot/pulumi-dbtcloud";
 *
 * // we can assign groups to users
 * const myUserGroups = new dbtcloud.UserGroups("myUserGroups", {
 *     userId: data.dbtcloud_user.my_user.id,
 *     groupIds: [
 *         1234,
 *         dbtcloud_group.my_group.id,
 *         local.my_group_id,
 *     ],
 * });
 * // as Delete is not handled currently, by design, removing all groups from a user can be done with
 * const myOtherUserGroups = new dbtcloud.UserGroups("myOtherUserGroups", {
 *     userId: 123456,
 *     groupIds: [],
 * });
 * ```
 *
 * ## Import
 *
 * Import using the User ID
 *
 * The User ID can be retrieved from the dbt Cloud UI or with the data source dbtcloud_user
 *
 * ```sh
 * $ pulumi import dbtcloud:index/userGroups:UserGroups my_user_groups "user_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/userGroups:UserGroups my_user_groups 123456
 * ```
 */
export class UserGroups extends pulumi.CustomResource {
    /**
     * Get an existing UserGroups resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserGroupsState, opts?: pulumi.CustomResourceOptions): UserGroups {
        return new UserGroups(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/userGroups:UserGroups';

    /**
     * Returns true if the given object is an instance of UserGroups.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserGroups {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGroups.__pulumiType;
    }

    /**
     * IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.
     */
    public readonly groupIds!: pulumi.Output<number[]>;
    /**
     * The internal ID of a dbt Cloud user
     */
    public readonly userId!: pulumi.Output<number>;

    /**
     * Create a UserGroups resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserGroupsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserGroupsArgs | UserGroupsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserGroupsState | undefined;
            resourceInputs["groupIds"] = state ? state.groupIds : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserGroupsArgs | undefined;
            if ((!args || args.groupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupIds'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["groupIds"] = args ? args.groupIds : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserGroups.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserGroups resources.
 */
export interface UserGroupsState {
    /**
     * IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.
     */
    groupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The internal ID of a dbt Cloud user
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a UserGroups resource.
 */
export interface UserGroupsArgs {
    /**
     * IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.
     */
    groupIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The internal ID of a dbt Cloud user
     */
    userId: pulumi.Input<number>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/** @deprecated Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource */
export function legacyGetRepository(args: LegacyGetRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<LegacyGetRepositoryResult> {
    pulumi.log.warn("legacyGetRepository is deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource")

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dbtcloud:index/legacyGetRepository:LegacyGetRepository", {
        "fetchDeployKey": args.fetchDeployKey,
        "projectId": args.projectId,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking LegacyGetRepository.
 */
export interface LegacyGetRepositoryArgs {
    fetchDeployKey?: boolean;
    projectId: number;
    repositoryId: number;
}

/**
 * A collection of values returned by LegacyGetRepository.
 */
export interface LegacyGetRepositoryResult {
    readonly deployKey: string;
    readonly fetchDeployKey?: boolean;
    readonly gitCloneStrategy: string;
    readonly githubInstallationId: number;
    readonly gitlabProjectId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isActive: boolean;
    readonly projectId: number;
    readonly remoteUrl: string;
    readonly repositoryCredentialsId: number;
    readonly repositoryId: number;
}
/** @deprecated Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource */
export function legacyGetRepositoryOutput(args: LegacyGetRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<LegacyGetRepositoryResult> {
    return pulumi.output(args).apply((a: any) => legacyGetRepository(a, opts))
}

/**
 * A collection of arguments for invoking LegacyGetRepository.
 */
export interface LegacyGetRepositoryOutputArgs {
    fetchDeployKey?: pulumi.Input<boolean>;
    projectId: pulumi.Input<number>;
    repositoryId: pulumi.Input<number>;
}

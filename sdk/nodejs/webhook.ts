// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@aschot/pulumi-dbtcloud";
 *
 * const testWebhook = new dbtcloud.Webhook("testWebhook", {
 *     clientUrl: "http://localhost/nothing",
 *     description: "Test webhook",
 *     eventTypes: [
 *         "job.run.started",
 *         "job.run.completed",
 *     ],
 *     jobIds: [
 *         1234,
 *         5678,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Import using a job ID found in the URL or via the API.
 *
 * ```sh
 *  $ pulumi import dbtcloud:index/webhook:Webhook test_webhook "job_id"
 * ```
 *
 * ```sh
 *  $ pulumi import dbtcloud:index/webhook:Webhook test_webhook wsu_abcdefg
 * ```
 */
export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    /**
     * Webhooks Account Identifier
     */
    public /*out*/ readonly accountIdentifier!: pulumi.Output<string>;
    /**
     * Webhooks active flag
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * Webhooks Client URL
     */
    public readonly clientUrl!: pulumi.Output<string>;
    /**
     * Webhooks Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Webhooks Event Types
     */
    public readonly eventTypes!: pulumi.Output<string[]>;
    /**
     * Secret key for the webhook. Can be used to validate the authenticity of the webhook.
     */
    public /*out*/ readonly hmacSecret!: pulumi.Output<string>;
    /**
     * Latest HTTP status of the webhook
     */
    public /*out*/ readonly httpStatusCode!: pulumi.Output<string>;
    /**
     * List of job IDs to trigger the webhook, An empty list will trigger on all jobs
     */
    public readonly jobIds!: pulumi.Output<number[] | undefined>;
    /**
     * Webhooks Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Webhooks ID
     */
    public /*out*/ readonly webhookId!: pulumi.Output<string>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["accountIdentifier"] = state ? state.accountIdentifier : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["clientUrl"] = state ? state.clientUrl : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventTypes"] = state ? state.eventTypes : undefined;
            resourceInputs["hmacSecret"] = state ? state.hmacSecret : undefined;
            resourceInputs["httpStatusCode"] = state ? state.httpStatusCode : undefined;
            resourceInputs["jobIds"] = state ? state.jobIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["webhookId"] = state ? state.webhookId : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.clientUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientUrl'");
            }
            if ((!args || args.eventTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTypes'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["clientUrl"] = args ? args.clientUrl : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventTypes"] = args ? args.eventTypes : undefined;
            resourceInputs["jobIds"] = args ? args.jobIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["accountIdentifier"] = undefined /*out*/;
            resourceInputs["hmacSecret"] = undefined /*out*/;
            resourceInputs["httpStatusCode"] = undefined /*out*/;
            resourceInputs["webhookId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["hmacSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Webhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * Webhooks Account Identifier
     */
    accountIdentifier?: pulumi.Input<string>;
    /**
     * Webhooks active flag
     */
    active?: pulumi.Input<boolean>;
    /**
     * Webhooks Client URL
     */
    clientUrl?: pulumi.Input<string>;
    /**
     * Webhooks Description
     */
    description?: pulumi.Input<string>;
    /**
     * Webhooks Event Types
     */
    eventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Secret key for the webhook. Can be used to validate the authenticity of the webhook.
     */
    hmacSecret?: pulumi.Input<string>;
    /**
     * Latest HTTP status of the webhook
     */
    httpStatusCode?: pulumi.Input<string>;
    /**
     * List of job IDs to trigger the webhook, An empty list will trigger on all jobs
     */
    jobIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Webhooks Name
     */
    name?: pulumi.Input<string>;
    /**
     * Webhooks ID
     */
    webhookId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * Webhooks active flag
     */
    active?: pulumi.Input<boolean>;
    /**
     * Webhooks Client URL
     */
    clientUrl: pulumi.Input<string>;
    /**
     * Webhooks Description
     */
    description?: pulumi.Input<string>;
    /**
     * Webhooks Event Types
     */
    eventTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of job IDs to trigger the webhook, An empty list will trigger on all jobs
     */
    jobIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Webhooks Name
     */
    name?: pulumi.Input<string>;
}

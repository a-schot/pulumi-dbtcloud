// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows setting extended attributes which can be assigned to a given environment ([see docs](https://docs.getdbt.com/docs/dbt-cloud-environments#extended-attributes-beta)).<br/><br/>In dbt Cloud those values are provided as YML but in the provider they need to be provided as JSON (see example below).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@aschot/pulumi-dbtcloud";
 *
 * // extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function
 * // we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering
 * const myAttributes = new dbtcloud.ExtendedAttributes("myAttributes", {
 *     extendedAttributes: JSON.stringify({
 *         type: "databricks",
 *         catalog: "dbt_catalog",
 *         http_path: "/sql/your/http/path",
 *         my_nested_field: {
 *             subfield: "my_value",
 *         },
 *     }),
 *     projectId: _var.dbt_project.id,
 * });
 * const issueDepl = new dbtcloud.Environment("issueDepl", {
 *     dbtVersion: "1.6.0-latest",
 *     projectId: _var.dbt_project.id,
 *     type: "deployment",
 *     useCustomBranch: false,
 *     credentialId: _var.dbt_credential_id,
 *     deploymentType: "production",
 *     extendedAttributesId: myAttributes.extendedAttributesId,
 * });
 * ```
 *
 * ## Import
 *
 * Import using a project ID and extended attribute ID found in the URL or via the API.
 *
 * ```sh
 * $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes "project_id_id:extended_attributes_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes 12345:6789
 * ```
 */
export class ExtendedAttributes extends pulumi.CustomResource {
    /**
     * Get an existing ExtendedAttributes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtendedAttributesState, opts?: pulumi.CustomResourceOptions): ExtendedAttributes {
        return new ExtendedAttributes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/extendedAttributes:ExtendedAttributes';

    /**
     * Returns true if the given object is an instance of ExtendedAttributes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExtendedAttributes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExtendedAttributes.__pulumiType;
    }

    /**
     * A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
     * `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
     * environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
     * in your Terraform code. (see example)
     */
    public readonly extendedAttributes!: pulumi.Output<string>;
    /**
     * Extended Attributes ID
     */
    public /*out*/ readonly extendedAttributesId!: pulumi.Output<number>;
    /**
     * Project ID to create the extended attributes in
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * Extended Attributes state (1 is active, 2 is inactive)
     */
    public readonly state!: pulumi.Output<number | undefined>;

    /**
     * Create a ExtendedAttributes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtendedAttributesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtendedAttributesArgs | ExtendedAttributesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtendedAttributesState | undefined;
            resourceInputs["extendedAttributes"] = state ? state.extendedAttributes : undefined;
            resourceInputs["extendedAttributesId"] = state ? state.extendedAttributesId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as ExtendedAttributesArgs | undefined;
            if ((!args || args.extendedAttributes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extendedAttributes'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["extendedAttributes"] = args ? args.extendedAttributes : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["extendedAttributesId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExtendedAttributes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExtendedAttributes resources.
 */
export interface ExtendedAttributesState {
    /**
     * A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
     * `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
     * environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
     * in your Terraform code. (see example)
     */
    extendedAttributes?: pulumi.Input<string>;
    /**
     * Extended Attributes ID
     */
    extendedAttributesId?: pulumi.Input<number>;
    /**
     * Project ID to create the extended attributes in
     */
    projectId?: pulumi.Input<number>;
    /**
     * Extended Attributes state (1 is active, 2 is inactive)
     */
    state?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ExtendedAttributes resource.
 */
export interface ExtendedAttributesArgs {
    /**
     * A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
     * `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
     * environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
     * in your Terraform code. (see example)
     */
    extendedAttributes: pulumi.Input<string>;
    /**
     * Project ID to create the extended attributes in
     */
    projectId: pulumi.Input<number>;
    /**
     * Extended Attributes state (1 is active, 2 is inactive)
     */
    state?: pulumi.Input<number>;
}

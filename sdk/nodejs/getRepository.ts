// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRepository(args: GetRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dbtcloud:index/getRepository:getRepository", {
        "fetchDeployKey": args.fetchDeployKey,
        "projectId": args.projectId,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepository.
 */
export interface GetRepositoryArgs {
    /**
     * Whether we should return the public deploy key
     */
    fetchDeployKey?: boolean;
    /**
     * Project ID to create the repository in
     */
    projectId: number;
    /**
     * ID for the repository
     */
    repositoryId: number;
}

/**
 * A collection of values returned by getRepository.
 */
export interface GetRepositoryResult {
    /**
     * Public key generated by dbt when using `deployKey` clone strategy
     */
    readonly deployKey: string;
    /**
     * Whether we should return the public deploy key
     */
    readonly fetchDeployKey?: boolean;
    /**
     * Git clone strategy for the repository
     */
    readonly gitCloneStrategy: string;
    /**
     * Identifier for the GitHub installation
     */
    readonly githubInstallationId: number;
    /**
     * Identifier for the Gitlab project
     */
    readonly gitlabProjectId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Whether the repository is active
     */
    readonly isActive: boolean;
    /**
     * Project ID to create the repository in
     */
    readonly projectId: number;
    /**
     * Connection name
     */
    readonly remoteUrl: string;
    /**
     * Credentials ID for the repository (From the repository side not the dbt Cloud ID)
     */
    readonly repositoryCredentialsId: number;
    /**
     * ID for the repository
     */
    readonly repositoryId: number;
}
export function getRepositoryOutput(args: GetRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryResult> {
    return pulumi.output(args).apply((a: any) => getRepository(a, opts))
}

/**
 * A collection of arguments for invoking getRepository.
 */
export interface GetRepositoryOutputArgs {
    /**
     * Whether we should return the public deploy key
     */
    fetchDeployKey?: pulumi.Input<boolean>;
    /**
     * Project ID to create the repository in
     */
    projectId: pulumi.Input<number>;
    /**
     * ID for the repository
     */
    repositoryId: pulumi.Input<number>;
}

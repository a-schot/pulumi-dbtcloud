// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LegacyDatabricksCredential extends pulumi.CustomResource {
    /**
     * Get an existing LegacyDatabricksCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LegacyDatabricksCredentialState, opts?: pulumi.CustomResourceOptions): LegacyDatabricksCredential {
        return new LegacyDatabricksCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/legacyDatabricksCredential:LegacyDatabricksCredential';

    /**
     * Returns true if the given object is an instance of LegacyDatabricksCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LegacyDatabricksCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LegacyDatabricksCredential.__pulumiType;
    }

    /**
     * Databricks adapter ID for the credential
     */
    public readonly adapterId!: pulumi.Output<number>;
    /**
     * The type of the adapter (databricks or spark)
     */
    public readonly adapterType!: pulumi.Output<string>;
    /**
     * The catalog where to create models (only for the databricks adapter)
     */
    public readonly catalog!: pulumi.Output<string | undefined>;
    /**
     * The system Databricks credential ID
     */
    public /*out*/ readonly credentialId!: pulumi.Output<number>;
    /**
     * Project ID to create the Databricks credential in
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * The schema where to create models
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * Target name
     */
    public readonly targetName!: pulumi.Output<string | undefined>;
    /**
     * Token for Databricks user
     */
    public readonly token!: pulumi.Output<string>;

    /**
     * Create a LegacyDatabricksCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LegacyDatabricksCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LegacyDatabricksCredentialArgs | LegacyDatabricksCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LegacyDatabricksCredentialState | undefined;
            resourceInputs["adapterId"] = state ? state.adapterId : undefined;
            resourceInputs["adapterType"] = state ? state.adapterType : undefined;
            resourceInputs["catalog"] = state ? state.catalog : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as LegacyDatabricksCredentialArgs | undefined;
            if ((!args || args.adapterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adapterId'");
            }
            if ((!args || args.adapterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adapterType'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.token === undefined) && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            resourceInputs["adapterId"] = args ? args.adapterId : undefined;
            resourceInputs["adapterType"] = args ? args.adapterType : undefined;
            resourceInputs["catalog"] = args ? args.catalog : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["credentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LegacyDatabricksCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LegacyDatabricksCredential resources.
 */
export interface LegacyDatabricksCredentialState {
    /**
     * Databricks adapter ID for the credential
     */
    adapterId?: pulumi.Input<number>;
    /**
     * The type of the adapter (databricks or spark)
     */
    adapterType?: pulumi.Input<string>;
    /**
     * The catalog where to create models (only for the databricks adapter)
     */
    catalog?: pulumi.Input<string>;
    /**
     * The system Databricks credential ID
     */
    credentialId?: pulumi.Input<number>;
    /**
     * Project ID to create the Databricks credential in
     */
    projectId?: pulumi.Input<number>;
    /**
     * The schema where to create models
     */
    schema?: pulumi.Input<string>;
    /**
     * Target name
     */
    targetName?: pulumi.Input<string>;
    /**
     * Token for Databricks user
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LegacyDatabricksCredential resource.
 */
export interface LegacyDatabricksCredentialArgs {
    /**
     * Databricks adapter ID for the credential
     */
    adapterId: pulumi.Input<number>;
    /**
     * The type of the adapter (databricks or spark)
     */
    adapterType: pulumi.Input<string>;
    /**
     * The catalog where to create models (only for the databricks adapter)
     */
    catalog?: pulumi.Input<string>;
    /**
     * Project ID to create the Databricks credential in
     */
    projectId: pulumi.Input<number>;
    /**
     * The schema where to create models
     */
    schema: pulumi.Input<string>;
    /**
     * Target name
     */
    targetName?: pulumi.Input<string>;
    /**
     * Token for Databricks user
     */
    token: pulumi.Input<string>;
}

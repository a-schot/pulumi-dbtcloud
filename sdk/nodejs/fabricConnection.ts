// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource to create Microsoft Fabric connections in dbt Cloud
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dbtcloud from "@aschot/pulumi-dbtcloud";
 *
 * const myFabricConnection = new dbtcloud.FabricConnection("myFabricConnection", {
 *     projectId: dbtcloud_project.dbt_project.id,
 *     server: "my-server",
 *     database: "my-database",
 *     port: 1234,
 *     loginTimeout: 30,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import dbtcloud:index/fabricConnection:FabricConnection my_connection "project_id:connection_id"
 * ```
 *
 * ```sh
 * $ pulumi import dbtcloud:index/fabricConnection:FabricConnection my_connection 12345:6789
 * ```
 */
export class FabricConnection extends pulumi.CustomResource {
    /**
     * Get an existing FabricConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FabricConnectionState, opts?: pulumi.CustomResourceOptions): FabricConnection {
        return new FabricConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/fabricConnection:FabricConnection';

    /**
     * Returns true if the given object is an instance of FabricConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FabricConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FabricConnection.__pulumiType;
    }

    /**
     * Adapter id created for the Fabric connection
     */
    public /*out*/ readonly adapterId!: pulumi.Output<number>;
    /**
     * Connection Identifier
     */
    public /*out*/ readonly connectionId!: pulumi.Output<number>;
    /**
     * The database to connect to for this connection.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     */
    public readonly loginTimeout!: pulumi.Output<number | undefined>;
    /**
     * Connection name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The port to connect to for this connection.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Project ID to create the connection in
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     */
    public readonly queryTimeout!: pulumi.Output<number | undefined>;
    /**
     * The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
     */
    public readonly retries!: pulumi.Output<number | undefined>;
    /**
     * The server hostname.
     */
    public readonly server!: pulumi.Output<string>;

    /**
     * Create a FabricConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FabricConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FabricConnectionArgs | FabricConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FabricConnectionState | undefined;
            resourceInputs["adapterId"] = state ? state.adapterId : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["loginTimeout"] = state ? state.loginTimeout : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["queryTimeout"] = state ? state.queryTimeout : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
        } else {
            const args = argsOrState as FabricConnectionArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["loginTimeout"] = args ? args.loginTimeout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["queryTimeout"] = args ? args.queryTimeout : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["adapterId"] = undefined /*out*/;
            resourceInputs["connectionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FabricConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FabricConnection resources.
 */
export interface FabricConnectionState {
    /**
     * Adapter id created for the Fabric connection
     */
    adapterId?: pulumi.Input<number>;
    /**
     * Connection Identifier
     */
    connectionId?: pulumi.Input<number>;
    /**
     * The database to connect to for this connection.
     */
    database?: pulumi.Input<string>;
    /**
     * The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     */
    loginTimeout?: pulumi.Input<number>;
    /**
     * Connection name
     */
    name?: pulumi.Input<string>;
    /**
     * The port to connect to for this connection.
     */
    port?: pulumi.Input<number>;
    /**
     * Project ID to create the connection in
     */
    projectId?: pulumi.Input<number>;
    /**
     * The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     */
    queryTimeout?: pulumi.Input<number>;
    /**
     * The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
     */
    retries?: pulumi.Input<number>;
    /**
     * The server hostname.
     */
    server?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FabricConnection resource.
 */
export interface FabricConnectionArgs {
    /**
     * The database to connect to for this connection.
     */
    database: pulumi.Input<string>;
    /**
     * The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     */
    loginTimeout?: pulumi.Input<number>;
    /**
     * Connection name
     */
    name?: pulumi.Input<string>;
    /**
     * The port to connect to for this connection.
     */
    port: pulumi.Input<number>;
    /**
     * Project ID to create the connection in
     */
    projectId: pulumi.Input<number>;
    /**
     * The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.
     */
    queryTimeout?: pulumi.Input<number>;
    /**
     * The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.
     */
    retries?: pulumi.Input<number>;
    /**
     * The server hostname.
     */
    server: pulumi.Input<string>;
}

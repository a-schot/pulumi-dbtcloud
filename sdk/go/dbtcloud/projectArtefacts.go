// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.NewProjectArtefacts(ctx, "myProjectArtefacts", &dbtcloud.ProjectArtefactsArgs{
//				ProjectId:      pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				DocsJobId:      pulumi.Any(dbtcloud_job.Prod_job.Id),
//				FreshnessJobId: pulumi.Any(dbtcloud_job.Prod_job.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import using a project ID found in the URL or via the API.
//
// ```sh
//
//	$ pulumi import dbtcloud:index/projectArtefacts:ProjectArtefacts my_artefacts "project_id"
//
// ```
//
// ```sh
//
//	$ pulumi import dbtcloud:index/projectArtefacts:ProjectArtefacts my_artefacts 12345
//
// ```
type ProjectArtefacts struct {
	pulumi.CustomResourceState

	// Docs Job ID
	DocsJobId pulumi.IntPtrOutput `pulumi:"docsJobId"`
	// Freshness Job ID
	FreshnessJobId pulumi.IntPtrOutput `pulumi:"freshnessJobId"`
	// Project ID
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
}

// NewProjectArtefacts registers a new resource with the given unique name, arguments, and options.
func NewProjectArtefacts(ctx *pulumi.Context,
	name string, args *ProjectArtefactsArgs, opts ...pulumi.ResourceOption) (*ProjectArtefacts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectArtefacts
	err := ctx.RegisterResource("dbtcloud:index/projectArtefacts:ProjectArtefacts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectArtefacts gets an existing ProjectArtefacts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectArtefacts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectArtefactsState, opts ...pulumi.ResourceOption) (*ProjectArtefacts, error) {
	var resource ProjectArtefacts
	err := ctx.ReadResource("dbtcloud:index/projectArtefacts:ProjectArtefacts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectArtefacts resources.
type projectArtefactsState struct {
	// Docs Job ID
	DocsJobId *int `pulumi:"docsJobId"`
	// Freshness Job ID
	FreshnessJobId *int `pulumi:"freshnessJobId"`
	// Project ID
	ProjectId *int `pulumi:"projectId"`
}

type ProjectArtefactsState struct {
	// Docs Job ID
	DocsJobId pulumi.IntPtrInput
	// Freshness Job ID
	FreshnessJobId pulumi.IntPtrInput
	// Project ID
	ProjectId pulumi.IntPtrInput
}

func (ProjectArtefactsState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArtefactsState)(nil)).Elem()
}

type projectArtefactsArgs struct {
	// Docs Job ID
	DocsJobId *int `pulumi:"docsJobId"`
	// Freshness Job ID
	FreshnessJobId *int `pulumi:"freshnessJobId"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
}

// The set of arguments for constructing a ProjectArtefacts resource.
type ProjectArtefactsArgs struct {
	// Docs Job ID
	DocsJobId pulumi.IntPtrInput
	// Freshness Job ID
	FreshnessJobId pulumi.IntPtrInput
	// Project ID
	ProjectId pulumi.IntInput
}

func (ProjectArtefactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArtefactsArgs)(nil)).Elem()
}

type ProjectArtefactsInput interface {
	pulumi.Input

	ToProjectArtefactsOutput() ProjectArtefactsOutput
	ToProjectArtefactsOutputWithContext(ctx context.Context) ProjectArtefactsOutput
}

func (*ProjectArtefacts) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectArtefacts)(nil)).Elem()
}

func (i *ProjectArtefacts) ToProjectArtefactsOutput() ProjectArtefactsOutput {
	return i.ToProjectArtefactsOutputWithContext(context.Background())
}

func (i *ProjectArtefacts) ToProjectArtefactsOutputWithContext(ctx context.Context) ProjectArtefactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtefactsOutput)
}

// ProjectArtefactsArrayInput is an input type that accepts ProjectArtefactsArray and ProjectArtefactsArrayOutput values.
// You can construct a concrete instance of `ProjectArtefactsArrayInput` via:
//
//	ProjectArtefactsArray{ ProjectArtefactsArgs{...} }
type ProjectArtefactsArrayInput interface {
	pulumi.Input

	ToProjectArtefactsArrayOutput() ProjectArtefactsArrayOutput
	ToProjectArtefactsArrayOutputWithContext(context.Context) ProjectArtefactsArrayOutput
}

type ProjectArtefactsArray []ProjectArtefactsInput

func (ProjectArtefactsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectArtefacts)(nil)).Elem()
}

func (i ProjectArtefactsArray) ToProjectArtefactsArrayOutput() ProjectArtefactsArrayOutput {
	return i.ToProjectArtefactsArrayOutputWithContext(context.Background())
}

func (i ProjectArtefactsArray) ToProjectArtefactsArrayOutputWithContext(ctx context.Context) ProjectArtefactsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtefactsArrayOutput)
}

// ProjectArtefactsMapInput is an input type that accepts ProjectArtefactsMap and ProjectArtefactsMapOutput values.
// You can construct a concrete instance of `ProjectArtefactsMapInput` via:
//
//	ProjectArtefactsMap{ "key": ProjectArtefactsArgs{...} }
type ProjectArtefactsMapInput interface {
	pulumi.Input

	ToProjectArtefactsMapOutput() ProjectArtefactsMapOutput
	ToProjectArtefactsMapOutputWithContext(context.Context) ProjectArtefactsMapOutput
}

type ProjectArtefactsMap map[string]ProjectArtefactsInput

func (ProjectArtefactsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectArtefacts)(nil)).Elem()
}

func (i ProjectArtefactsMap) ToProjectArtefactsMapOutput() ProjectArtefactsMapOutput {
	return i.ToProjectArtefactsMapOutputWithContext(context.Background())
}

func (i ProjectArtefactsMap) ToProjectArtefactsMapOutputWithContext(ctx context.Context) ProjectArtefactsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArtefactsMapOutput)
}

type ProjectArtefactsOutput struct{ *pulumi.OutputState }

func (ProjectArtefactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectArtefacts)(nil)).Elem()
}

func (o ProjectArtefactsOutput) ToProjectArtefactsOutput() ProjectArtefactsOutput {
	return o
}

func (o ProjectArtefactsOutput) ToProjectArtefactsOutputWithContext(ctx context.Context) ProjectArtefactsOutput {
	return o
}

// Docs Job ID
func (o ProjectArtefactsOutput) DocsJobId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectArtefacts) pulumi.IntPtrOutput { return v.DocsJobId }).(pulumi.IntPtrOutput)
}

// Freshness Job ID
func (o ProjectArtefactsOutput) FreshnessJobId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectArtefacts) pulumi.IntPtrOutput { return v.FreshnessJobId }).(pulumi.IntPtrOutput)
}

// Project ID
func (o ProjectArtefactsOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *ProjectArtefacts) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

type ProjectArtefactsArrayOutput struct{ *pulumi.OutputState }

func (ProjectArtefactsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectArtefacts)(nil)).Elem()
}

func (o ProjectArtefactsArrayOutput) ToProjectArtefactsArrayOutput() ProjectArtefactsArrayOutput {
	return o
}

func (o ProjectArtefactsArrayOutput) ToProjectArtefactsArrayOutputWithContext(ctx context.Context) ProjectArtefactsArrayOutput {
	return o
}

func (o ProjectArtefactsArrayOutput) Index(i pulumi.IntInput) ProjectArtefactsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectArtefacts {
		return vs[0].([]*ProjectArtefacts)[vs[1].(int)]
	}).(ProjectArtefactsOutput)
}

type ProjectArtefactsMapOutput struct{ *pulumi.OutputState }

func (ProjectArtefactsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectArtefacts)(nil)).Elem()
}

func (o ProjectArtefactsMapOutput) ToProjectArtefactsMapOutput() ProjectArtefactsMapOutput {
	return o
}

func (o ProjectArtefactsMapOutput) ToProjectArtefactsMapOutputWithContext(ctx context.Context) ProjectArtefactsMapOutput {
	return o
}

func (o ProjectArtefactsMapOutput) MapIndex(k pulumi.StringInput) ProjectArtefactsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectArtefacts {
		return vs[0].(map[string]*ProjectArtefacts)[vs[1].(string)]
	}).(ProjectArtefactsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArtefactsInput)(nil)).Elem(), &ProjectArtefacts{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArtefactsArrayInput)(nil)).Elem(), ProjectArtefactsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArtefactsMapInput)(nil)).Elem(), ProjectArtefactsMap{})
	pulumi.RegisterOutputType(ProjectArtefactsOutput{})
	pulumi.RegisterOutputType(ProjectArtefactsArrayOutput{})
	pulumi.RegisterOutputType(ProjectArtefactsMapOutput{})
}

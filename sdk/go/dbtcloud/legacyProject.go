// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource
type LegacyProject struct {
	pulumi.CustomResourceState

	// dbt project subdirectory path
	DbtProjectSubdirectory pulumi.StringPtrOutput `pulumi:"dbtProjectSubdirectory"`
	// Project name
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewLegacyProject registers a new resource with the given unique name, arguments, and options.
func NewLegacyProject(ctx *pulumi.Context,
	name string, args *LegacyProjectArgs, opts ...pulumi.ResourceOption) (*LegacyProject, error) {
	if args == nil {
		args = &LegacyProjectArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyProject
	err := ctx.RegisterResource("dbtcloud:index/legacyProject:LegacyProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyProject gets an existing LegacyProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyProjectState, opts ...pulumi.ResourceOption) (*LegacyProject, error) {
	var resource LegacyProject
	err := ctx.ReadResource("dbtcloud:index/legacyProject:LegacyProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyProject resources.
type legacyProjectState struct {
	// dbt project subdirectory path
	DbtProjectSubdirectory *string `pulumi:"dbtProjectSubdirectory"`
	// Project name
	Name *string `pulumi:"name"`
}

type LegacyProjectState struct {
	// dbt project subdirectory path
	DbtProjectSubdirectory pulumi.StringPtrInput
	// Project name
	Name pulumi.StringPtrInput
}

func (LegacyProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyProjectState)(nil)).Elem()
}

type legacyProjectArgs struct {
	// dbt project subdirectory path
	DbtProjectSubdirectory *string `pulumi:"dbtProjectSubdirectory"`
	// Project name
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LegacyProject resource.
type LegacyProjectArgs struct {
	// dbt project subdirectory path
	DbtProjectSubdirectory pulumi.StringPtrInput
	// Project name
	Name pulumi.StringPtrInput
}

func (LegacyProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyProjectArgs)(nil)).Elem()
}

type LegacyProjectInput interface {
	pulumi.Input

	ToLegacyProjectOutput() LegacyProjectOutput
	ToLegacyProjectOutputWithContext(ctx context.Context) LegacyProjectOutput
}

func (*LegacyProject) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyProject)(nil)).Elem()
}

func (i *LegacyProject) ToLegacyProjectOutput() LegacyProjectOutput {
	return i.ToLegacyProjectOutputWithContext(context.Background())
}

func (i *LegacyProject) ToLegacyProjectOutputWithContext(ctx context.Context) LegacyProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectOutput)
}

// LegacyProjectArrayInput is an input type that accepts LegacyProjectArray and LegacyProjectArrayOutput values.
// You can construct a concrete instance of `LegacyProjectArrayInput` via:
//
//	LegacyProjectArray{ LegacyProjectArgs{...} }
type LegacyProjectArrayInput interface {
	pulumi.Input

	ToLegacyProjectArrayOutput() LegacyProjectArrayOutput
	ToLegacyProjectArrayOutputWithContext(context.Context) LegacyProjectArrayOutput
}

type LegacyProjectArray []LegacyProjectInput

func (LegacyProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyProject)(nil)).Elem()
}

func (i LegacyProjectArray) ToLegacyProjectArrayOutput() LegacyProjectArrayOutput {
	return i.ToLegacyProjectArrayOutputWithContext(context.Background())
}

func (i LegacyProjectArray) ToLegacyProjectArrayOutputWithContext(ctx context.Context) LegacyProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectArrayOutput)
}

// LegacyProjectMapInput is an input type that accepts LegacyProjectMap and LegacyProjectMapOutput values.
// You can construct a concrete instance of `LegacyProjectMapInput` via:
//
//	LegacyProjectMap{ "key": LegacyProjectArgs{...} }
type LegacyProjectMapInput interface {
	pulumi.Input

	ToLegacyProjectMapOutput() LegacyProjectMapOutput
	ToLegacyProjectMapOutputWithContext(context.Context) LegacyProjectMapOutput
}

type LegacyProjectMap map[string]LegacyProjectInput

func (LegacyProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyProject)(nil)).Elem()
}

func (i LegacyProjectMap) ToLegacyProjectMapOutput() LegacyProjectMapOutput {
	return i.ToLegacyProjectMapOutputWithContext(context.Background())
}

func (i LegacyProjectMap) ToLegacyProjectMapOutputWithContext(ctx context.Context) LegacyProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectMapOutput)
}

type LegacyProjectOutput struct{ *pulumi.OutputState }

func (LegacyProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyProject)(nil)).Elem()
}

func (o LegacyProjectOutput) ToLegacyProjectOutput() LegacyProjectOutput {
	return o
}

func (o LegacyProjectOutput) ToLegacyProjectOutputWithContext(ctx context.Context) LegacyProjectOutput {
	return o
}

// dbt project subdirectory path
func (o LegacyProjectOutput) DbtProjectSubdirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyProject) pulumi.StringPtrOutput { return v.DbtProjectSubdirectory }).(pulumi.StringPtrOutput)
}

// Project name
func (o LegacyProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type LegacyProjectArrayOutput struct{ *pulumi.OutputState }

func (LegacyProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyProject)(nil)).Elem()
}

func (o LegacyProjectArrayOutput) ToLegacyProjectArrayOutput() LegacyProjectArrayOutput {
	return o
}

func (o LegacyProjectArrayOutput) ToLegacyProjectArrayOutputWithContext(ctx context.Context) LegacyProjectArrayOutput {
	return o
}

func (o LegacyProjectArrayOutput) Index(i pulumi.IntInput) LegacyProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyProject {
		return vs[0].([]*LegacyProject)[vs[1].(int)]
	}).(LegacyProjectOutput)
}

type LegacyProjectMapOutput struct{ *pulumi.OutputState }

func (LegacyProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyProject)(nil)).Elem()
}

func (o LegacyProjectMapOutput) ToLegacyProjectMapOutput() LegacyProjectMapOutput {
	return o
}

func (o LegacyProjectMapOutput) ToLegacyProjectMapOutputWithContext(ctx context.Context) LegacyProjectMapOutput {
	return o
}

func (o LegacyProjectMapOutput) MapIndex(k pulumi.StringInput) LegacyProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyProject {
		return vs[0].(map[string]*LegacyProject)[vs[1].(string)]
	}).(LegacyProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectInput)(nil)).Elem(), &LegacyProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectArrayInput)(nil)).Elem(), LegacyProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectMapInput)(nil)).Elem(), LegacyProjectMap{})
	pulumi.RegisterOutputType(LegacyProjectOutput{})
	pulumi.RegisterOutputType(LegacyProjectArrayOutput{})
	pulumi.RegisterOutputType(LegacyProjectMapOutput{})
}

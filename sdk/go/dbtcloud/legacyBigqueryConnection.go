// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource
type LegacyBigqueryConnection struct {
	pulumi.CustomResourceState

	// The Application ID for BQ OAuth
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// The Application Secret for BQ OAuth
	ApplicationSecret pulumi.StringPtrOutput `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringOutput `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri pulumi.StringOutput `pulumi:"authUri"`
	// Service Account email
	ClientEmail pulumi.StringOutput `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringOutput `pulumi:"clientX509CertUrl"`
	// Connection Identifier
	ConnectionId pulumi.IntOutput `pulumi:"connectionId"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrOutput `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrOutput `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrOutput `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId pulumi.StringOutput `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrOutput `pulumi:"gcsBucket"`
	// Whether the connection is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth pulumi.BoolOutput `pulumi:"isConfiguredForOauth"`
	// Location to create new Datasets in
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrOutput `pulumi:"maximumBytesBilled"`
	// Connection name
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId pulumi.StringOutput `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Number of retries for queries
	Retries pulumi.IntPtrOutput `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntOutput `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri pulumi.StringOutput `pulumi:"tokenUri"`
	// The type of connection
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLegacyBigqueryConnection registers a new resource with the given unique name, arguments, and options.
func NewLegacyBigqueryConnection(ctx *pulumi.Context,
	name string, args *LegacyBigqueryConnectionArgs, opts ...pulumi.ResourceOption) (*LegacyBigqueryConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthProviderX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'AuthProviderX509CertUrl'")
	}
	if args.AuthUri == nil {
		return nil, errors.New("invalid value for required argument 'AuthUri'")
	}
	if args.ClientEmail == nil {
		return nil, errors.New("invalid value for required argument 'ClientEmail'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'ClientX509CertUrl'")
	}
	if args.GcpProjectId == nil {
		return nil, errors.New("invalid value for required argument 'GcpProjectId'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKeyId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKeyId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TimeoutSeconds == nil {
		return nil, errors.New("invalid value for required argument 'TimeoutSeconds'")
	}
	if args.TokenUri == nil {
		return nil, errors.New("invalid value for required argument 'TokenUri'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ApplicationId != nil {
		args.ApplicationId = pulumi.ToSecret(args.ApplicationId).(pulumi.StringPtrInput)
	}
	if args.ApplicationSecret != nil {
		args.ApplicationSecret = pulumi.ToSecret(args.ApplicationSecret).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"applicationId",
		"applicationSecret",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyBigqueryConnection
	err := ctx.RegisterResource("dbtcloud:index/legacyBigqueryConnection:LegacyBigqueryConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyBigqueryConnection gets an existing LegacyBigqueryConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyBigqueryConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyBigqueryConnectionState, opts ...pulumi.ResourceOption) (*LegacyBigqueryConnection, error) {
	var resource LegacyBigqueryConnection
	err := ctx.ReadResource("dbtcloud:index/legacyBigqueryConnection:LegacyBigqueryConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyBigqueryConnection resources.
type legacyBigqueryConnectionState struct {
	// The Application ID for BQ OAuth
	ApplicationId *string `pulumi:"applicationId"`
	// The Application Secret for BQ OAuth
	ApplicationSecret *string `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl *string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri *string `pulumi:"authUri"`
	// Service Account email
	ClientEmail *string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId *string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl *string `pulumi:"clientX509CertUrl"`
	// Connection Identifier
	ConnectionId *int `pulumi:"connectionId"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName *string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion *string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject *string `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId *string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket *string `pulumi:"gcsBucket"`
	// Whether the connection is active
	IsActive *bool `pulumi:"isActive"`
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth *bool `pulumi:"isConfiguredForOauth"`
	// Location to create new Datasets in
	Location *string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled *int `pulumi:"maximumBytesBilled"`
	// Connection name
	Name *string `pulumi:"name"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority *string `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey *string `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId *string `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId *int `pulumi:"projectId"`
	// Number of retries for queries
	Retries *int `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri *string `pulumi:"tokenUri"`
	// The type of connection
	Type *string `pulumi:"type"`
}

type LegacyBigqueryConnectionState struct {
	// The Application ID for BQ OAuth
	ApplicationId pulumi.StringPtrInput
	// The Application Secret for BQ OAuth
	ApplicationSecret pulumi.StringPtrInput
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringPtrInput
	// Auth URI for the Service Account
	AuthUri pulumi.StringPtrInput
	// Service Account email
	ClientEmail pulumi.StringPtrInput
	// Client ID of the Service Account
	ClientId pulumi.StringPtrInput
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringPtrInput
	// Connection Identifier
	ConnectionId pulumi.IntPtrInput
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrInput
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrInput
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrInput
	// GCP project ID
	GcpProjectId pulumi.StringPtrInput
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrInput
	// Whether the connection is active
	IsActive pulumi.BoolPtrInput
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth pulumi.BoolPtrInput
	// Location to create new Datasets in
	Location pulumi.StringPtrInput
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrInput
	// Private key of the Service Account
	PrivateKey pulumi.StringPtrInput
	// Private key ID of the Service Account
	PrivateKeyId pulumi.StringPtrInput
	// Project ID to create the connection in
	ProjectId pulumi.IntPtrInput
	// Number of retries for queries
	Retries pulumi.IntPtrInput
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntPtrInput
	// Token URI for the Service Account
	TokenUri pulumi.StringPtrInput
	// The type of connection
	Type pulumi.StringPtrInput
}

func (LegacyBigqueryConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyBigqueryConnectionState)(nil)).Elem()
}

type legacyBigqueryConnectionArgs struct {
	// The Application ID for BQ OAuth
	ApplicationId *string `pulumi:"applicationId"`
	// The Application Secret for BQ OAuth
	ApplicationSecret *string `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri string `pulumi:"authUri"`
	// Service Account email
	ClientEmail string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName *string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion *string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject *string `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket *string `pulumi:"gcsBucket"`
	// Whether the connection is active
	IsActive *bool `pulumi:"isActive"`
	// Location to create new Datasets in
	Location *string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled *int `pulumi:"maximumBytesBilled"`
	// Connection name
	Name *string `pulumi:"name"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority *string `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey string `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId int `pulumi:"projectId"`
	// Number of retries for queries
	Retries *int `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri string `pulumi:"tokenUri"`
	// The type of connection
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a LegacyBigqueryConnection resource.
type LegacyBigqueryConnectionArgs struct {
	// The Application ID for BQ OAuth
	ApplicationId pulumi.StringPtrInput
	// The Application Secret for BQ OAuth
	ApplicationSecret pulumi.StringPtrInput
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringInput
	// Auth URI for the Service Account
	AuthUri pulumi.StringInput
	// Service Account email
	ClientEmail pulumi.StringInput
	// Client ID of the Service Account
	ClientId pulumi.StringInput
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringInput
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrInput
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrInput
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrInput
	// GCP project ID
	GcpProjectId pulumi.StringInput
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrInput
	// Whether the connection is active
	IsActive pulumi.BoolPtrInput
	// Location to create new Datasets in
	Location pulumi.StringPtrInput
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrInput
	// Private key of the Service Account
	PrivateKey pulumi.StringInput
	// Private key ID of the Service Account
	PrivateKeyId pulumi.StringInput
	// Project ID to create the connection in
	ProjectId pulumi.IntInput
	// Number of retries for queries
	Retries pulumi.IntPtrInput
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntInput
	// Token URI for the Service Account
	TokenUri pulumi.StringInput
	// The type of connection
	Type pulumi.StringInput
}

func (LegacyBigqueryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyBigqueryConnectionArgs)(nil)).Elem()
}

type LegacyBigqueryConnectionInput interface {
	pulumi.Input

	ToLegacyBigqueryConnectionOutput() LegacyBigqueryConnectionOutput
	ToLegacyBigqueryConnectionOutputWithContext(ctx context.Context) LegacyBigqueryConnectionOutput
}

func (*LegacyBigqueryConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyBigqueryConnection)(nil)).Elem()
}

func (i *LegacyBigqueryConnection) ToLegacyBigqueryConnectionOutput() LegacyBigqueryConnectionOutput {
	return i.ToLegacyBigqueryConnectionOutputWithContext(context.Background())
}

func (i *LegacyBigqueryConnection) ToLegacyBigqueryConnectionOutputWithContext(ctx context.Context) LegacyBigqueryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyBigqueryConnectionOutput)
}

// LegacyBigqueryConnectionArrayInput is an input type that accepts LegacyBigqueryConnectionArray and LegacyBigqueryConnectionArrayOutput values.
// You can construct a concrete instance of `LegacyBigqueryConnectionArrayInput` via:
//
//	LegacyBigqueryConnectionArray{ LegacyBigqueryConnectionArgs{...} }
type LegacyBigqueryConnectionArrayInput interface {
	pulumi.Input

	ToLegacyBigqueryConnectionArrayOutput() LegacyBigqueryConnectionArrayOutput
	ToLegacyBigqueryConnectionArrayOutputWithContext(context.Context) LegacyBigqueryConnectionArrayOutput
}

type LegacyBigqueryConnectionArray []LegacyBigqueryConnectionInput

func (LegacyBigqueryConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyBigqueryConnection)(nil)).Elem()
}

func (i LegacyBigqueryConnectionArray) ToLegacyBigqueryConnectionArrayOutput() LegacyBigqueryConnectionArrayOutput {
	return i.ToLegacyBigqueryConnectionArrayOutputWithContext(context.Background())
}

func (i LegacyBigqueryConnectionArray) ToLegacyBigqueryConnectionArrayOutputWithContext(ctx context.Context) LegacyBigqueryConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyBigqueryConnectionArrayOutput)
}

// LegacyBigqueryConnectionMapInput is an input type that accepts LegacyBigqueryConnectionMap and LegacyBigqueryConnectionMapOutput values.
// You can construct a concrete instance of `LegacyBigqueryConnectionMapInput` via:
//
//	LegacyBigqueryConnectionMap{ "key": LegacyBigqueryConnectionArgs{...} }
type LegacyBigqueryConnectionMapInput interface {
	pulumi.Input

	ToLegacyBigqueryConnectionMapOutput() LegacyBigqueryConnectionMapOutput
	ToLegacyBigqueryConnectionMapOutputWithContext(context.Context) LegacyBigqueryConnectionMapOutput
}

type LegacyBigqueryConnectionMap map[string]LegacyBigqueryConnectionInput

func (LegacyBigqueryConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyBigqueryConnection)(nil)).Elem()
}

func (i LegacyBigqueryConnectionMap) ToLegacyBigqueryConnectionMapOutput() LegacyBigqueryConnectionMapOutput {
	return i.ToLegacyBigqueryConnectionMapOutputWithContext(context.Background())
}

func (i LegacyBigqueryConnectionMap) ToLegacyBigqueryConnectionMapOutputWithContext(ctx context.Context) LegacyBigqueryConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyBigqueryConnectionMapOutput)
}

type LegacyBigqueryConnectionOutput struct{ *pulumi.OutputState }

func (LegacyBigqueryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyBigqueryConnection)(nil)).Elem()
}

func (o LegacyBigqueryConnectionOutput) ToLegacyBigqueryConnectionOutput() LegacyBigqueryConnectionOutput {
	return o
}

func (o LegacyBigqueryConnectionOutput) ToLegacyBigqueryConnectionOutputWithContext(ctx context.Context) LegacyBigqueryConnectionOutput {
	return o
}

// The Application ID for BQ OAuth
func (o LegacyBigqueryConnectionOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// The Application Secret for BQ OAuth
func (o LegacyBigqueryConnectionOutput) ApplicationSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringPtrOutput { return v.ApplicationSecret }).(pulumi.StringPtrOutput)
}

// Auth Provider X509 Cert URL for the Service Account
func (o LegacyBigqueryConnectionOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Auth URI for the Service Account
func (o LegacyBigqueryConnectionOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.AuthUri }).(pulumi.StringOutput)
}

// Service Account email
func (o LegacyBigqueryConnectionOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client ID of the Service Account
func (o LegacyBigqueryConnectionOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Client X509 Cert URL for the Service Account
func (o LegacyBigqueryConnectionOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// Connection Identifier
func (o LegacyBigqueryConnectionOutput) ConnectionId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.IntOutput { return v.ConnectionId }).(pulumi.IntOutput)
}

// Dataproc cluster name for PySpark workloads
func (o LegacyBigqueryConnectionOutput) DataprocClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringPtrOutput { return v.DataprocClusterName }).(pulumi.StringPtrOutput)
}

// Google Cloud region for PySpark workloads on Dataproc
func (o LegacyBigqueryConnectionOutput) DataprocRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringPtrOutput { return v.DataprocRegion }).(pulumi.StringPtrOutput)
}

// Project to bill for query execution
func (o LegacyBigqueryConnectionOutput) ExecutionProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringPtrOutput { return v.ExecutionProject }).(pulumi.StringPtrOutput)
}

// GCP project ID
func (o LegacyBigqueryConnectionOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.GcpProjectId }).(pulumi.StringOutput)
}

// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
func (o LegacyBigqueryConnectionOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringPtrOutput { return v.GcsBucket }).(pulumi.StringPtrOutput)
}

// Whether the connection is active
func (o LegacyBigqueryConnectionOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Whether the connection is configured for OAuth or not
func (o LegacyBigqueryConnectionOutput) IsConfiguredForOauth() pulumi.BoolOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.BoolOutput { return v.IsConfiguredForOauth }).(pulumi.BoolOutput)
}

// Location to create new Datasets in
func (o LegacyBigqueryConnectionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Max number of bytes that can be billed for a given BigQuery query
func (o LegacyBigqueryConnectionOutput) MaximumBytesBilled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.IntPtrOutput { return v.MaximumBytesBilled }).(pulumi.IntPtrOutput)
}

// Connection name
func (o LegacyBigqueryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The priority with which to execute BigQuery queries (batch or interactive)
func (o LegacyBigqueryConnectionOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// Private key of the Service Account
func (o LegacyBigqueryConnectionOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private key ID of the Service Account
func (o LegacyBigqueryConnectionOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Project ID to create the connection in
func (o LegacyBigqueryConnectionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Number of retries for queries
func (o LegacyBigqueryConnectionOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.IntPtrOutput { return v.Retries }).(pulumi.IntPtrOutput)
}

// Timeout in seconds for queries
func (o LegacyBigqueryConnectionOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.IntOutput { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

// Token URI for the Service Account
func (o LegacyBigqueryConnectionOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.TokenUri }).(pulumi.StringOutput)
}

// The type of connection
func (o LegacyBigqueryConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type LegacyBigqueryConnectionArrayOutput struct{ *pulumi.OutputState }

func (LegacyBigqueryConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyBigqueryConnection)(nil)).Elem()
}

func (o LegacyBigqueryConnectionArrayOutput) ToLegacyBigqueryConnectionArrayOutput() LegacyBigqueryConnectionArrayOutput {
	return o
}

func (o LegacyBigqueryConnectionArrayOutput) ToLegacyBigqueryConnectionArrayOutputWithContext(ctx context.Context) LegacyBigqueryConnectionArrayOutput {
	return o
}

func (o LegacyBigqueryConnectionArrayOutput) Index(i pulumi.IntInput) LegacyBigqueryConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyBigqueryConnection {
		return vs[0].([]*LegacyBigqueryConnection)[vs[1].(int)]
	}).(LegacyBigqueryConnectionOutput)
}

type LegacyBigqueryConnectionMapOutput struct{ *pulumi.OutputState }

func (LegacyBigqueryConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyBigqueryConnection)(nil)).Elem()
}

func (o LegacyBigqueryConnectionMapOutput) ToLegacyBigqueryConnectionMapOutput() LegacyBigqueryConnectionMapOutput {
	return o
}

func (o LegacyBigqueryConnectionMapOutput) ToLegacyBigqueryConnectionMapOutputWithContext(ctx context.Context) LegacyBigqueryConnectionMapOutput {
	return o
}

func (o LegacyBigqueryConnectionMapOutput) MapIndex(k pulumi.StringInput) LegacyBigqueryConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyBigqueryConnection {
		return vs[0].(map[string]*LegacyBigqueryConnection)[vs[1].(string)]
	}).(LegacyBigqueryConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyBigqueryConnectionInput)(nil)).Elem(), &LegacyBigqueryConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyBigqueryConnectionArrayInput)(nil)).Elem(), LegacyBigqueryConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyBigqueryConnectionMapInput)(nil)).Elem(), LegacyBigqueryConnectionMap{})
	pulumi.RegisterOutputType(LegacyBigqueryConnectionOutput{})
	pulumi.RegisterOutputType(LegacyBigqueryConnectionArrayOutput{})
	pulumi.RegisterOutputType(LegacyBigqueryConnectionMapOutput{})
}

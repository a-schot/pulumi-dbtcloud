// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// NOTE for customers using the LEGACY dbt_cloud provider:
//			_, err := dbtcloud.NewEnvironment(ctx, "ciEnvironment", &dbtcloud.EnvironmentArgs{
//				DbtVersion:   pulumi.String("1.6.0-latest"),
//				ProjectId:    pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				Type:         pulumi.String("deployment"),
//				CredentialId: pulumi.Any(dbtcloud_snowflake_credential.Ci_credential.Credential_id),
//			})
//			if err != nil {
//				return err
//			}
//			// we can also set a deployment environment as being the production one
//			_, err = dbtcloud.NewEnvironment(ctx, "prodEnvironment", &dbtcloud.EnvironmentArgs{
//				DbtVersion:     pulumi.String("1.6.0-latest"),
//				ProjectId:      pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				Type:           pulumi.String("deployment"),
//				CredentialId:   pulumi.Any(dbtcloud_snowflake_credential.Prod_credential.Credential_id),
//				DeploymentType: pulumi.String("production"),
//			})
//			if err != nil {
//				return err
//			}
//			// Creating a development environment
//			_, err = dbtcloud.NewEnvironment(ctx, "devEnvironment", &dbtcloud.EnvironmentArgs{
//				DbtVersion: pulumi.String("1.6.0-latest"),
//				ProjectId:  pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				Type:       pulumi.String("development"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import using a project ID and environment ID found in the URL or via the API.
//
// ```sh
// $ pulumi import dbtcloud:index/environment:Environment prod_environment "project_id:environment_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/environment:Environment prod_environment 12345:6789
// ```
type Environment struct {
	pulumi.CustomResourceState

	// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
	CredentialId pulumi.IntPtrOutput `pulumi:"credentialId"`
	// Which custom branch to use in this environment
	CustomBranch pulumi.StringPtrOutput `pulumi:"customBranch"`
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion pulumi.StringOutput `pulumi:"dbtVersion"`
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to 'production'
	DeploymentType pulumi.StringPtrOutput `pulumi:"deploymentType"`
	// Environment ID within the project
	EnvironmentId pulumi.IntOutput `pulumi:"environmentId"`
	// ID of the extended attributes for the environment
	ExtendedAttributesId pulumi.IntPtrOutput `pulumi:"extendedAttributesId"`
	// Whether the environment is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Environment name
	Name pulumi.StringOutput `pulumi:"name"`
	// Project ID to create the environment in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type pulumi.StringOutput `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch pulumi.BoolPtrOutput `pulumi:"useCustomBranch"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbtVersion == nil {
		return nil, errors.New("invalid value for required argument 'DbtVersion'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environment
	err := ctx.RegisterResource("dbtcloud:index/environment:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("dbtcloud:index/environment:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
	// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
	CredentialId *int `pulumi:"credentialId"`
	// Which custom branch to use in this environment
	CustomBranch *string `pulumi:"customBranch"`
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion *string `pulumi:"dbtVersion"`
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to 'production'
	DeploymentType *string `pulumi:"deploymentType"`
	// Environment ID within the project
	EnvironmentId *int `pulumi:"environmentId"`
	// ID of the extended attributes for the environment
	ExtendedAttributesId *int `pulumi:"extendedAttributesId"`
	// Whether the environment is active
	IsActive *bool `pulumi:"isActive"`
	// Environment name
	Name *string `pulumi:"name"`
	// Project ID to create the environment in
	ProjectId *int `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type *string `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch *bool `pulumi:"useCustomBranch"`
}

type EnvironmentState struct {
	// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
	CredentialId pulumi.IntPtrInput
	// Which custom branch to use in this environment
	CustomBranch pulumi.StringPtrInput
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion pulumi.StringPtrInput
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to 'production'
	DeploymentType pulumi.StringPtrInput
	// Environment ID within the project
	EnvironmentId pulumi.IntPtrInput
	// ID of the extended attributes for the environment
	ExtendedAttributesId pulumi.IntPtrInput
	// Whether the environment is active
	IsActive pulumi.BoolPtrInput
	// Environment name
	Name pulumi.StringPtrInput
	// Project ID to create the environment in
	ProjectId pulumi.IntPtrInput
	// The type of environment (must be either development or deployment)
	Type pulumi.StringPtrInput
	// Whether to use a custom git branch in this environment
	UseCustomBranch pulumi.BoolPtrInput
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
	CredentialId *int `pulumi:"credentialId"`
	// Which custom branch to use in this environment
	CustomBranch *string `pulumi:"customBranch"`
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion string `pulumi:"dbtVersion"`
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to 'production'
	DeploymentType *string `pulumi:"deploymentType"`
	// ID of the extended attributes for the environment
	ExtendedAttributesId *int `pulumi:"extendedAttributesId"`
	// Whether the environment is active
	IsActive *bool `pulumi:"isActive"`
	// Environment name
	Name *string `pulumi:"name"`
	// Project ID to create the environment in
	ProjectId int `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type string `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch *bool `pulumi:"useCustomBranch"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
	CredentialId pulumi.IntPtrInput
	// Which custom branch to use in this environment
	CustomBranch pulumi.StringPtrInput
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion pulumi.StringInput
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to 'production'
	DeploymentType pulumi.StringPtrInput
	// ID of the extended attributes for the environment
	ExtendedAttributesId pulumi.IntPtrInput
	// Whether the environment is active
	IsActive pulumi.BoolPtrInput
	// Environment name
	Name pulumi.StringPtrInput
	// Project ID to create the environment in
	ProjectId pulumi.IntInput
	// The type of environment (must be either development or deployment)
	Type pulumi.StringInput
	// Whether to use a custom git branch in this environment
	UseCustomBranch pulumi.BoolPtrInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

// EnvironmentArrayInput is an input type that accepts EnvironmentArray and EnvironmentArrayOutput values.
// You can construct a concrete instance of `EnvironmentArrayInput` via:
//
//	EnvironmentArray{ EnvironmentArgs{...} }
type EnvironmentArrayInput interface {
	pulumi.Input

	ToEnvironmentArrayOutput() EnvironmentArrayOutput
	ToEnvironmentArrayOutputWithContext(context.Context) EnvironmentArrayOutput
}

type EnvironmentArray []EnvironmentInput

func (EnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (i EnvironmentArray) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return i.ToEnvironmentArrayOutputWithContext(context.Background())
}

func (i EnvironmentArray) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentArrayOutput)
}

// EnvironmentMapInput is an input type that accepts EnvironmentMap and EnvironmentMapOutput values.
// You can construct a concrete instance of `EnvironmentMapInput` via:
//
//	EnvironmentMap{ "key": EnvironmentArgs{...} }
type EnvironmentMapInput interface {
	pulumi.Input

	ToEnvironmentMapOutput() EnvironmentMapOutput
	ToEnvironmentMapOutputWithContext(context.Context) EnvironmentMapOutput
}

type EnvironmentMap map[string]EnvironmentInput

func (EnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (i EnvironmentMap) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return i.ToEnvironmentMapOutputWithContext(context.Background())
}

func (i EnvironmentMap) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentMapOutput)
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

// Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments
func (o EnvironmentOutput) CredentialId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.IntPtrOutput { return v.CredentialId }).(pulumi.IntPtrOutput)
}

// Which custom branch to use in this environment
func (o EnvironmentOutput) CustomBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.CustomBranch }).(pulumi.StringPtrOutput)
}

// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`
func (o EnvironmentOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.DbtVersion }).(pulumi.StringOutput)
}

// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to 'production'
func (o EnvironmentOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.DeploymentType }).(pulumi.StringPtrOutput)
}

// Environment ID within the project
func (o EnvironmentOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v *Environment) pulumi.IntOutput { return v.EnvironmentId }).(pulumi.IntOutput)
}

// ID of the extended attributes for the environment
func (o EnvironmentOutput) ExtendedAttributesId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.IntPtrOutput { return v.ExtendedAttributesId }).(pulumi.IntPtrOutput)
}

// Whether the environment is active
func (o EnvironmentOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Environment name
func (o EnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project ID to create the environment in
func (o EnvironmentOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *Environment) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The type of environment (must be either development or deployment)
func (o EnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Whether to use a custom git branch in this environment
func (o EnvironmentOutput) UseCustomBranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.BoolPtrOutput { return v.UseCustomBranch }).(pulumi.BoolPtrOutput)
}

type EnvironmentArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Environment)(nil)).Elem()
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutput() EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) ToEnvironmentArrayOutputWithContext(ctx context.Context) EnvironmentArrayOutput {
	return o
}

func (o EnvironmentArrayOutput) Index(i pulumi.IntInput) EnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].([]*Environment)[vs[1].(int)]
	}).(EnvironmentOutput)
}

type EnvironmentMapOutput struct{ *pulumi.OutputState }

func (EnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Environment)(nil)).Elem()
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutput() EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) ToEnvironmentMapOutputWithContext(ctx context.Context) EnvironmentMapOutput {
	return o
}

func (o EnvironmentMapOutput) MapIndex(k pulumi.StringInput) EnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Environment {
		return vs[0].(map[string]*Environment)[vs[1].(string)]
	}).(EnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), &Environment{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentArrayInput)(nil)).Elem(), EnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentMapInput)(nil)).Elem(), EnvironmentMap{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentMapOutput{})
}

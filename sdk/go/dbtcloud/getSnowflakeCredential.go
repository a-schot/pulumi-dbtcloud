// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSnowflakeCredential(ctx *pulumi.Context, args *LookupSnowflakeCredentialArgs, opts ...pulumi.InvokeOption) (*LookupSnowflakeCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnowflakeCredentialResult
	err := ctx.Invoke("dbtcloud:index/getSnowflakeCredential:getSnowflakeCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnowflakeCredential.
type LookupSnowflakeCredentialArgs struct {
	// Credential ID
	CredentialId int `pulumi:"credentialId"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
}

// A collection of values returned by getSnowflakeCredential.
type LookupSnowflakeCredentialResult struct {
	// The type of Snowflake credential ('password' or 'keypair')
	AuthType string `pulumi:"authType"`
	// Credential ID
	CredentialId int `pulumi:"credentialId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the Snowflake credential is active
	IsActive bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads int `pulumi:"numThreads"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
	// Default schema name
	Schema string `pulumi:"schema"`
	// Username for Snowflake
	User string `pulumi:"user"`
}

func LookupSnowflakeCredentialOutput(ctx *pulumi.Context, args LookupSnowflakeCredentialOutputArgs, opts ...pulumi.InvokeOption) LookupSnowflakeCredentialResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSnowflakeCredentialResult, error) {
			args := v.(LookupSnowflakeCredentialArgs)
			r, err := LookupSnowflakeCredential(ctx, &args, opts...)
			var s LookupSnowflakeCredentialResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSnowflakeCredentialResultOutput)
}

// A collection of arguments for invoking getSnowflakeCredential.
type LookupSnowflakeCredentialOutputArgs struct {
	// Credential ID
	CredentialId pulumi.IntInput `pulumi:"credentialId"`
	// Project ID
	ProjectId pulumi.IntInput `pulumi:"projectId"`
}

func (LookupSnowflakeCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnowflakeCredentialArgs)(nil)).Elem()
}

// A collection of values returned by getSnowflakeCredential.
type LookupSnowflakeCredentialResultOutput struct{ *pulumi.OutputState }

func (LookupSnowflakeCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnowflakeCredentialResult)(nil)).Elem()
}

func (o LookupSnowflakeCredentialResultOutput) ToLookupSnowflakeCredentialResultOutput() LookupSnowflakeCredentialResultOutput {
	return o
}

func (o LookupSnowflakeCredentialResultOutput) ToLookupSnowflakeCredentialResultOutputWithContext(ctx context.Context) LookupSnowflakeCredentialResultOutput {
	return o
}

// The type of Snowflake credential ('password' or 'keypair')
func (o LookupSnowflakeCredentialResultOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnowflakeCredentialResult) string { return v.AuthType }).(pulumi.StringOutput)
}

// Credential ID
func (o LookupSnowflakeCredentialResultOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnowflakeCredentialResult) int { return v.CredentialId }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSnowflakeCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnowflakeCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the Snowflake credential is active
func (o LookupSnowflakeCredentialResultOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnowflakeCredentialResult) bool { return v.IsActive }).(pulumi.BoolOutput)
}

// Number of threads to use
func (o LookupSnowflakeCredentialResultOutput) NumThreads() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnowflakeCredentialResult) int { return v.NumThreads }).(pulumi.IntOutput)
}

// Project ID
func (o LookupSnowflakeCredentialResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnowflakeCredentialResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

// Default schema name
func (o LookupSnowflakeCredentialResultOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnowflakeCredentialResult) string { return v.Schema }).(pulumi.StringOutput)
}

// Username for Snowflake
func (o LookupSnowflakeCredentialResultOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnowflakeCredentialResult) string { return v.User }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSnowflakeCredentialResultOutput{})
}

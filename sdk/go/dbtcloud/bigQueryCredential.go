// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// NOTE for customers using the LEGACY dbt_cloud provider:
//			_, err := dbtcloud.NewBigQueryCredential(ctx, "myCredential", &dbtcloud.BigQueryCredentialArgs{
//				ProjectId:  pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				Dataset:    pulumi.String("my_bq_dataset"),
//				NumThreads: pulumi.Int(16),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import dbtcloud:index/bigQueryCredential:BigQueryCredential my_credential "project_id:credential_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/bigQueryCredential:BigQueryCredential my_credential 12345:5678
// ```
type BigQueryCredential struct {
	pulumi.CustomResourceState

	// The system BigQuery credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// Default dataset name
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// Whether the BigQuery credential is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Number of threads to use
	NumThreads pulumi.IntOutput `pulumi:"numThreads"`
	// Project ID to create the BigQuery credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
}

// NewBigQueryCredential registers a new resource with the given unique name, arguments, and options.
func NewBigQueryCredential(ctx *pulumi.Context,
	name string, args *BigQueryCredentialArgs, opts ...pulumi.ResourceOption) (*BigQueryCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.NumThreads == nil {
		return nil, errors.New("invalid value for required argument 'NumThreads'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BigQueryCredential
	err := ctx.RegisterResource("dbtcloud:index/bigQueryCredential:BigQueryCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigQueryCredential gets an existing BigQueryCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigQueryCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigQueryCredentialState, opts ...pulumi.ResourceOption) (*BigQueryCredential, error) {
	var resource BigQueryCredential
	err := ctx.ReadResource("dbtcloud:index/bigQueryCredential:BigQueryCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigQueryCredential resources.
type bigQueryCredentialState struct {
	// The system BigQuery credential ID
	CredentialId *int `pulumi:"credentialId"`
	// Default dataset name
	Dataset *string `pulumi:"dataset"`
	// Whether the BigQuery credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads *int `pulumi:"numThreads"`
	// Project ID to create the BigQuery credential in
	ProjectId *int `pulumi:"projectId"`
}

type BigQueryCredentialState struct {
	// The system BigQuery credential ID
	CredentialId pulumi.IntPtrInput
	// Default dataset name
	Dataset pulumi.StringPtrInput
	// Whether the BigQuery credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntPtrInput
	// Project ID to create the BigQuery credential in
	ProjectId pulumi.IntPtrInput
}

func (BigQueryCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigQueryCredentialState)(nil)).Elem()
}

type bigQueryCredentialArgs struct {
	// Default dataset name
	Dataset string `pulumi:"dataset"`
	// Whether the BigQuery credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads int `pulumi:"numThreads"`
	// Project ID to create the BigQuery credential in
	ProjectId int `pulumi:"projectId"`
}

// The set of arguments for constructing a BigQueryCredential resource.
type BigQueryCredentialArgs struct {
	// Default dataset name
	Dataset pulumi.StringInput
	// Whether the BigQuery credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntInput
	// Project ID to create the BigQuery credential in
	ProjectId pulumi.IntInput
}

func (BigQueryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigQueryCredentialArgs)(nil)).Elem()
}

type BigQueryCredentialInput interface {
	pulumi.Input

	ToBigQueryCredentialOutput() BigQueryCredentialOutput
	ToBigQueryCredentialOutputWithContext(ctx context.Context) BigQueryCredentialOutput
}

func (*BigQueryCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryCredential)(nil)).Elem()
}

func (i *BigQueryCredential) ToBigQueryCredentialOutput() BigQueryCredentialOutput {
	return i.ToBigQueryCredentialOutputWithContext(context.Background())
}

func (i *BigQueryCredential) ToBigQueryCredentialOutputWithContext(ctx context.Context) BigQueryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryCredentialOutput)
}

// BigQueryCredentialArrayInput is an input type that accepts BigQueryCredentialArray and BigQueryCredentialArrayOutput values.
// You can construct a concrete instance of `BigQueryCredentialArrayInput` via:
//
//	BigQueryCredentialArray{ BigQueryCredentialArgs{...} }
type BigQueryCredentialArrayInput interface {
	pulumi.Input

	ToBigQueryCredentialArrayOutput() BigQueryCredentialArrayOutput
	ToBigQueryCredentialArrayOutputWithContext(context.Context) BigQueryCredentialArrayOutput
}

type BigQueryCredentialArray []BigQueryCredentialInput

func (BigQueryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigQueryCredential)(nil)).Elem()
}

func (i BigQueryCredentialArray) ToBigQueryCredentialArrayOutput() BigQueryCredentialArrayOutput {
	return i.ToBigQueryCredentialArrayOutputWithContext(context.Background())
}

func (i BigQueryCredentialArray) ToBigQueryCredentialArrayOutputWithContext(ctx context.Context) BigQueryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryCredentialArrayOutput)
}

// BigQueryCredentialMapInput is an input type that accepts BigQueryCredentialMap and BigQueryCredentialMapOutput values.
// You can construct a concrete instance of `BigQueryCredentialMapInput` via:
//
//	BigQueryCredentialMap{ "key": BigQueryCredentialArgs{...} }
type BigQueryCredentialMapInput interface {
	pulumi.Input

	ToBigQueryCredentialMapOutput() BigQueryCredentialMapOutput
	ToBigQueryCredentialMapOutputWithContext(context.Context) BigQueryCredentialMapOutput
}

type BigQueryCredentialMap map[string]BigQueryCredentialInput

func (BigQueryCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigQueryCredential)(nil)).Elem()
}

func (i BigQueryCredentialMap) ToBigQueryCredentialMapOutput() BigQueryCredentialMapOutput {
	return i.ToBigQueryCredentialMapOutputWithContext(context.Background())
}

func (i BigQueryCredentialMap) ToBigQueryCredentialMapOutputWithContext(ctx context.Context) BigQueryCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryCredentialMapOutput)
}

type BigQueryCredentialOutput struct{ *pulumi.OutputState }

func (BigQueryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryCredential)(nil)).Elem()
}

func (o BigQueryCredentialOutput) ToBigQueryCredentialOutput() BigQueryCredentialOutput {
	return o
}

func (o BigQueryCredentialOutput) ToBigQueryCredentialOutputWithContext(ctx context.Context) BigQueryCredentialOutput {
	return o
}

// The system BigQuery credential ID
func (o BigQueryCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *BigQueryCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// Default dataset name
func (o BigQueryCredentialOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryCredential) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// Whether the BigQuery credential is active
func (o BigQueryCredentialOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigQueryCredential) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Number of threads to use
func (o BigQueryCredentialOutput) NumThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *BigQueryCredential) pulumi.IntOutput { return v.NumThreads }).(pulumi.IntOutput)
}

// Project ID to create the BigQuery credential in
func (o BigQueryCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *BigQueryCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

type BigQueryCredentialArrayOutput struct{ *pulumi.OutputState }

func (BigQueryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigQueryCredential)(nil)).Elem()
}

func (o BigQueryCredentialArrayOutput) ToBigQueryCredentialArrayOutput() BigQueryCredentialArrayOutput {
	return o
}

func (o BigQueryCredentialArrayOutput) ToBigQueryCredentialArrayOutputWithContext(ctx context.Context) BigQueryCredentialArrayOutput {
	return o
}

func (o BigQueryCredentialArrayOutput) Index(i pulumi.IntInput) BigQueryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BigQueryCredential {
		return vs[0].([]*BigQueryCredential)[vs[1].(int)]
	}).(BigQueryCredentialOutput)
}

type BigQueryCredentialMapOutput struct{ *pulumi.OutputState }

func (BigQueryCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigQueryCredential)(nil)).Elem()
}

func (o BigQueryCredentialMapOutput) ToBigQueryCredentialMapOutput() BigQueryCredentialMapOutput {
	return o
}

func (o BigQueryCredentialMapOutput) ToBigQueryCredentialMapOutputWithContext(ctx context.Context) BigQueryCredentialMapOutput {
	return o
}

func (o BigQueryCredentialMapOutput) MapIndex(k pulumi.StringInput) BigQueryCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BigQueryCredential {
		return vs[0].(map[string]*BigQueryCredential)[vs[1].(string)]
	}).(BigQueryCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryCredentialInput)(nil)).Elem(), &BigQueryCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryCredentialArrayInput)(nil)).Elem(), BigQueryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryCredentialMapInput)(nil)).Elem(), BigQueryCredentialMap{})
	pulumi.RegisterOutputType(BigQueryCredentialOutput{})
	pulumi.RegisterOutputType(BigQueryCredentialArrayOutput{})
	pulumi.RegisterOutputType(BigQueryCredentialMapOutput{})
}

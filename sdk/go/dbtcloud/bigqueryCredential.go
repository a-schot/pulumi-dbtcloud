// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbtcloud.NewBigqueryCredential(ctx, "myCredential", &dbtcloud.BigqueryCredentialArgs{
//				ProjectId:  pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				Dataset:    pulumi.String("my_bq_dataset"),
//				NumThreads: pulumi.Int(16),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import dbtcloud:index/bigqueryCredential:BigqueryCredential my_credential "project_id:credential_id"
//
// ```
//
// ```sh
//
//	$ pulumi import dbtcloud:index/bigqueryCredential:BigqueryCredential my_credential 12345:5678
//
// ```
type BigqueryCredential struct {
	pulumi.CustomResourceState

	// The system BigQuery credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// Default dataset name
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// Whether the BigQuery credential is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Number of threads to use
	NumThreads pulumi.IntOutput `pulumi:"numThreads"`
	// Project ID to create the BigQuery credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
}

// NewBigqueryCredential registers a new resource with the given unique name, arguments, and options.
func NewBigqueryCredential(ctx *pulumi.Context,
	name string, args *BigqueryCredentialArgs, opts ...pulumi.ResourceOption) (*BigqueryCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.NumThreads == nil {
		return nil, errors.New("invalid value for required argument 'NumThreads'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BigqueryCredential
	err := ctx.RegisterResource("dbtcloud:index/bigqueryCredential:BigqueryCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigqueryCredential gets an existing BigqueryCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigqueryCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigqueryCredentialState, opts ...pulumi.ResourceOption) (*BigqueryCredential, error) {
	var resource BigqueryCredential
	err := ctx.ReadResource("dbtcloud:index/bigqueryCredential:BigqueryCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigqueryCredential resources.
type bigqueryCredentialState struct {
	// The system BigQuery credential ID
	CredentialId *int `pulumi:"credentialId"`
	// Default dataset name
	Dataset *string `pulumi:"dataset"`
	// Whether the BigQuery credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads *int `pulumi:"numThreads"`
	// Project ID to create the BigQuery credential in
	ProjectId *int `pulumi:"projectId"`
}

type BigqueryCredentialState struct {
	// The system BigQuery credential ID
	CredentialId pulumi.IntPtrInput
	// Default dataset name
	Dataset pulumi.StringPtrInput
	// Whether the BigQuery credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntPtrInput
	// Project ID to create the BigQuery credential in
	ProjectId pulumi.IntPtrInput
}

func (BigqueryCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryCredentialState)(nil)).Elem()
}

type bigqueryCredentialArgs struct {
	// Default dataset name
	Dataset string `pulumi:"dataset"`
	// Whether the BigQuery credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads int `pulumi:"numThreads"`
	// Project ID to create the BigQuery credential in
	ProjectId int `pulumi:"projectId"`
}

// The set of arguments for constructing a BigqueryCredential resource.
type BigqueryCredentialArgs struct {
	// Default dataset name
	Dataset pulumi.StringInput
	// Whether the BigQuery credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntInput
	// Project ID to create the BigQuery credential in
	ProjectId pulumi.IntInput
}

func (BigqueryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryCredentialArgs)(nil)).Elem()
}

type BigqueryCredentialInput interface {
	pulumi.Input

	ToBigqueryCredentialOutput() BigqueryCredentialOutput
	ToBigqueryCredentialOutputWithContext(ctx context.Context) BigqueryCredentialOutput
}

func (*BigqueryCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryCredential)(nil)).Elem()
}

func (i *BigqueryCredential) ToBigqueryCredentialOutput() BigqueryCredentialOutput {
	return i.ToBigqueryCredentialOutputWithContext(context.Background())
}

func (i *BigqueryCredential) ToBigqueryCredentialOutputWithContext(ctx context.Context) BigqueryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryCredentialOutput)
}

// BigqueryCredentialArrayInput is an input type that accepts BigqueryCredentialArray and BigqueryCredentialArrayOutput values.
// You can construct a concrete instance of `BigqueryCredentialArrayInput` via:
//
//	BigqueryCredentialArray{ BigqueryCredentialArgs{...} }
type BigqueryCredentialArrayInput interface {
	pulumi.Input

	ToBigqueryCredentialArrayOutput() BigqueryCredentialArrayOutput
	ToBigqueryCredentialArrayOutputWithContext(context.Context) BigqueryCredentialArrayOutput
}

type BigqueryCredentialArray []BigqueryCredentialInput

func (BigqueryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigqueryCredential)(nil)).Elem()
}

func (i BigqueryCredentialArray) ToBigqueryCredentialArrayOutput() BigqueryCredentialArrayOutput {
	return i.ToBigqueryCredentialArrayOutputWithContext(context.Background())
}

func (i BigqueryCredentialArray) ToBigqueryCredentialArrayOutputWithContext(ctx context.Context) BigqueryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryCredentialArrayOutput)
}

// BigqueryCredentialMapInput is an input type that accepts BigqueryCredentialMap and BigqueryCredentialMapOutput values.
// You can construct a concrete instance of `BigqueryCredentialMapInput` via:
//
//	BigqueryCredentialMap{ "key": BigqueryCredentialArgs{...} }
type BigqueryCredentialMapInput interface {
	pulumi.Input

	ToBigqueryCredentialMapOutput() BigqueryCredentialMapOutput
	ToBigqueryCredentialMapOutputWithContext(context.Context) BigqueryCredentialMapOutput
}

type BigqueryCredentialMap map[string]BigqueryCredentialInput

func (BigqueryCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigqueryCredential)(nil)).Elem()
}

func (i BigqueryCredentialMap) ToBigqueryCredentialMapOutput() BigqueryCredentialMapOutput {
	return i.ToBigqueryCredentialMapOutputWithContext(context.Background())
}

func (i BigqueryCredentialMap) ToBigqueryCredentialMapOutputWithContext(ctx context.Context) BigqueryCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryCredentialMapOutput)
}

type BigqueryCredentialOutput struct{ *pulumi.OutputState }

func (BigqueryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryCredential)(nil)).Elem()
}

func (o BigqueryCredentialOutput) ToBigqueryCredentialOutput() BigqueryCredentialOutput {
	return o
}

func (o BigqueryCredentialOutput) ToBigqueryCredentialOutputWithContext(ctx context.Context) BigqueryCredentialOutput {
	return o
}

// The system BigQuery credential ID
func (o BigqueryCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *BigqueryCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// Default dataset name
func (o BigqueryCredentialOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryCredential) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// Whether the BigQuery credential is active
func (o BigqueryCredentialOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigqueryCredential) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Number of threads to use
func (o BigqueryCredentialOutput) NumThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *BigqueryCredential) pulumi.IntOutput { return v.NumThreads }).(pulumi.IntOutput)
}

// Project ID to create the BigQuery credential in
func (o BigqueryCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *BigqueryCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

type BigqueryCredentialArrayOutput struct{ *pulumi.OutputState }

func (BigqueryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigqueryCredential)(nil)).Elem()
}

func (o BigqueryCredentialArrayOutput) ToBigqueryCredentialArrayOutput() BigqueryCredentialArrayOutput {
	return o
}

func (o BigqueryCredentialArrayOutput) ToBigqueryCredentialArrayOutputWithContext(ctx context.Context) BigqueryCredentialArrayOutput {
	return o
}

func (o BigqueryCredentialArrayOutput) Index(i pulumi.IntInput) BigqueryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BigqueryCredential {
		return vs[0].([]*BigqueryCredential)[vs[1].(int)]
	}).(BigqueryCredentialOutput)
}

type BigqueryCredentialMapOutput struct{ *pulumi.OutputState }

func (BigqueryCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigqueryCredential)(nil)).Elem()
}

func (o BigqueryCredentialMapOutput) ToBigqueryCredentialMapOutput() BigqueryCredentialMapOutput {
	return o
}

func (o BigqueryCredentialMapOutput) ToBigqueryCredentialMapOutputWithContext(ctx context.Context) BigqueryCredentialMapOutput {
	return o
}

func (o BigqueryCredentialMapOutput) MapIndex(k pulumi.StringInput) BigqueryCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BigqueryCredential {
		return vs[0].(map[string]*BigqueryCredential)[vs[1].(string)]
	}).(BigqueryCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryCredentialInput)(nil)).Elem(), &BigqueryCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryCredentialArrayInput)(nil)).Elem(), BigqueryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryCredentialMapInput)(nil)).Elem(), BigqueryCredentialMap{})
	pulumi.RegisterOutputType(BigqueryCredentialOutput{})
	pulumi.RegisterOutputType(BigqueryCredentialArrayOutput{})
	pulumi.RegisterOutputType(BigqueryCredentialMapOutput{})
}

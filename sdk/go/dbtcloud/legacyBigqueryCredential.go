// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource
type LegacyBigqueryCredential struct {
	pulumi.CustomResourceState

	// The system BigQuery credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// Default dataset name
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// Whether the BigQuery credential is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Number of threads to use
	NumThreads pulumi.IntOutput `pulumi:"numThreads"`
	// Project ID to create the BigQuery credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
}

// NewLegacyBigqueryCredential registers a new resource with the given unique name, arguments, and options.
func NewLegacyBigqueryCredential(ctx *pulumi.Context,
	name string, args *LegacyBigqueryCredentialArgs, opts ...pulumi.ResourceOption) (*LegacyBigqueryCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.NumThreads == nil {
		return nil, errors.New("invalid value for required argument 'NumThreads'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyBigqueryCredential
	err := ctx.RegisterResource("dbtcloud:index/legacyBigqueryCredential:LegacyBigqueryCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyBigqueryCredential gets an existing LegacyBigqueryCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyBigqueryCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyBigqueryCredentialState, opts ...pulumi.ResourceOption) (*LegacyBigqueryCredential, error) {
	var resource LegacyBigqueryCredential
	err := ctx.ReadResource("dbtcloud:index/legacyBigqueryCredential:LegacyBigqueryCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyBigqueryCredential resources.
type legacyBigqueryCredentialState struct {
	// The system BigQuery credential ID
	CredentialId *int `pulumi:"credentialId"`
	// Default dataset name
	Dataset *string `pulumi:"dataset"`
	// Whether the BigQuery credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads *int `pulumi:"numThreads"`
	// Project ID to create the BigQuery credential in
	ProjectId *int `pulumi:"projectId"`
}

type LegacyBigqueryCredentialState struct {
	// The system BigQuery credential ID
	CredentialId pulumi.IntPtrInput
	// Default dataset name
	Dataset pulumi.StringPtrInput
	// Whether the BigQuery credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntPtrInput
	// Project ID to create the BigQuery credential in
	ProjectId pulumi.IntPtrInput
}

func (LegacyBigqueryCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyBigqueryCredentialState)(nil)).Elem()
}

type legacyBigqueryCredentialArgs struct {
	// Default dataset name
	Dataset string `pulumi:"dataset"`
	// Whether the BigQuery credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads int `pulumi:"numThreads"`
	// Project ID to create the BigQuery credential in
	ProjectId int `pulumi:"projectId"`
}

// The set of arguments for constructing a LegacyBigqueryCredential resource.
type LegacyBigqueryCredentialArgs struct {
	// Default dataset name
	Dataset pulumi.StringInput
	// Whether the BigQuery credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntInput
	// Project ID to create the BigQuery credential in
	ProjectId pulumi.IntInput
}

func (LegacyBigqueryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyBigqueryCredentialArgs)(nil)).Elem()
}

type LegacyBigqueryCredentialInput interface {
	pulumi.Input

	ToLegacyBigqueryCredentialOutput() LegacyBigqueryCredentialOutput
	ToLegacyBigqueryCredentialOutputWithContext(ctx context.Context) LegacyBigqueryCredentialOutput
}

func (*LegacyBigqueryCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyBigqueryCredential)(nil)).Elem()
}

func (i *LegacyBigqueryCredential) ToLegacyBigqueryCredentialOutput() LegacyBigqueryCredentialOutput {
	return i.ToLegacyBigqueryCredentialOutputWithContext(context.Background())
}

func (i *LegacyBigqueryCredential) ToLegacyBigqueryCredentialOutputWithContext(ctx context.Context) LegacyBigqueryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyBigqueryCredentialOutput)
}

// LegacyBigqueryCredentialArrayInput is an input type that accepts LegacyBigqueryCredentialArray and LegacyBigqueryCredentialArrayOutput values.
// You can construct a concrete instance of `LegacyBigqueryCredentialArrayInput` via:
//
//	LegacyBigqueryCredentialArray{ LegacyBigqueryCredentialArgs{...} }
type LegacyBigqueryCredentialArrayInput interface {
	pulumi.Input

	ToLegacyBigqueryCredentialArrayOutput() LegacyBigqueryCredentialArrayOutput
	ToLegacyBigqueryCredentialArrayOutputWithContext(context.Context) LegacyBigqueryCredentialArrayOutput
}

type LegacyBigqueryCredentialArray []LegacyBigqueryCredentialInput

func (LegacyBigqueryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyBigqueryCredential)(nil)).Elem()
}

func (i LegacyBigqueryCredentialArray) ToLegacyBigqueryCredentialArrayOutput() LegacyBigqueryCredentialArrayOutput {
	return i.ToLegacyBigqueryCredentialArrayOutputWithContext(context.Background())
}

func (i LegacyBigqueryCredentialArray) ToLegacyBigqueryCredentialArrayOutputWithContext(ctx context.Context) LegacyBigqueryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyBigqueryCredentialArrayOutput)
}

// LegacyBigqueryCredentialMapInput is an input type that accepts LegacyBigqueryCredentialMap and LegacyBigqueryCredentialMapOutput values.
// You can construct a concrete instance of `LegacyBigqueryCredentialMapInput` via:
//
//	LegacyBigqueryCredentialMap{ "key": LegacyBigqueryCredentialArgs{...} }
type LegacyBigqueryCredentialMapInput interface {
	pulumi.Input

	ToLegacyBigqueryCredentialMapOutput() LegacyBigqueryCredentialMapOutput
	ToLegacyBigqueryCredentialMapOutputWithContext(context.Context) LegacyBigqueryCredentialMapOutput
}

type LegacyBigqueryCredentialMap map[string]LegacyBigqueryCredentialInput

func (LegacyBigqueryCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyBigqueryCredential)(nil)).Elem()
}

func (i LegacyBigqueryCredentialMap) ToLegacyBigqueryCredentialMapOutput() LegacyBigqueryCredentialMapOutput {
	return i.ToLegacyBigqueryCredentialMapOutputWithContext(context.Background())
}

func (i LegacyBigqueryCredentialMap) ToLegacyBigqueryCredentialMapOutputWithContext(ctx context.Context) LegacyBigqueryCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyBigqueryCredentialMapOutput)
}

type LegacyBigqueryCredentialOutput struct{ *pulumi.OutputState }

func (LegacyBigqueryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyBigqueryCredential)(nil)).Elem()
}

func (o LegacyBigqueryCredentialOutput) ToLegacyBigqueryCredentialOutput() LegacyBigqueryCredentialOutput {
	return o
}

func (o LegacyBigqueryCredentialOutput) ToLegacyBigqueryCredentialOutputWithContext(ctx context.Context) LegacyBigqueryCredentialOutput {
	return o
}

// The system BigQuery credential ID
func (o LegacyBigqueryCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyBigqueryCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// Default dataset name
func (o LegacyBigqueryCredentialOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyBigqueryCredential) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// Whether the BigQuery credential is active
func (o LegacyBigqueryCredentialOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyBigqueryCredential) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Number of threads to use
func (o LegacyBigqueryCredentialOutput) NumThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyBigqueryCredential) pulumi.IntOutput { return v.NumThreads }).(pulumi.IntOutput)
}

// Project ID to create the BigQuery credential in
func (o LegacyBigqueryCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyBigqueryCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

type LegacyBigqueryCredentialArrayOutput struct{ *pulumi.OutputState }

func (LegacyBigqueryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyBigqueryCredential)(nil)).Elem()
}

func (o LegacyBigqueryCredentialArrayOutput) ToLegacyBigqueryCredentialArrayOutput() LegacyBigqueryCredentialArrayOutput {
	return o
}

func (o LegacyBigqueryCredentialArrayOutput) ToLegacyBigqueryCredentialArrayOutputWithContext(ctx context.Context) LegacyBigqueryCredentialArrayOutput {
	return o
}

func (o LegacyBigqueryCredentialArrayOutput) Index(i pulumi.IntInput) LegacyBigqueryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyBigqueryCredential {
		return vs[0].([]*LegacyBigqueryCredential)[vs[1].(int)]
	}).(LegacyBigqueryCredentialOutput)
}

type LegacyBigqueryCredentialMapOutput struct{ *pulumi.OutputState }

func (LegacyBigqueryCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyBigqueryCredential)(nil)).Elem()
}

func (o LegacyBigqueryCredentialMapOutput) ToLegacyBigqueryCredentialMapOutput() LegacyBigqueryCredentialMapOutput {
	return o
}

func (o LegacyBigqueryCredentialMapOutput) ToLegacyBigqueryCredentialMapOutputWithContext(ctx context.Context) LegacyBigqueryCredentialMapOutput {
	return o
}

func (o LegacyBigqueryCredentialMapOutput) MapIndex(k pulumi.StringInput) LegacyBigqueryCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyBigqueryCredential {
		return vs[0].(map[string]*LegacyBigqueryCredential)[vs[1].(string)]
	}).(LegacyBigqueryCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyBigqueryCredentialInput)(nil)).Elem(), &LegacyBigqueryCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyBigqueryCredentialArrayInput)(nil)).Elem(), LegacyBigqueryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyBigqueryCredentialMapInput)(nil)).Elem(), LegacyBigqueryCredentialMap{})
	pulumi.RegisterOutputType(LegacyBigqueryCredentialOutput{})
	pulumi.RegisterOutputType(LegacyBigqueryCredentialArrayOutput{})
	pulumi.RegisterOutputType(LegacyBigqueryCredentialMapOutput{})
}

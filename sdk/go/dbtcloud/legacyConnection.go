// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LegacyConnection struct {
	pulumi.CustomResourceState

	// Account name for the connection
	Account pulumi.StringPtrOutput `pulumi:"account"`
	// Adapter id created for the Databricks connection
	AdapterId pulumi.IntOutput `pulumi:"adapterId"`
	// Whether or not the connection should allow client session keep alive
	AllowKeepAlive pulumi.BoolPtrOutput `pulumi:"allowKeepAlive"`
	// Whether or not the connection should allow SSO
	AllowSso pulumi.BoolPtrOutput `pulumi:"allowSso"`
	// Catalog name if Unity Catalog is enabled in your Databricks workspace
	Catalog pulumi.StringPtrOutput `pulumi:"catalog"`
	// Connection Identifier
	ConnectionId pulumi.IntOutput `pulumi:"connectionId"`
	// Database name for the connection
	Database pulumi.StringOutput `pulumi:"database"`
	// Host name for the connection, including Databricks cluster
	HostName pulumi.StringPtrOutput `pulumi:"hostName"`
	// The HTTP path of the Databricks cluster or SQL warehouse
	HttpPath pulumi.StringPtrOutput `pulumi:"httpPath"`
	// Whether the connection is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Connection name
	Name pulumi.StringOutput `pulumi:"name"`
	// OAuth client identifier
	OauthClientId pulumi.StringPtrOutput `pulumi:"oauthClientId"`
	// OAuth client secret
	OauthClientSecret pulumi.StringPtrOutput `pulumi:"oauthClientSecret"`
	// Port number to connect via
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
	PrivateLinkEndpointId pulumi.StringPtrOutput `pulumi:"privateLinkEndpointId"`
	// Project ID to create the connection in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Role name for the connection
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Whether or not tunneling should be enabled on your database connection
	TunnelEnabled pulumi.BoolPtrOutput `pulumi:"tunnelEnabled"`
	// The type of connection
	Type pulumi.StringOutput `pulumi:"type"`
	// Warehouse name for the connection
	Warehouse pulumi.StringPtrOutput `pulumi:"warehouse"`
}

// NewLegacyConnection registers a new resource with the given unique name, arguments, and options.
func NewLegacyConnection(ctx *pulumi.Context,
	name string, args *LegacyConnectionArgs, opts ...pulumi.ResourceOption) (*LegacyConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyConnection
	err := ctx.RegisterResource("dbtcloud:index/legacyConnection:LegacyConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyConnection gets an existing LegacyConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyConnectionState, opts ...pulumi.ResourceOption) (*LegacyConnection, error) {
	var resource LegacyConnection
	err := ctx.ReadResource("dbtcloud:index/legacyConnection:LegacyConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyConnection resources.
type legacyConnectionState struct {
	// Account name for the connection
	Account *string `pulumi:"account"`
	// Adapter id created for the Databricks connection
	AdapterId *int `pulumi:"adapterId"`
	// Whether or not the connection should allow client session keep alive
	AllowKeepAlive *bool `pulumi:"allowKeepAlive"`
	// Whether or not the connection should allow SSO
	AllowSso *bool `pulumi:"allowSso"`
	// Catalog name if Unity Catalog is enabled in your Databricks workspace
	Catalog *string `pulumi:"catalog"`
	// Connection Identifier
	ConnectionId *int `pulumi:"connectionId"`
	// Database name for the connection
	Database *string `pulumi:"database"`
	// Host name for the connection, including Databricks cluster
	HostName *string `pulumi:"hostName"`
	// The HTTP path of the Databricks cluster or SQL warehouse
	HttpPath *string `pulumi:"httpPath"`
	// Whether the connection is active
	IsActive *bool `pulumi:"isActive"`
	// Connection name
	Name *string `pulumi:"name"`
	// OAuth client identifier
	OauthClientId *string `pulumi:"oauthClientId"`
	// OAuth client secret
	OauthClientSecret *string `pulumi:"oauthClientSecret"`
	// Port number to connect via
	Port *int `pulumi:"port"`
	// The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
	PrivateLinkEndpointId *string `pulumi:"privateLinkEndpointId"`
	// Project ID to create the connection in
	ProjectId *int `pulumi:"projectId"`
	// Role name for the connection
	Role *string `pulumi:"role"`
	// Whether or not tunneling should be enabled on your database connection
	TunnelEnabled *bool `pulumi:"tunnelEnabled"`
	// The type of connection
	Type *string `pulumi:"type"`
	// Warehouse name for the connection
	Warehouse *string `pulumi:"warehouse"`
}

type LegacyConnectionState struct {
	// Account name for the connection
	Account pulumi.StringPtrInput
	// Adapter id created for the Databricks connection
	AdapterId pulumi.IntPtrInput
	// Whether or not the connection should allow client session keep alive
	AllowKeepAlive pulumi.BoolPtrInput
	// Whether or not the connection should allow SSO
	AllowSso pulumi.BoolPtrInput
	// Catalog name if Unity Catalog is enabled in your Databricks workspace
	Catalog pulumi.StringPtrInput
	// Connection Identifier
	ConnectionId pulumi.IntPtrInput
	// Database name for the connection
	Database pulumi.StringPtrInput
	// Host name for the connection, including Databricks cluster
	HostName pulumi.StringPtrInput
	// The HTTP path of the Databricks cluster or SQL warehouse
	HttpPath pulumi.StringPtrInput
	// Whether the connection is active
	IsActive pulumi.BoolPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// OAuth client identifier
	OauthClientId pulumi.StringPtrInput
	// OAuth client secret
	OauthClientSecret pulumi.StringPtrInput
	// Port number to connect via
	Port pulumi.IntPtrInput
	// The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
	PrivateLinkEndpointId pulumi.StringPtrInput
	// Project ID to create the connection in
	ProjectId pulumi.IntPtrInput
	// Role name for the connection
	Role pulumi.StringPtrInput
	// Whether or not tunneling should be enabled on your database connection
	TunnelEnabled pulumi.BoolPtrInput
	// The type of connection
	Type pulumi.StringPtrInput
	// Warehouse name for the connection
	Warehouse pulumi.StringPtrInput
}

func (LegacyConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyConnectionState)(nil)).Elem()
}

type legacyConnectionArgs struct {
	// Account name for the connection
	Account *string `pulumi:"account"`
	// Whether or not the connection should allow client session keep alive
	AllowKeepAlive *bool `pulumi:"allowKeepAlive"`
	// Whether or not the connection should allow SSO
	AllowSso *bool `pulumi:"allowSso"`
	// Catalog name if Unity Catalog is enabled in your Databricks workspace
	Catalog *string `pulumi:"catalog"`
	// Database name for the connection
	Database string `pulumi:"database"`
	// Host name for the connection, including Databricks cluster
	HostName *string `pulumi:"hostName"`
	// The HTTP path of the Databricks cluster or SQL warehouse
	HttpPath *string `pulumi:"httpPath"`
	// Whether the connection is active
	IsActive *bool `pulumi:"isActive"`
	// Connection name
	Name *string `pulumi:"name"`
	// OAuth client identifier
	OauthClientId *string `pulumi:"oauthClientId"`
	// OAuth client secret
	OauthClientSecret *string `pulumi:"oauthClientSecret"`
	// Port number to connect via
	Port *int `pulumi:"port"`
	// The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
	PrivateLinkEndpointId *string `pulumi:"privateLinkEndpointId"`
	// Project ID to create the connection in
	ProjectId int `pulumi:"projectId"`
	// Role name for the connection
	Role *string `pulumi:"role"`
	// Whether or not tunneling should be enabled on your database connection
	TunnelEnabled *bool `pulumi:"tunnelEnabled"`
	// The type of connection
	Type string `pulumi:"type"`
	// Warehouse name for the connection
	Warehouse *string `pulumi:"warehouse"`
}

// The set of arguments for constructing a LegacyConnection resource.
type LegacyConnectionArgs struct {
	// Account name for the connection
	Account pulumi.StringPtrInput
	// Whether or not the connection should allow client session keep alive
	AllowKeepAlive pulumi.BoolPtrInput
	// Whether or not the connection should allow SSO
	AllowSso pulumi.BoolPtrInput
	// Catalog name if Unity Catalog is enabled in your Databricks workspace
	Catalog pulumi.StringPtrInput
	// Database name for the connection
	Database pulumi.StringInput
	// Host name for the connection, including Databricks cluster
	HostName pulumi.StringPtrInput
	// The HTTP path of the Databricks cluster or SQL warehouse
	HttpPath pulumi.StringPtrInput
	// Whether the connection is active
	IsActive pulumi.BoolPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// OAuth client identifier
	OauthClientId pulumi.StringPtrInput
	// OAuth client secret
	OauthClientSecret pulumi.StringPtrInput
	// Port number to connect via
	Port pulumi.IntPtrInput
	// The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
	PrivateLinkEndpointId pulumi.StringPtrInput
	// Project ID to create the connection in
	ProjectId pulumi.IntInput
	// Role name for the connection
	Role pulumi.StringPtrInput
	// Whether or not tunneling should be enabled on your database connection
	TunnelEnabled pulumi.BoolPtrInput
	// The type of connection
	Type pulumi.StringInput
	// Warehouse name for the connection
	Warehouse pulumi.StringPtrInput
}

func (LegacyConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyConnectionArgs)(nil)).Elem()
}

type LegacyConnectionInput interface {
	pulumi.Input

	ToLegacyConnectionOutput() LegacyConnectionOutput
	ToLegacyConnectionOutputWithContext(ctx context.Context) LegacyConnectionOutput
}

func (*LegacyConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyConnection)(nil)).Elem()
}

func (i *LegacyConnection) ToLegacyConnectionOutput() LegacyConnectionOutput {
	return i.ToLegacyConnectionOutputWithContext(context.Background())
}

func (i *LegacyConnection) ToLegacyConnectionOutputWithContext(ctx context.Context) LegacyConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyConnectionOutput)
}

// LegacyConnectionArrayInput is an input type that accepts LegacyConnectionArray and LegacyConnectionArrayOutput values.
// You can construct a concrete instance of `LegacyConnectionArrayInput` via:
//
//	LegacyConnectionArray{ LegacyConnectionArgs{...} }
type LegacyConnectionArrayInput interface {
	pulumi.Input

	ToLegacyConnectionArrayOutput() LegacyConnectionArrayOutput
	ToLegacyConnectionArrayOutputWithContext(context.Context) LegacyConnectionArrayOutput
}

type LegacyConnectionArray []LegacyConnectionInput

func (LegacyConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyConnection)(nil)).Elem()
}

func (i LegacyConnectionArray) ToLegacyConnectionArrayOutput() LegacyConnectionArrayOutput {
	return i.ToLegacyConnectionArrayOutputWithContext(context.Background())
}

func (i LegacyConnectionArray) ToLegacyConnectionArrayOutputWithContext(ctx context.Context) LegacyConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyConnectionArrayOutput)
}

// LegacyConnectionMapInput is an input type that accepts LegacyConnectionMap and LegacyConnectionMapOutput values.
// You can construct a concrete instance of `LegacyConnectionMapInput` via:
//
//	LegacyConnectionMap{ "key": LegacyConnectionArgs{...} }
type LegacyConnectionMapInput interface {
	pulumi.Input

	ToLegacyConnectionMapOutput() LegacyConnectionMapOutput
	ToLegacyConnectionMapOutputWithContext(context.Context) LegacyConnectionMapOutput
}

type LegacyConnectionMap map[string]LegacyConnectionInput

func (LegacyConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyConnection)(nil)).Elem()
}

func (i LegacyConnectionMap) ToLegacyConnectionMapOutput() LegacyConnectionMapOutput {
	return i.ToLegacyConnectionMapOutputWithContext(context.Background())
}

func (i LegacyConnectionMap) ToLegacyConnectionMapOutputWithContext(ctx context.Context) LegacyConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyConnectionMapOutput)
}

type LegacyConnectionOutput struct{ *pulumi.OutputState }

func (LegacyConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyConnection)(nil)).Elem()
}

func (o LegacyConnectionOutput) ToLegacyConnectionOutput() LegacyConnectionOutput {
	return o
}

func (o LegacyConnectionOutput) ToLegacyConnectionOutputWithContext(ctx context.Context) LegacyConnectionOutput {
	return o
}

// Account name for the connection
func (o LegacyConnectionOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringPtrOutput { return v.Account }).(pulumi.StringPtrOutput)
}

// Adapter id created for the Databricks connection
func (o LegacyConnectionOutput) AdapterId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.IntOutput { return v.AdapterId }).(pulumi.IntOutput)
}

// Whether or not the connection should allow client session keep alive
func (o LegacyConnectionOutput) AllowKeepAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.BoolPtrOutput { return v.AllowKeepAlive }).(pulumi.BoolPtrOutput)
}

// Whether or not the connection should allow SSO
func (o LegacyConnectionOutput) AllowSso() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.BoolPtrOutput { return v.AllowSso }).(pulumi.BoolPtrOutput)
}

// Catalog name if Unity Catalog is enabled in your Databricks workspace
func (o LegacyConnectionOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringPtrOutput { return v.Catalog }).(pulumi.StringPtrOutput)
}

// Connection Identifier
func (o LegacyConnectionOutput) ConnectionId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.IntOutput { return v.ConnectionId }).(pulumi.IntOutput)
}

// Database name for the connection
func (o LegacyConnectionOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Host name for the connection, including Databricks cluster
func (o LegacyConnectionOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

// The HTTP path of the Databricks cluster or SQL warehouse
func (o LegacyConnectionOutput) HttpPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringPtrOutput { return v.HttpPath }).(pulumi.StringPtrOutput)
}

// Whether the connection is active
func (o LegacyConnectionOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Connection name
func (o LegacyConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// OAuth client identifier
func (o LegacyConnectionOutput) OauthClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringPtrOutput { return v.OauthClientId }).(pulumi.StringPtrOutput)
}

// OAuth client secret
func (o LegacyConnectionOutput) OauthClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringPtrOutput { return v.OauthClientSecret }).(pulumi.StringPtrOutput)
}

// Port number to connect via
func (o LegacyConnectionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
func (o LegacyConnectionOutput) PrivateLinkEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringPtrOutput { return v.PrivateLinkEndpointId }).(pulumi.StringPtrOutput)
}

// Project ID to create the connection in
func (o LegacyConnectionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Role name for the connection
func (o LegacyConnectionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Whether or not tunneling should be enabled on your database connection
func (o LegacyConnectionOutput) TunnelEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.BoolPtrOutput { return v.TunnelEnabled }).(pulumi.BoolPtrOutput)
}

// The type of connection
func (o LegacyConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Warehouse name for the connection
func (o LegacyConnectionOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyConnection) pulumi.StringPtrOutput { return v.Warehouse }).(pulumi.StringPtrOutput)
}

type LegacyConnectionArrayOutput struct{ *pulumi.OutputState }

func (LegacyConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyConnection)(nil)).Elem()
}

func (o LegacyConnectionArrayOutput) ToLegacyConnectionArrayOutput() LegacyConnectionArrayOutput {
	return o
}

func (o LegacyConnectionArrayOutput) ToLegacyConnectionArrayOutputWithContext(ctx context.Context) LegacyConnectionArrayOutput {
	return o
}

func (o LegacyConnectionArrayOutput) Index(i pulumi.IntInput) LegacyConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyConnection {
		return vs[0].([]*LegacyConnection)[vs[1].(int)]
	}).(LegacyConnectionOutput)
}

type LegacyConnectionMapOutput struct{ *pulumi.OutputState }

func (LegacyConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyConnection)(nil)).Elem()
}

func (o LegacyConnectionMapOutput) ToLegacyConnectionMapOutput() LegacyConnectionMapOutput {
	return o
}

func (o LegacyConnectionMapOutput) ToLegacyConnectionMapOutputWithContext(ctx context.Context) LegacyConnectionMapOutput {
	return o
}

func (o LegacyConnectionMapOutput) MapIndex(k pulumi.StringInput) LegacyConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyConnection {
		return vs[0].(map[string]*LegacyConnection)[vs[1].(string)]
	}).(LegacyConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyConnectionInput)(nil)).Elem(), &LegacyConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyConnectionArrayInput)(nil)).Elem(), LegacyConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyConnectionMapInput)(nil)).Elem(), LegacyConnectionMap{})
	pulumi.RegisterOutputType(LegacyConnectionOutput{})
	pulumi.RegisterOutputType(LegacyConnectionArrayOutput{})
	pulumi.RegisterOutputType(LegacyConnectionMapOutput{})
}

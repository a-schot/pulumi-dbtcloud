// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Developer license group mapping
//			_, err := dbtcloud.NewLicenseMap(ctx, "devLicenseMap", &dbtcloud.LicenseMapArgs{
//				LicenseType: pulumi.String("developer"),
//				SsoLicenseMappingGroups: pulumi.StringArray{
//					pulumi.String("DEV-SSO-GROUP"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Read-only license mapping
//			_, err = dbtcloud.NewLicenseMap(ctx, "readOnlyLicenseMap", &dbtcloud.LicenseMapArgs{
//				LicenseType: pulumi.String("read_only"),
//				SsoLicenseMappingGroups: pulumi.StringArray{
//					pulumi.String("READ-ONLY-SSO-GROUP"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// IT license mapping
//			_, err = dbtcloud.NewLicenseMap(ctx, "itLicenseMap", &dbtcloud.LicenseMapArgs{
//				LicenseType: pulumi.String("it"),
//				SsoLicenseMappingGroups: pulumi.StringArray{
//					pulumi.String("IT-SSO-GROUP"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import using a license map ID found in the URL or via the API.
//
// ```sh
// $ pulumi import dbtcloud:index/licenseMap:LicenseMap test_license_map "license_map_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/licenseMap:LicenseMap test_license_map 12345
// ```
type LicenseMap struct {
	pulumi.CustomResourceState

	// License type
	LicenseType pulumi.StringOutput `pulumi:"licenseType"`
	// SSO license mapping group names for this group
	SsoLicenseMappingGroups pulumi.StringArrayOutput `pulumi:"ssoLicenseMappingGroups"`
}

// NewLicenseMap registers a new resource with the given unique name, arguments, and options.
func NewLicenseMap(ctx *pulumi.Context,
	name string, args *LicenseMapArgs, opts ...pulumi.ResourceOption) (*LicenseMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LicenseType == nil {
		return nil, errors.New("invalid value for required argument 'LicenseType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseMap
	err := ctx.RegisterResource("dbtcloud:index/licenseMap:LicenseMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseMap gets an existing LicenseMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseMapState, opts ...pulumi.ResourceOption) (*LicenseMap, error) {
	var resource LicenseMap
	err := ctx.ReadResource("dbtcloud:index/licenseMap:LicenseMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseMap resources.
type licenseMapState struct {
	// License type
	LicenseType *string `pulumi:"licenseType"`
	// SSO license mapping group names for this group
	SsoLicenseMappingGroups []string `pulumi:"ssoLicenseMappingGroups"`
}

type LicenseMapState struct {
	// License type
	LicenseType pulumi.StringPtrInput
	// SSO license mapping group names for this group
	SsoLicenseMappingGroups pulumi.StringArrayInput
}

func (LicenseMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseMapState)(nil)).Elem()
}

type licenseMapArgs struct {
	// License type
	LicenseType string `pulumi:"licenseType"`
	// SSO license mapping group names for this group
	SsoLicenseMappingGroups []string `pulumi:"ssoLicenseMappingGroups"`
}

// The set of arguments for constructing a LicenseMap resource.
type LicenseMapArgs struct {
	// License type
	LicenseType pulumi.StringInput
	// SSO license mapping group names for this group
	SsoLicenseMappingGroups pulumi.StringArrayInput
}

func (LicenseMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseMapArgs)(nil)).Elem()
}

type LicenseMapInput interface {
	pulumi.Input

	ToLicenseMapOutput() LicenseMapOutput
	ToLicenseMapOutputWithContext(ctx context.Context) LicenseMapOutput
}

func (*LicenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseMap)(nil)).Elem()
}

func (i *LicenseMap) ToLicenseMapOutput() LicenseMapOutput {
	return i.ToLicenseMapOutputWithContext(context.Background())
}

func (i *LicenseMap) ToLicenseMapOutputWithContext(ctx context.Context) LicenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseMapOutput)
}

// LicenseMapArrayInput is an input type that accepts LicenseMapArray and LicenseMapArrayOutput values.
// You can construct a concrete instance of `LicenseMapArrayInput` via:
//
//	LicenseMapArray{ LicenseMapArgs{...} }
type LicenseMapArrayInput interface {
	pulumi.Input

	ToLicenseMapArrayOutput() LicenseMapArrayOutput
	ToLicenseMapArrayOutputWithContext(context.Context) LicenseMapArrayOutput
}

type LicenseMapArray []LicenseMapInput

func (LicenseMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseMap)(nil)).Elem()
}

func (i LicenseMapArray) ToLicenseMapArrayOutput() LicenseMapArrayOutput {
	return i.ToLicenseMapArrayOutputWithContext(context.Background())
}

func (i LicenseMapArray) ToLicenseMapArrayOutputWithContext(ctx context.Context) LicenseMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseMapArrayOutput)
}

// LicenseMapMapInput is an input type that accepts LicenseMapMap and LicenseMapMapOutput values.
// You can construct a concrete instance of `LicenseMapMapInput` via:
//
//	LicenseMapMap{ "key": LicenseMapArgs{...} }
type LicenseMapMapInput interface {
	pulumi.Input

	ToLicenseMapMapOutput() LicenseMapMapOutput
	ToLicenseMapMapOutputWithContext(context.Context) LicenseMapMapOutput
}

type LicenseMapMap map[string]LicenseMapInput

func (LicenseMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseMap)(nil)).Elem()
}

func (i LicenseMapMap) ToLicenseMapMapOutput() LicenseMapMapOutput {
	return i.ToLicenseMapMapOutputWithContext(context.Background())
}

func (i LicenseMapMap) ToLicenseMapMapOutputWithContext(ctx context.Context) LicenseMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseMapMapOutput)
}

type LicenseMapOutput struct{ *pulumi.OutputState }

func (LicenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseMap)(nil)).Elem()
}

func (o LicenseMapOutput) ToLicenseMapOutput() LicenseMapOutput {
	return o
}

func (o LicenseMapOutput) ToLicenseMapOutputWithContext(ctx context.Context) LicenseMapOutput {
	return o
}

// License type
func (o LicenseMapOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseMap) pulumi.StringOutput { return v.LicenseType }).(pulumi.StringOutput)
}

// SSO license mapping group names for this group
func (o LicenseMapOutput) SsoLicenseMappingGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LicenseMap) pulumi.StringArrayOutput { return v.SsoLicenseMappingGroups }).(pulumi.StringArrayOutput)
}

type LicenseMapArrayOutput struct{ *pulumi.OutputState }

func (LicenseMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseMap)(nil)).Elem()
}

func (o LicenseMapArrayOutput) ToLicenseMapArrayOutput() LicenseMapArrayOutput {
	return o
}

func (o LicenseMapArrayOutput) ToLicenseMapArrayOutputWithContext(ctx context.Context) LicenseMapArrayOutput {
	return o
}

func (o LicenseMapArrayOutput) Index(i pulumi.IntInput) LicenseMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseMap {
		return vs[0].([]*LicenseMap)[vs[1].(int)]
	}).(LicenseMapOutput)
}

type LicenseMapMapOutput struct{ *pulumi.OutputState }

func (LicenseMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseMap)(nil)).Elem()
}

func (o LicenseMapMapOutput) ToLicenseMapMapOutput() LicenseMapMapOutput {
	return o
}

func (o LicenseMapMapOutput) ToLicenseMapMapOutputWithContext(ctx context.Context) LicenseMapMapOutput {
	return o
}

func (o LicenseMapMapOutput) MapIndex(k pulumi.StringInput) LicenseMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseMap {
		return vs[0].(map[string]*LicenseMap)[vs[1].(string)]
	}).(LicenseMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseMapInput)(nil)).Elem(), &LicenseMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseMapArrayInput)(nil)).Elem(), LicenseMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseMapMapInput)(nil)).Elem(), LicenseMapMap{})
	pulumi.RegisterOutputType(LicenseMapOutput{})
	pulumi.RegisterOutputType(LicenseMapArrayOutput{})
	pulumi.RegisterOutputType(LicenseMapMapOutput{})
}

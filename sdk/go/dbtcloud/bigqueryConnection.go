// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to create BigQuery connections in dbt Cloud. Can be set to use OAuth for developers.
//
// ## Import
//
// ```sh
//
//	$ pulumi import dbtcloud:index/bigqueryConnection:BigqueryConnection my_connection "project_id:connection_id"
//
// ```
//
// ```sh
//
//	$ pulumi import dbtcloud:index/bigqueryConnection:BigqueryConnection my_connection 12345:6789
//
// ```
type BigqueryConnection struct {
	pulumi.CustomResourceState

	// The Application ID for BQ OAuth
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// The Application Secret for BQ OAuth
	ApplicationSecret pulumi.StringPtrOutput `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringOutput `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri pulumi.StringOutput `pulumi:"authUri"`
	// Service Account email
	ClientEmail pulumi.StringOutput `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringOutput `pulumi:"clientX509CertUrl"`
	// Connection Identifier
	ConnectionId pulumi.IntOutput `pulumi:"connectionId"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrOutput `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrOutput `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrOutput `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId pulumi.StringOutput `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrOutput `pulumi:"gcsBucket"`
	// Whether the connection is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth pulumi.BoolOutput `pulumi:"isConfiguredForOauth"`
	// Location to create new Datasets in
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrOutput `pulumi:"maximumBytesBilled"`
	// Connection name
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId pulumi.StringOutput `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Number of retries for queries
	Retries pulumi.IntPtrOutput `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntOutput `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri pulumi.StringOutput `pulumi:"tokenUri"`
	// The type of connection
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewBigqueryConnection registers a new resource with the given unique name, arguments, and options.
func NewBigqueryConnection(ctx *pulumi.Context,
	name string, args *BigqueryConnectionArgs, opts ...pulumi.ResourceOption) (*BigqueryConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthProviderX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'AuthProviderX509CertUrl'")
	}
	if args.AuthUri == nil {
		return nil, errors.New("invalid value for required argument 'AuthUri'")
	}
	if args.ClientEmail == nil {
		return nil, errors.New("invalid value for required argument 'ClientEmail'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'ClientX509CertUrl'")
	}
	if args.GcpProjectId == nil {
		return nil, errors.New("invalid value for required argument 'GcpProjectId'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKeyId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKeyId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TimeoutSeconds == nil {
		return nil, errors.New("invalid value for required argument 'TimeoutSeconds'")
	}
	if args.TokenUri == nil {
		return nil, errors.New("invalid value for required argument 'TokenUri'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ApplicationId != nil {
		args.ApplicationId = pulumi.ToSecret(args.ApplicationId).(pulumi.StringPtrInput)
	}
	if args.ApplicationSecret != nil {
		args.ApplicationSecret = pulumi.ToSecret(args.ApplicationSecret).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"applicationId",
		"applicationSecret",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BigqueryConnection
	err := ctx.RegisterResource("dbtcloud:index/bigqueryConnection:BigqueryConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigqueryConnection gets an existing BigqueryConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigqueryConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigqueryConnectionState, opts ...pulumi.ResourceOption) (*BigqueryConnection, error) {
	var resource BigqueryConnection
	err := ctx.ReadResource("dbtcloud:index/bigqueryConnection:BigqueryConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigqueryConnection resources.
type bigqueryConnectionState struct {
	// The Application ID for BQ OAuth
	ApplicationId *string `pulumi:"applicationId"`
	// The Application Secret for BQ OAuth
	ApplicationSecret *string `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl *string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri *string `pulumi:"authUri"`
	// Service Account email
	ClientEmail *string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId *string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl *string `pulumi:"clientX509CertUrl"`
	// Connection Identifier
	ConnectionId *int `pulumi:"connectionId"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName *string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion *string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject *string `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId *string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket *string `pulumi:"gcsBucket"`
	// Whether the connection is active
	IsActive *bool `pulumi:"isActive"`
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth *bool `pulumi:"isConfiguredForOauth"`
	// Location to create new Datasets in
	Location *string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled *int `pulumi:"maximumBytesBilled"`
	// Connection name
	Name *string `pulumi:"name"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority *string `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey *string `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId *string `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId *int `pulumi:"projectId"`
	// Number of retries for queries
	Retries *int `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri *string `pulumi:"tokenUri"`
	// The type of connection
	Type *string `pulumi:"type"`
}

type BigqueryConnectionState struct {
	// The Application ID for BQ OAuth
	ApplicationId pulumi.StringPtrInput
	// The Application Secret for BQ OAuth
	ApplicationSecret pulumi.StringPtrInput
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringPtrInput
	// Auth URI for the Service Account
	AuthUri pulumi.StringPtrInput
	// Service Account email
	ClientEmail pulumi.StringPtrInput
	// Client ID of the Service Account
	ClientId pulumi.StringPtrInput
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringPtrInput
	// Connection Identifier
	ConnectionId pulumi.IntPtrInput
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrInput
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrInput
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrInput
	// GCP project ID
	GcpProjectId pulumi.StringPtrInput
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrInput
	// Whether the connection is active
	IsActive pulumi.BoolPtrInput
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth pulumi.BoolPtrInput
	// Location to create new Datasets in
	Location pulumi.StringPtrInput
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrInput
	// Private key of the Service Account
	PrivateKey pulumi.StringPtrInput
	// Private key ID of the Service Account
	PrivateKeyId pulumi.StringPtrInput
	// Project ID to create the connection in
	ProjectId pulumi.IntPtrInput
	// Number of retries for queries
	Retries pulumi.IntPtrInput
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntPtrInput
	// Token URI for the Service Account
	TokenUri pulumi.StringPtrInput
	// The type of connection
	Type pulumi.StringPtrInput
}

func (BigqueryConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryConnectionState)(nil)).Elem()
}

type bigqueryConnectionArgs struct {
	// The Application ID for BQ OAuth
	ApplicationId *string `pulumi:"applicationId"`
	// The Application Secret for BQ OAuth
	ApplicationSecret *string `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri string `pulumi:"authUri"`
	// Service Account email
	ClientEmail string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName *string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion *string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject *string `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket *string `pulumi:"gcsBucket"`
	// Whether the connection is active
	IsActive *bool `pulumi:"isActive"`
	// Location to create new Datasets in
	Location *string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled *int `pulumi:"maximumBytesBilled"`
	// Connection name
	Name *string `pulumi:"name"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority *string `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey string `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId int `pulumi:"projectId"`
	// Number of retries for queries
	Retries *int `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri string `pulumi:"tokenUri"`
	// The type of connection
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a BigqueryConnection resource.
type BigqueryConnectionArgs struct {
	// The Application ID for BQ OAuth
	ApplicationId pulumi.StringPtrInput
	// The Application Secret for BQ OAuth
	ApplicationSecret pulumi.StringPtrInput
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringInput
	// Auth URI for the Service Account
	AuthUri pulumi.StringInput
	// Service Account email
	ClientEmail pulumi.StringInput
	// Client ID of the Service Account
	ClientId pulumi.StringInput
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringInput
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrInput
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrInput
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrInput
	// GCP project ID
	GcpProjectId pulumi.StringInput
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrInput
	// Whether the connection is active
	IsActive pulumi.BoolPtrInput
	// Location to create new Datasets in
	Location pulumi.StringPtrInput
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrInput
	// Private key of the Service Account
	PrivateKey pulumi.StringInput
	// Private key ID of the Service Account
	PrivateKeyId pulumi.StringInput
	// Project ID to create the connection in
	ProjectId pulumi.IntInput
	// Number of retries for queries
	Retries pulumi.IntPtrInput
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntInput
	// Token URI for the Service Account
	TokenUri pulumi.StringInput
	// The type of connection
	Type pulumi.StringInput
}

func (BigqueryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigqueryConnectionArgs)(nil)).Elem()
}

type BigqueryConnectionInput interface {
	pulumi.Input

	ToBigqueryConnectionOutput() BigqueryConnectionOutput
	ToBigqueryConnectionOutputWithContext(ctx context.Context) BigqueryConnectionOutput
}

func (*BigqueryConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryConnection)(nil)).Elem()
}

func (i *BigqueryConnection) ToBigqueryConnectionOutput() BigqueryConnectionOutput {
	return i.ToBigqueryConnectionOutputWithContext(context.Background())
}

func (i *BigqueryConnection) ToBigqueryConnectionOutputWithContext(ctx context.Context) BigqueryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryConnectionOutput)
}

// BigqueryConnectionArrayInput is an input type that accepts BigqueryConnectionArray and BigqueryConnectionArrayOutput values.
// You can construct a concrete instance of `BigqueryConnectionArrayInput` via:
//
//	BigqueryConnectionArray{ BigqueryConnectionArgs{...} }
type BigqueryConnectionArrayInput interface {
	pulumi.Input

	ToBigqueryConnectionArrayOutput() BigqueryConnectionArrayOutput
	ToBigqueryConnectionArrayOutputWithContext(context.Context) BigqueryConnectionArrayOutput
}

type BigqueryConnectionArray []BigqueryConnectionInput

func (BigqueryConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigqueryConnection)(nil)).Elem()
}

func (i BigqueryConnectionArray) ToBigqueryConnectionArrayOutput() BigqueryConnectionArrayOutput {
	return i.ToBigqueryConnectionArrayOutputWithContext(context.Background())
}

func (i BigqueryConnectionArray) ToBigqueryConnectionArrayOutputWithContext(ctx context.Context) BigqueryConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryConnectionArrayOutput)
}

// BigqueryConnectionMapInput is an input type that accepts BigqueryConnectionMap and BigqueryConnectionMapOutput values.
// You can construct a concrete instance of `BigqueryConnectionMapInput` via:
//
//	BigqueryConnectionMap{ "key": BigqueryConnectionArgs{...} }
type BigqueryConnectionMapInput interface {
	pulumi.Input

	ToBigqueryConnectionMapOutput() BigqueryConnectionMapOutput
	ToBigqueryConnectionMapOutputWithContext(context.Context) BigqueryConnectionMapOutput
}

type BigqueryConnectionMap map[string]BigqueryConnectionInput

func (BigqueryConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigqueryConnection)(nil)).Elem()
}

func (i BigqueryConnectionMap) ToBigqueryConnectionMapOutput() BigqueryConnectionMapOutput {
	return i.ToBigqueryConnectionMapOutputWithContext(context.Background())
}

func (i BigqueryConnectionMap) ToBigqueryConnectionMapOutputWithContext(ctx context.Context) BigqueryConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigqueryConnectionMapOutput)
}

type BigqueryConnectionOutput struct{ *pulumi.OutputState }

func (BigqueryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigqueryConnection)(nil)).Elem()
}

func (o BigqueryConnectionOutput) ToBigqueryConnectionOutput() BigqueryConnectionOutput {
	return o
}

func (o BigqueryConnectionOutput) ToBigqueryConnectionOutputWithContext(ctx context.Context) BigqueryConnectionOutput {
	return o
}

// The Application ID for BQ OAuth
func (o BigqueryConnectionOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// The Application Secret for BQ OAuth
func (o BigqueryConnectionOutput) ApplicationSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringPtrOutput { return v.ApplicationSecret }).(pulumi.StringPtrOutput)
}

// Auth Provider X509 Cert URL for the Service Account
func (o BigqueryConnectionOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Auth URI for the Service Account
func (o BigqueryConnectionOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.AuthUri }).(pulumi.StringOutput)
}

// Service Account email
func (o BigqueryConnectionOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client ID of the Service Account
func (o BigqueryConnectionOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Client X509 Cert URL for the Service Account
func (o BigqueryConnectionOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// Connection Identifier
func (o BigqueryConnectionOutput) ConnectionId() pulumi.IntOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.IntOutput { return v.ConnectionId }).(pulumi.IntOutput)
}

// Dataproc cluster name for PySpark workloads
func (o BigqueryConnectionOutput) DataprocClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringPtrOutput { return v.DataprocClusterName }).(pulumi.StringPtrOutput)
}

// Google Cloud region for PySpark workloads on Dataproc
func (o BigqueryConnectionOutput) DataprocRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringPtrOutput { return v.DataprocRegion }).(pulumi.StringPtrOutput)
}

// Project to bill for query execution
func (o BigqueryConnectionOutput) ExecutionProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringPtrOutput { return v.ExecutionProject }).(pulumi.StringPtrOutput)
}

// GCP project ID
func (o BigqueryConnectionOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.GcpProjectId }).(pulumi.StringOutput)
}

// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
func (o BigqueryConnectionOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringPtrOutput { return v.GcsBucket }).(pulumi.StringPtrOutput)
}

// Whether the connection is active
func (o BigqueryConnectionOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Whether the connection is configured for OAuth or not
func (o BigqueryConnectionOutput) IsConfiguredForOauth() pulumi.BoolOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.BoolOutput { return v.IsConfiguredForOauth }).(pulumi.BoolOutput)
}

// Location to create new Datasets in
func (o BigqueryConnectionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Max number of bytes that can be billed for a given BigQuery query
func (o BigqueryConnectionOutput) MaximumBytesBilled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.IntPtrOutput { return v.MaximumBytesBilled }).(pulumi.IntPtrOutput)
}

// Connection name
func (o BigqueryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The priority with which to execute BigQuery queries (batch or interactive)
func (o BigqueryConnectionOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// Private key of the Service Account
func (o BigqueryConnectionOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private key ID of the Service Account
func (o BigqueryConnectionOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Project ID to create the connection in
func (o BigqueryConnectionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Number of retries for queries
func (o BigqueryConnectionOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.IntPtrOutput { return v.Retries }).(pulumi.IntPtrOutput)
}

// Timeout in seconds for queries
func (o BigqueryConnectionOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.IntOutput { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

// Token URI for the Service Account
func (o BigqueryConnectionOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.TokenUri }).(pulumi.StringOutput)
}

// The type of connection
func (o BigqueryConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *BigqueryConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type BigqueryConnectionArrayOutput struct{ *pulumi.OutputState }

func (BigqueryConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigqueryConnection)(nil)).Elem()
}

func (o BigqueryConnectionArrayOutput) ToBigqueryConnectionArrayOutput() BigqueryConnectionArrayOutput {
	return o
}

func (o BigqueryConnectionArrayOutput) ToBigqueryConnectionArrayOutputWithContext(ctx context.Context) BigqueryConnectionArrayOutput {
	return o
}

func (o BigqueryConnectionArrayOutput) Index(i pulumi.IntInput) BigqueryConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BigqueryConnection {
		return vs[0].([]*BigqueryConnection)[vs[1].(int)]
	}).(BigqueryConnectionOutput)
}

type BigqueryConnectionMapOutput struct{ *pulumi.OutputState }

func (BigqueryConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigqueryConnection)(nil)).Elem()
}

func (o BigqueryConnectionMapOutput) ToBigqueryConnectionMapOutput() BigqueryConnectionMapOutput {
	return o
}

func (o BigqueryConnectionMapOutput) ToBigqueryConnectionMapOutputWithContext(ctx context.Context) BigqueryConnectionMapOutput {
	return o
}

func (o BigqueryConnectionMapOutput) MapIndex(k pulumi.StringInput) BigqueryConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BigqueryConnection {
		return vs[0].(map[string]*BigqueryConnection)[vs[1].(string)]
	}).(BigqueryConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryConnectionInput)(nil)).Elem(), &BigqueryConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryConnectionArrayInput)(nil)).Elem(), BigqueryConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigqueryConnectionMapInput)(nil)).Elem(), BigqueryConnectionMap{})
	pulumi.RegisterOutputType(BigqueryConnectionOutput{})
	pulumi.RegisterOutputType(BigqueryConnectionArrayOutput{})
	pulumi.RegisterOutputType(BigqueryConnectionMapOutput{})
}

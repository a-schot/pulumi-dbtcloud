// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource
type LegacyDatabricksCredential struct {
	pulumi.CustomResourceState

	// Databricks adapter ID for the credential
	AdapterId pulumi.IntOutput `pulumi:"adapterId"`
	// The type of the adapter (databricks or spark)
	AdapterType pulumi.StringOutput `pulumi:"adapterType"`
	// The catalog where to create models (only for the databricks adapter)
	Catalog pulumi.StringPtrOutput `pulumi:"catalog"`
	// The system Databricks credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// Project ID to create the Databricks credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The schema where to create models
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Target name
	TargetName pulumi.StringPtrOutput `pulumi:"targetName"`
	// Token for Databricks user
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewLegacyDatabricksCredential registers a new resource with the given unique name, arguments, and options.
func NewLegacyDatabricksCredential(ctx *pulumi.Context,
	name string, args *LegacyDatabricksCredentialArgs, opts ...pulumi.ResourceOption) (*LegacyDatabricksCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdapterId == nil {
		return nil, errors.New("invalid value for required argument 'AdapterId'")
	}
	if args.AdapterType == nil {
		return nil, errors.New("invalid value for required argument 'AdapterType'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyDatabricksCredential
	err := ctx.RegisterResource("dbtcloud:index/legacyDatabricksCredential:LegacyDatabricksCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyDatabricksCredential gets an existing LegacyDatabricksCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyDatabricksCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyDatabricksCredentialState, opts ...pulumi.ResourceOption) (*LegacyDatabricksCredential, error) {
	var resource LegacyDatabricksCredential
	err := ctx.ReadResource("dbtcloud:index/legacyDatabricksCredential:LegacyDatabricksCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyDatabricksCredential resources.
type legacyDatabricksCredentialState struct {
	// Databricks adapter ID for the credential
	AdapterId *int `pulumi:"adapterId"`
	// The type of the adapter (databricks or spark)
	AdapterType *string `pulumi:"adapterType"`
	// The catalog where to create models (only for the databricks adapter)
	Catalog *string `pulumi:"catalog"`
	// The system Databricks credential ID
	CredentialId *int `pulumi:"credentialId"`
	// Project ID to create the Databricks credential in
	ProjectId *int `pulumi:"projectId"`
	// The schema where to create models
	Schema *string `pulumi:"schema"`
	// Target name
	TargetName *string `pulumi:"targetName"`
	// Token for Databricks user
	Token *string `pulumi:"token"`
}

type LegacyDatabricksCredentialState struct {
	// Databricks adapter ID for the credential
	AdapterId pulumi.IntPtrInput
	// The type of the adapter (databricks or spark)
	AdapterType pulumi.StringPtrInput
	// The catalog where to create models (only for the databricks adapter)
	Catalog pulumi.StringPtrInput
	// The system Databricks credential ID
	CredentialId pulumi.IntPtrInput
	// Project ID to create the Databricks credential in
	ProjectId pulumi.IntPtrInput
	// The schema where to create models
	Schema pulumi.StringPtrInput
	// Target name
	TargetName pulumi.StringPtrInput
	// Token for Databricks user
	Token pulumi.StringPtrInput
}

func (LegacyDatabricksCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyDatabricksCredentialState)(nil)).Elem()
}

type legacyDatabricksCredentialArgs struct {
	// Databricks adapter ID for the credential
	AdapterId int `pulumi:"adapterId"`
	// The type of the adapter (databricks or spark)
	AdapterType string `pulumi:"adapterType"`
	// The catalog where to create models (only for the databricks adapter)
	Catalog *string `pulumi:"catalog"`
	// Project ID to create the Databricks credential in
	ProjectId int `pulumi:"projectId"`
	// The schema where to create models
	Schema string `pulumi:"schema"`
	// Target name
	TargetName *string `pulumi:"targetName"`
	// Token for Databricks user
	Token string `pulumi:"token"`
}

// The set of arguments for constructing a LegacyDatabricksCredential resource.
type LegacyDatabricksCredentialArgs struct {
	// Databricks adapter ID for the credential
	AdapterId pulumi.IntInput
	// The type of the adapter (databricks or spark)
	AdapterType pulumi.StringInput
	// The catalog where to create models (only for the databricks adapter)
	Catalog pulumi.StringPtrInput
	// Project ID to create the Databricks credential in
	ProjectId pulumi.IntInput
	// The schema where to create models
	Schema pulumi.StringInput
	// Target name
	TargetName pulumi.StringPtrInput
	// Token for Databricks user
	Token pulumi.StringInput
}

func (LegacyDatabricksCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyDatabricksCredentialArgs)(nil)).Elem()
}

type LegacyDatabricksCredentialInput interface {
	pulumi.Input

	ToLegacyDatabricksCredentialOutput() LegacyDatabricksCredentialOutput
	ToLegacyDatabricksCredentialOutputWithContext(ctx context.Context) LegacyDatabricksCredentialOutput
}

func (*LegacyDatabricksCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyDatabricksCredential)(nil)).Elem()
}

func (i *LegacyDatabricksCredential) ToLegacyDatabricksCredentialOutput() LegacyDatabricksCredentialOutput {
	return i.ToLegacyDatabricksCredentialOutputWithContext(context.Background())
}

func (i *LegacyDatabricksCredential) ToLegacyDatabricksCredentialOutputWithContext(ctx context.Context) LegacyDatabricksCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyDatabricksCredentialOutput)
}

// LegacyDatabricksCredentialArrayInput is an input type that accepts LegacyDatabricksCredentialArray and LegacyDatabricksCredentialArrayOutput values.
// You can construct a concrete instance of `LegacyDatabricksCredentialArrayInput` via:
//
//	LegacyDatabricksCredentialArray{ LegacyDatabricksCredentialArgs{...} }
type LegacyDatabricksCredentialArrayInput interface {
	pulumi.Input

	ToLegacyDatabricksCredentialArrayOutput() LegacyDatabricksCredentialArrayOutput
	ToLegacyDatabricksCredentialArrayOutputWithContext(context.Context) LegacyDatabricksCredentialArrayOutput
}

type LegacyDatabricksCredentialArray []LegacyDatabricksCredentialInput

func (LegacyDatabricksCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyDatabricksCredential)(nil)).Elem()
}

func (i LegacyDatabricksCredentialArray) ToLegacyDatabricksCredentialArrayOutput() LegacyDatabricksCredentialArrayOutput {
	return i.ToLegacyDatabricksCredentialArrayOutputWithContext(context.Background())
}

func (i LegacyDatabricksCredentialArray) ToLegacyDatabricksCredentialArrayOutputWithContext(ctx context.Context) LegacyDatabricksCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyDatabricksCredentialArrayOutput)
}

// LegacyDatabricksCredentialMapInput is an input type that accepts LegacyDatabricksCredentialMap and LegacyDatabricksCredentialMapOutput values.
// You can construct a concrete instance of `LegacyDatabricksCredentialMapInput` via:
//
//	LegacyDatabricksCredentialMap{ "key": LegacyDatabricksCredentialArgs{...} }
type LegacyDatabricksCredentialMapInput interface {
	pulumi.Input

	ToLegacyDatabricksCredentialMapOutput() LegacyDatabricksCredentialMapOutput
	ToLegacyDatabricksCredentialMapOutputWithContext(context.Context) LegacyDatabricksCredentialMapOutput
}

type LegacyDatabricksCredentialMap map[string]LegacyDatabricksCredentialInput

func (LegacyDatabricksCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyDatabricksCredential)(nil)).Elem()
}

func (i LegacyDatabricksCredentialMap) ToLegacyDatabricksCredentialMapOutput() LegacyDatabricksCredentialMapOutput {
	return i.ToLegacyDatabricksCredentialMapOutputWithContext(context.Background())
}

func (i LegacyDatabricksCredentialMap) ToLegacyDatabricksCredentialMapOutputWithContext(ctx context.Context) LegacyDatabricksCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyDatabricksCredentialMapOutput)
}

type LegacyDatabricksCredentialOutput struct{ *pulumi.OutputState }

func (LegacyDatabricksCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyDatabricksCredential)(nil)).Elem()
}

func (o LegacyDatabricksCredentialOutput) ToLegacyDatabricksCredentialOutput() LegacyDatabricksCredentialOutput {
	return o
}

func (o LegacyDatabricksCredentialOutput) ToLegacyDatabricksCredentialOutputWithContext(ctx context.Context) LegacyDatabricksCredentialOutput {
	return o
}

// Databricks adapter ID for the credential
func (o LegacyDatabricksCredentialOutput) AdapterId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyDatabricksCredential) pulumi.IntOutput { return v.AdapterId }).(pulumi.IntOutput)
}

// The type of the adapter (databricks or spark)
func (o LegacyDatabricksCredentialOutput) AdapterType() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyDatabricksCredential) pulumi.StringOutput { return v.AdapterType }).(pulumi.StringOutput)
}

// The catalog where to create models (only for the databricks adapter)
func (o LegacyDatabricksCredentialOutput) Catalog() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyDatabricksCredential) pulumi.StringPtrOutput { return v.Catalog }).(pulumi.StringPtrOutput)
}

// The system Databricks credential ID
func (o LegacyDatabricksCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyDatabricksCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// Project ID to create the Databricks credential in
func (o LegacyDatabricksCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyDatabricksCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The schema where to create models
func (o LegacyDatabricksCredentialOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyDatabricksCredential) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Target name
func (o LegacyDatabricksCredentialOutput) TargetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyDatabricksCredential) pulumi.StringPtrOutput { return v.TargetName }).(pulumi.StringPtrOutput)
}

// Token for Databricks user
func (o LegacyDatabricksCredentialOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyDatabricksCredential) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type LegacyDatabricksCredentialArrayOutput struct{ *pulumi.OutputState }

func (LegacyDatabricksCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyDatabricksCredential)(nil)).Elem()
}

func (o LegacyDatabricksCredentialArrayOutput) ToLegacyDatabricksCredentialArrayOutput() LegacyDatabricksCredentialArrayOutput {
	return o
}

func (o LegacyDatabricksCredentialArrayOutput) ToLegacyDatabricksCredentialArrayOutputWithContext(ctx context.Context) LegacyDatabricksCredentialArrayOutput {
	return o
}

func (o LegacyDatabricksCredentialArrayOutput) Index(i pulumi.IntInput) LegacyDatabricksCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyDatabricksCredential {
		return vs[0].([]*LegacyDatabricksCredential)[vs[1].(int)]
	}).(LegacyDatabricksCredentialOutput)
}

type LegacyDatabricksCredentialMapOutput struct{ *pulumi.OutputState }

func (LegacyDatabricksCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyDatabricksCredential)(nil)).Elem()
}

func (o LegacyDatabricksCredentialMapOutput) ToLegacyDatabricksCredentialMapOutput() LegacyDatabricksCredentialMapOutput {
	return o
}

func (o LegacyDatabricksCredentialMapOutput) ToLegacyDatabricksCredentialMapOutputWithContext(ctx context.Context) LegacyDatabricksCredentialMapOutput {
	return o
}

func (o LegacyDatabricksCredentialMapOutput) MapIndex(k pulumi.StringInput) LegacyDatabricksCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyDatabricksCredential {
		return vs[0].(map[string]*LegacyDatabricksCredential)[vs[1].(string)]
	}).(LegacyDatabricksCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyDatabricksCredentialInput)(nil)).Elem(), &LegacyDatabricksCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyDatabricksCredentialArrayInput)(nil)).Elem(), LegacyDatabricksCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyDatabricksCredentialMapInput)(nil)).Elem(), LegacyDatabricksCredentialMap{})
	pulumi.RegisterOutputType(LegacyDatabricksCredentialOutput{})
	pulumi.RegisterOutputType(LegacyDatabricksCredentialArrayOutput{})
	pulumi.RegisterOutputType(LegacyDatabricksCredentialMapOutput{})
}

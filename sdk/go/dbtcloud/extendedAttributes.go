// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows setting extended attributes which can be assigned to a given environment ([see docs](https://docs.getdbt.com/docs/dbt-cloud-environments#extended-attributes-beta)).<br/><br/>In dbt Cloud those values are provided as YML but in the provider they need to be provided as JSON (see example below).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"type":      "databricks",
//				"catalog":   "dbt_catalog",
//				"http_path": "/sql/your/http/path",
//				"my_nested_field": map[string]interface{}{
//					"subfield": "my_value",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			// extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function
//			// we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering
//			myAttributes, err := dbtcloud.NewExtendedAttributes(ctx, "myAttributes", &dbtcloud.ExtendedAttributesArgs{
//				ExtendedAttributes: pulumi.String(json0),
//				ProjectId:          pulumi.Any(_var.Dbt_project.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dbtcloud.NewEnvironment(ctx, "issueDepl", &dbtcloud.EnvironmentArgs{
//				DbtVersion:           pulumi.String("1.6.0-latest"),
//				ProjectId:            pulumi.Any(_var.Dbt_project.Id),
//				Type:                 pulumi.String("deployment"),
//				UseCustomBranch:      pulumi.Bool(false),
//				CredentialId:         pulumi.Any(_var.Dbt_credential_id),
//				DeploymentType:       pulumi.String("production"),
//				ExtendedAttributesId: myAttributes.ExtendedAttributesId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import using a project ID and extended attribute ID found in the URL or via the API.
//
// ```sh
// $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes "project_id_id:extended_attributes_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes 12345:6789
// ```
type ExtendedAttributes struct {
	pulumi.CustomResourceState

	// A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
	// `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
	// environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
	// in your Terraform code. (see example)
	ExtendedAttributes pulumi.StringOutput `pulumi:"extendedAttributes"`
	// Extended Attributes ID
	ExtendedAttributesId pulumi.IntOutput `pulumi:"extendedAttributesId"`
	// Project ID to create the extended attributes in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Extended Attributes state (1 is active, 2 is inactive)
	State pulumi.IntPtrOutput `pulumi:"state"`
}

// NewExtendedAttributes registers a new resource with the given unique name, arguments, and options.
func NewExtendedAttributes(ctx *pulumi.Context,
	name string, args *ExtendedAttributesArgs, opts ...pulumi.ResourceOption) (*ExtendedAttributes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtendedAttributes == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedAttributes'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExtendedAttributes
	err := ctx.RegisterResource("dbtcloud:index/extendedAttributes:ExtendedAttributes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtendedAttributes gets an existing ExtendedAttributes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtendedAttributes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtendedAttributesState, opts ...pulumi.ResourceOption) (*ExtendedAttributes, error) {
	var resource ExtendedAttributes
	err := ctx.ReadResource("dbtcloud:index/extendedAttributes:ExtendedAttributes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtendedAttributes resources.
type extendedAttributesState struct {
	// A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
	// `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
	// environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
	// in your Terraform code. (see example)
	ExtendedAttributes *string `pulumi:"extendedAttributes"`
	// Extended Attributes ID
	ExtendedAttributesId *int `pulumi:"extendedAttributesId"`
	// Project ID to create the extended attributes in
	ProjectId *int `pulumi:"projectId"`
	// Extended Attributes state (1 is active, 2 is inactive)
	State *int `pulumi:"state"`
}

type ExtendedAttributesState struct {
	// A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
	// `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
	// environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
	// in your Terraform code. (see example)
	ExtendedAttributes pulumi.StringPtrInput
	// Extended Attributes ID
	ExtendedAttributesId pulumi.IntPtrInput
	// Project ID to create the extended attributes in
	ProjectId pulumi.IntPtrInput
	// Extended Attributes state (1 is active, 2 is inactive)
	State pulumi.IntPtrInput
}

func (ExtendedAttributesState) ElementType() reflect.Type {
	return reflect.TypeOf((*extendedAttributesState)(nil)).Elem()
}

type extendedAttributesArgs struct {
	// A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
	// `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
	// environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
	// in your Terraform code. (see example)
	ExtendedAttributes string `pulumi:"extendedAttributes"`
	// Project ID to create the extended attributes in
	ProjectId int `pulumi:"projectId"`
	// Extended Attributes state (1 is active, 2 is inactive)
	State *int `pulumi:"state"`
}

// The set of arguments for constructing a ExtendedAttributes resource.
type ExtendedAttributesArgs struct {
	// A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
	// `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
	// environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
	// in your Terraform code. (see example)
	ExtendedAttributes pulumi.StringInput
	// Project ID to create the extended attributes in
	ProjectId pulumi.IntInput
	// Extended Attributes state (1 is active, 2 is inactive)
	State pulumi.IntPtrInput
}

func (ExtendedAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extendedAttributesArgs)(nil)).Elem()
}

type ExtendedAttributesInput interface {
	pulumi.Input

	ToExtendedAttributesOutput() ExtendedAttributesOutput
	ToExtendedAttributesOutputWithContext(ctx context.Context) ExtendedAttributesOutput
}

func (*ExtendedAttributes) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedAttributes)(nil)).Elem()
}

func (i *ExtendedAttributes) ToExtendedAttributesOutput() ExtendedAttributesOutput {
	return i.ToExtendedAttributesOutputWithContext(context.Background())
}

func (i *ExtendedAttributes) ToExtendedAttributesOutputWithContext(ctx context.Context) ExtendedAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedAttributesOutput)
}

// ExtendedAttributesArrayInput is an input type that accepts ExtendedAttributesArray and ExtendedAttributesArrayOutput values.
// You can construct a concrete instance of `ExtendedAttributesArrayInput` via:
//
//	ExtendedAttributesArray{ ExtendedAttributesArgs{...} }
type ExtendedAttributesArrayInput interface {
	pulumi.Input

	ToExtendedAttributesArrayOutput() ExtendedAttributesArrayOutput
	ToExtendedAttributesArrayOutputWithContext(context.Context) ExtendedAttributesArrayOutput
}

type ExtendedAttributesArray []ExtendedAttributesInput

func (ExtendedAttributesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtendedAttributes)(nil)).Elem()
}

func (i ExtendedAttributesArray) ToExtendedAttributesArrayOutput() ExtendedAttributesArrayOutput {
	return i.ToExtendedAttributesArrayOutputWithContext(context.Background())
}

func (i ExtendedAttributesArray) ToExtendedAttributesArrayOutputWithContext(ctx context.Context) ExtendedAttributesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedAttributesArrayOutput)
}

// ExtendedAttributesMapInput is an input type that accepts ExtendedAttributesMap and ExtendedAttributesMapOutput values.
// You can construct a concrete instance of `ExtendedAttributesMapInput` via:
//
//	ExtendedAttributesMap{ "key": ExtendedAttributesArgs{...} }
type ExtendedAttributesMapInput interface {
	pulumi.Input

	ToExtendedAttributesMapOutput() ExtendedAttributesMapOutput
	ToExtendedAttributesMapOutputWithContext(context.Context) ExtendedAttributesMapOutput
}

type ExtendedAttributesMap map[string]ExtendedAttributesInput

func (ExtendedAttributesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtendedAttributes)(nil)).Elem()
}

func (i ExtendedAttributesMap) ToExtendedAttributesMapOutput() ExtendedAttributesMapOutput {
	return i.ToExtendedAttributesMapOutputWithContext(context.Background())
}

func (i ExtendedAttributesMap) ToExtendedAttributesMapOutputWithContext(ctx context.Context) ExtendedAttributesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedAttributesMapOutput)
}

type ExtendedAttributesOutput struct{ *pulumi.OutputState }

func (ExtendedAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedAttributes)(nil)).Elem()
}

func (o ExtendedAttributesOutput) ToExtendedAttributesOutput() ExtendedAttributesOutput {
	return o
}

func (o ExtendedAttributesOutput) ToExtendedAttributesOutputWithContext(ctx context.Context) ExtendedAttributesOutput {
	return o
}

// A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
// `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
// environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
// in your Terraform code. (see example)
func (o ExtendedAttributesOutput) ExtendedAttributes() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendedAttributes) pulumi.StringOutput { return v.ExtendedAttributes }).(pulumi.StringOutput)
}

// Extended Attributes ID
func (o ExtendedAttributesOutput) ExtendedAttributesId() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtendedAttributes) pulumi.IntOutput { return v.ExtendedAttributesId }).(pulumi.IntOutput)
}

// Project ID to create the extended attributes in
func (o ExtendedAttributesOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtendedAttributes) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Extended Attributes state (1 is active, 2 is inactive)
func (o ExtendedAttributesOutput) State() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExtendedAttributes) pulumi.IntPtrOutput { return v.State }).(pulumi.IntPtrOutput)
}

type ExtendedAttributesArrayOutput struct{ *pulumi.OutputState }

func (ExtendedAttributesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtendedAttributes)(nil)).Elem()
}

func (o ExtendedAttributesArrayOutput) ToExtendedAttributesArrayOutput() ExtendedAttributesArrayOutput {
	return o
}

func (o ExtendedAttributesArrayOutput) ToExtendedAttributesArrayOutputWithContext(ctx context.Context) ExtendedAttributesArrayOutput {
	return o
}

func (o ExtendedAttributesArrayOutput) Index(i pulumi.IntInput) ExtendedAttributesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExtendedAttributes {
		return vs[0].([]*ExtendedAttributes)[vs[1].(int)]
	}).(ExtendedAttributesOutput)
}

type ExtendedAttributesMapOutput struct{ *pulumi.OutputState }

func (ExtendedAttributesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtendedAttributes)(nil)).Elem()
}

func (o ExtendedAttributesMapOutput) ToExtendedAttributesMapOutput() ExtendedAttributesMapOutput {
	return o
}

func (o ExtendedAttributesMapOutput) ToExtendedAttributesMapOutputWithContext(ctx context.Context) ExtendedAttributesMapOutput {
	return o
}

func (o ExtendedAttributesMapOutput) MapIndex(k pulumi.StringInput) ExtendedAttributesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExtendedAttributes {
		return vs[0].(map[string]*ExtendedAttributes)[vs[1].(string)]
	}).(ExtendedAttributesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtendedAttributesInput)(nil)).Elem(), &ExtendedAttributes{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtendedAttributesArrayInput)(nil)).Elem(), ExtendedAttributesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtendedAttributesMapInput)(nil)).Elem(), ExtendedAttributesMap{})
	pulumi.RegisterOutputType(ExtendedAttributesOutput{})
	pulumi.RegisterOutputType(ExtendedAttributesArrayOutput{})
	pulumi.RegisterOutputType(ExtendedAttributesMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource to create BigQuery connections in dbt Cloud. Can be set to use OAuth for developers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// NOTE for customers using the LEGACY dbt_cloud provider:
//			_, err := dbtcloud.NewBigQueryConnection(ctx, "myConnection", &dbtcloud.BigQueryConnectionArgs{
//				ProjectId:               pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				Type:                    pulumi.String("bigquery"),
//				IsActive:                pulumi.Bool(true),
//				GcpProjectId:            pulumi.String("my-gcp-project-id"),
//				TimeoutSeconds:          pulumi.Int(100),
//				PrivateKeyId:            pulumi.String("my-private-key-id"),
//				PrivateKey:              pulumi.String("ABCDEFGHIJKL"),
//				ClientEmail:             pulumi.String("my_client_email"),
//				ClientId:                pulumi.String("my_client_di"),
//				AuthUri:                 pulumi.String("my_auth_uri"),
//				TokenUri:                pulumi.String("my_token_uri"),
//				AuthProviderX509CertUrl: pulumi.String("my_auth_provider_x509_cert_url"),
//				ClientX509CertUrl:       pulumi.String("my_client_x509_cert_url"),
//				Retries:                 pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			// it is also possible to set the connection to use OAuth by filling in `application_id` and `application_secret`
//			_, err = dbtcloud.NewBigQueryConnection(ctx, "myConnectionWithOauth", &dbtcloud.BigQueryConnectionArgs{
//				ProjectId:               pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				Type:                    pulumi.String("bigquery"),
//				IsActive:                pulumi.Bool(true),
//				GcpProjectId:            pulumi.String("my-gcp-project-id"),
//				TimeoutSeconds:          pulumi.Int(100),
//				PrivateKeyId:            pulumi.String("my-private-key-id"),
//				PrivateKey:              pulumi.String("ABCDEFGHIJKL"),
//				ClientEmail:             pulumi.String("my_client_email"),
//				ClientId:                pulumi.String("my_client_di"),
//				AuthUri:                 pulumi.String("my_auth_uri"),
//				TokenUri:                pulumi.String("my_token_uri"),
//				AuthProviderX509CertUrl: pulumi.String("my_auth_provider_x509_cert_url"),
//				ClientX509CertUrl:       pulumi.String("my_client_x509_cert_url"),
//				Retries:                 pulumi.Int(3),
//				ApplicationId:           pulumi.String("oauth_application_id"),
//				ApplicationSecret:       pulumi.String("oauth_secret_id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import dbtcloud:index/bigQueryConnection:BigQueryConnection my_connection "project_id:connection_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/bigQueryConnection:BigQueryConnection my_connection 12345:6789
// ```
type BigQueryConnection struct {
	pulumi.CustomResourceState

	// The Application ID for BQ OAuth
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// The Application Secret for BQ OAuth
	ApplicationSecret pulumi.StringPtrOutput `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringOutput `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri pulumi.StringOutput `pulumi:"authUri"`
	// Service Account email
	ClientEmail pulumi.StringOutput `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringOutput `pulumi:"clientX509CertUrl"`
	// Connection Identifier
	ConnectionId pulumi.IntOutput `pulumi:"connectionId"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrOutput `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrOutput `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrOutput `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId pulumi.StringOutput `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrOutput `pulumi:"gcsBucket"`
	// Whether the connection is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth pulumi.BoolOutput `pulumi:"isConfiguredForOauth"`
	// Location to create new Datasets in
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrOutput `pulumi:"maximumBytesBilled"`
	// Connection name
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId pulumi.StringOutput `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Number of retries for queries
	Retries pulumi.IntPtrOutput `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntOutput `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri pulumi.StringOutput `pulumi:"tokenUri"`
	// The type of connection
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewBigQueryConnection registers a new resource with the given unique name, arguments, and options.
func NewBigQueryConnection(ctx *pulumi.Context,
	name string, args *BigQueryConnectionArgs, opts ...pulumi.ResourceOption) (*BigQueryConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthProviderX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'AuthProviderX509CertUrl'")
	}
	if args.AuthUri == nil {
		return nil, errors.New("invalid value for required argument 'AuthUri'")
	}
	if args.ClientEmail == nil {
		return nil, errors.New("invalid value for required argument 'ClientEmail'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'ClientX509CertUrl'")
	}
	if args.GcpProjectId == nil {
		return nil, errors.New("invalid value for required argument 'GcpProjectId'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKeyId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKeyId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TimeoutSeconds == nil {
		return nil, errors.New("invalid value for required argument 'TimeoutSeconds'")
	}
	if args.TokenUri == nil {
		return nil, errors.New("invalid value for required argument 'TokenUri'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ApplicationId != nil {
		args.ApplicationId = pulumi.ToSecret(args.ApplicationId).(pulumi.StringPtrInput)
	}
	if args.ApplicationSecret != nil {
		args.ApplicationSecret = pulumi.ToSecret(args.ApplicationSecret).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"applicationId",
		"applicationSecret",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BigQueryConnection
	err := ctx.RegisterResource("dbtcloud:index/bigQueryConnection:BigQueryConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigQueryConnection gets an existing BigQueryConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigQueryConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigQueryConnectionState, opts ...pulumi.ResourceOption) (*BigQueryConnection, error) {
	var resource BigQueryConnection
	err := ctx.ReadResource("dbtcloud:index/bigQueryConnection:BigQueryConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigQueryConnection resources.
type bigQueryConnectionState struct {
	// The Application ID for BQ OAuth
	ApplicationId *string `pulumi:"applicationId"`
	// The Application Secret for BQ OAuth
	ApplicationSecret *string `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl *string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri *string `pulumi:"authUri"`
	// Service Account email
	ClientEmail *string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId *string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl *string `pulumi:"clientX509CertUrl"`
	// Connection Identifier
	ConnectionId *int `pulumi:"connectionId"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName *string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion *string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject *string `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId *string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket *string `pulumi:"gcsBucket"`
	// Whether the connection is active
	IsActive *bool `pulumi:"isActive"`
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth *bool `pulumi:"isConfiguredForOauth"`
	// Location to create new Datasets in
	Location *string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled *int `pulumi:"maximumBytesBilled"`
	// Connection name
	Name *string `pulumi:"name"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority *string `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey *string `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId *string `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId *int `pulumi:"projectId"`
	// Number of retries for queries
	Retries *int `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri *string `pulumi:"tokenUri"`
	// The type of connection
	Type *string `pulumi:"type"`
}

type BigQueryConnectionState struct {
	// The Application ID for BQ OAuth
	ApplicationId pulumi.StringPtrInput
	// The Application Secret for BQ OAuth
	ApplicationSecret pulumi.StringPtrInput
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringPtrInput
	// Auth URI for the Service Account
	AuthUri pulumi.StringPtrInput
	// Service Account email
	ClientEmail pulumi.StringPtrInput
	// Client ID of the Service Account
	ClientId pulumi.StringPtrInput
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringPtrInput
	// Connection Identifier
	ConnectionId pulumi.IntPtrInput
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrInput
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrInput
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrInput
	// GCP project ID
	GcpProjectId pulumi.StringPtrInput
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrInput
	// Whether the connection is active
	IsActive pulumi.BoolPtrInput
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth pulumi.BoolPtrInput
	// Location to create new Datasets in
	Location pulumi.StringPtrInput
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrInput
	// Private key of the Service Account
	PrivateKey pulumi.StringPtrInput
	// Private key ID of the Service Account
	PrivateKeyId pulumi.StringPtrInput
	// Project ID to create the connection in
	ProjectId pulumi.IntPtrInput
	// Number of retries for queries
	Retries pulumi.IntPtrInput
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntPtrInput
	// Token URI for the Service Account
	TokenUri pulumi.StringPtrInput
	// The type of connection
	Type pulumi.StringPtrInput
}

func (BigQueryConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*bigQueryConnectionState)(nil)).Elem()
}

type bigQueryConnectionArgs struct {
	// The Application ID for BQ OAuth
	ApplicationId *string `pulumi:"applicationId"`
	// The Application Secret for BQ OAuth
	ApplicationSecret *string `pulumi:"applicationSecret"`
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri string `pulumi:"authUri"`
	// Service Account email
	ClientEmail string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName *string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion *string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject *string `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket *string `pulumi:"gcsBucket"`
	// Whether the connection is active
	IsActive *bool `pulumi:"isActive"`
	// Location to create new Datasets in
	Location *string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled *int `pulumi:"maximumBytesBilled"`
	// Connection name
	Name *string `pulumi:"name"`
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority *string `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey string `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId int `pulumi:"projectId"`
	// Number of retries for queries
	Retries *int `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri string `pulumi:"tokenUri"`
	// The type of connection
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a BigQueryConnection resource.
type BigQueryConnectionArgs struct {
	// The Application ID for BQ OAuth
	ApplicationId pulumi.StringPtrInput
	// The Application Secret for BQ OAuth
	ApplicationSecret pulumi.StringPtrInput
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl pulumi.StringInput
	// Auth URI for the Service Account
	AuthUri pulumi.StringInput
	// Service Account email
	ClientEmail pulumi.StringInput
	// Client ID of the Service Account
	ClientId pulumi.StringInput
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl pulumi.StringInput
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName pulumi.StringPtrInput
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion pulumi.StringPtrInput
	// Project to bill for query execution
	ExecutionProject pulumi.StringPtrInput
	// GCP project ID
	GcpProjectId pulumi.StringInput
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket pulumi.StringPtrInput
	// Whether the connection is active
	IsActive pulumi.BoolPtrInput
	// Location to create new Datasets in
	Location pulumi.StringPtrInput
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled pulumi.IntPtrInput
	// Connection name
	Name pulumi.StringPtrInput
	// The priority with which to execute BigQuery queries (batch or interactive)
	Priority pulumi.StringPtrInput
	// Private key of the Service Account
	PrivateKey pulumi.StringInput
	// Private key ID of the Service Account
	PrivateKeyId pulumi.StringInput
	// Project ID to create the connection in
	ProjectId pulumi.IntInput
	// Number of retries for queries
	Retries pulumi.IntPtrInput
	// Timeout in seconds for queries
	TimeoutSeconds pulumi.IntInput
	// Token URI for the Service Account
	TokenUri pulumi.StringInput
	// The type of connection
	Type pulumi.StringInput
}

func (BigQueryConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bigQueryConnectionArgs)(nil)).Elem()
}

type BigQueryConnectionInput interface {
	pulumi.Input

	ToBigQueryConnectionOutput() BigQueryConnectionOutput
	ToBigQueryConnectionOutputWithContext(ctx context.Context) BigQueryConnectionOutput
}

func (*BigQueryConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryConnection)(nil)).Elem()
}

func (i *BigQueryConnection) ToBigQueryConnectionOutput() BigQueryConnectionOutput {
	return i.ToBigQueryConnectionOutputWithContext(context.Background())
}

func (i *BigQueryConnection) ToBigQueryConnectionOutputWithContext(ctx context.Context) BigQueryConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryConnectionOutput)
}

// BigQueryConnectionArrayInput is an input type that accepts BigQueryConnectionArray and BigQueryConnectionArrayOutput values.
// You can construct a concrete instance of `BigQueryConnectionArrayInput` via:
//
//	BigQueryConnectionArray{ BigQueryConnectionArgs{...} }
type BigQueryConnectionArrayInput interface {
	pulumi.Input

	ToBigQueryConnectionArrayOutput() BigQueryConnectionArrayOutput
	ToBigQueryConnectionArrayOutputWithContext(context.Context) BigQueryConnectionArrayOutput
}

type BigQueryConnectionArray []BigQueryConnectionInput

func (BigQueryConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigQueryConnection)(nil)).Elem()
}

func (i BigQueryConnectionArray) ToBigQueryConnectionArrayOutput() BigQueryConnectionArrayOutput {
	return i.ToBigQueryConnectionArrayOutputWithContext(context.Background())
}

func (i BigQueryConnectionArray) ToBigQueryConnectionArrayOutputWithContext(ctx context.Context) BigQueryConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryConnectionArrayOutput)
}

// BigQueryConnectionMapInput is an input type that accepts BigQueryConnectionMap and BigQueryConnectionMapOutput values.
// You can construct a concrete instance of `BigQueryConnectionMapInput` via:
//
//	BigQueryConnectionMap{ "key": BigQueryConnectionArgs{...} }
type BigQueryConnectionMapInput interface {
	pulumi.Input

	ToBigQueryConnectionMapOutput() BigQueryConnectionMapOutput
	ToBigQueryConnectionMapOutputWithContext(context.Context) BigQueryConnectionMapOutput
}

type BigQueryConnectionMap map[string]BigQueryConnectionInput

func (BigQueryConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigQueryConnection)(nil)).Elem()
}

func (i BigQueryConnectionMap) ToBigQueryConnectionMapOutput() BigQueryConnectionMapOutput {
	return i.ToBigQueryConnectionMapOutputWithContext(context.Background())
}

func (i BigQueryConnectionMap) ToBigQueryConnectionMapOutputWithContext(ctx context.Context) BigQueryConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryConnectionMapOutput)
}

type BigQueryConnectionOutput struct{ *pulumi.OutputState }

func (BigQueryConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryConnection)(nil)).Elem()
}

func (o BigQueryConnectionOutput) ToBigQueryConnectionOutput() BigQueryConnectionOutput {
	return o
}

func (o BigQueryConnectionOutput) ToBigQueryConnectionOutputWithContext(ctx context.Context) BigQueryConnectionOutput {
	return o
}

// The Application ID for BQ OAuth
func (o BigQueryConnectionOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// The Application Secret for BQ OAuth
func (o BigQueryConnectionOutput) ApplicationSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringPtrOutput { return v.ApplicationSecret }).(pulumi.StringPtrOutput)
}

// Auth Provider X509 Cert URL for the Service Account
func (o BigQueryConnectionOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Auth URI for the Service Account
func (o BigQueryConnectionOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.AuthUri }).(pulumi.StringOutput)
}

// Service Account email
func (o BigQueryConnectionOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client ID of the Service Account
func (o BigQueryConnectionOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Client X509 Cert URL for the Service Account
func (o BigQueryConnectionOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// Connection Identifier
func (o BigQueryConnectionOutput) ConnectionId() pulumi.IntOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.IntOutput { return v.ConnectionId }).(pulumi.IntOutput)
}

// Dataproc cluster name for PySpark workloads
func (o BigQueryConnectionOutput) DataprocClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringPtrOutput { return v.DataprocClusterName }).(pulumi.StringPtrOutput)
}

// Google Cloud region for PySpark workloads on Dataproc
func (o BigQueryConnectionOutput) DataprocRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringPtrOutput { return v.DataprocRegion }).(pulumi.StringPtrOutput)
}

// Project to bill for query execution
func (o BigQueryConnectionOutput) ExecutionProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringPtrOutput { return v.ExecutionProject }).(pulumi.StringPtrOutput)
}

// GCP project ID
func (o BigQueryConnectionOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.GcpProjectId }).(pulumi.StringOutput)
}

// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
func (o BigQueryConnectionOutput) GcsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringPtrOutput { return v.GcsBucket }).(pulumi.StringPtrOutput)
}

// Whether the connection is active
func (o BigQueryConnectionOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Whether the connection is configured for OAuth or not
func (o BigQueryConnectionOutput) IsConfiguredForOauth() pulumi.BoolOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.BoolOutput { return v.IsConfiguredForOauth }).(pulumi.BoolOutput)
}

// Location to create new Datasets in
func (o BigQueryConnectionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Max number of bytes that can be billed for a given BigQuery query
func (o BigQueryConnectionOutput) MaximumBytesBilled() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.IntPtrOutput { return v.MaximumBytesBilled }).(pulumi.IntPtrOutput)
}

// Connection name
func (o BigQueryConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The priority with which to execute BigQuery queries (batch or interactive)
func (o BigQueryConnectionOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// Private key of the Service Account
func (o BigQueryConnectionOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private key ID of the Service Account
func (o BigQueryConnectionOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Project ID to create the connection in
func (o BigQueryConnectionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Number of retries for queries
func (o BigQueryConnectionOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.IntPtrOutput { return v.Retries }).(pulumi.IntPtrOutput)
}

// Timeout in seconds for queries
func (o BigQueryConnectionOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.IntOutput { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

// Token URI for the Service Account
func (o BigQueryConnectionOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.TokenUri }).(pulumi.StringOutput)
}

// The type of connection
func (o BigQueryConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *BigQueryConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type BigQueryConnectionArrayOutput struct{ *pulumi.OutputState }

func (BigQueryConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BigQueryConnection)(nil)).Elem()
}

func (o BigQueryConnectionArrayOutput) ToBigQueryConnectionArrayOutput() BigQueryConnectionArrayOutput {
	return o
}

func (o BigQueryConnectionArrayOutput) ToBigQueryConnectionArrayOutputWithContext(ctx context.Context) BigQueryConnectionArrayOutput {
	return o
}

func (o BigQueryConnectionArrayOutput) Index(i pulumi.IntInput) BigQueryConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BigQueryConnection {
		return vs[0].([]*BigQueryConnection)[vs[1].(int)]
	}).(BigQueryConnectionOutput)
}

type BigQueryConnectionMapOutput struct{ *pulumi.OutputState }

func (BigQueryConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BigQueryConnection)(nil)).Elem()
}

func (o BigQueryConnectionMapOutput) ToBigQueryConnectionMapOutput() BigQueryConnectionMapOutput {
	return o
}

func (o BigQueryConnectionMapOutput) ToBigQueryConnectionMapOutputWithContext(ctx context.Context) BigQueryConnectionMapOutput {
	return o
}

func (o BigQueryConnectionMapOutput) MapIndex(k pulumi.StringInput) BigQueryConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BigQueryConnection {
		return vs[0].(map[string]*BigQueryConnection)[vs[1].(string)]
	}).(BigQueryConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryConnectionInput)(nil)).Elem(), &BigQueryConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryConnectionArrayInput)(nil)).Elem(), BigQueryConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryConnectionMapInput)(nil)).Elem(), BigQueryConnectionMap{})
	pulumi.RegisterOutputType(BigQueryConnectionOutput{})
	pulumi.RegisterOutputType(BigQueryConnectionArrayOutput{})
	pulumi.RegisterOutputType(BigQueryConnectionMapOutput{})
}

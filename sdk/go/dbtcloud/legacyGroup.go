// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LegacyGroup struct {
	pulumi.CustomResourceState

	// Whether or not to assign this group to users by default
	AssignByDefault  pulumi.BoolPtrOutput                  `pulumi:"assignByDefault"`
	GroupPermissions LegacyGroupGroupPermissionArrayOutput `pulumi:"groupPermissions"`
	// Whether the group is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Group name
	Name pulumi.StringOutput `pulumi:"name"`
	// SSO mapping group names for this group
	SsoMappingGroups pulumi.StringArrayOutput `pulumi:"ssoMappingGroups"`
}

// NewLegacyGroup registers a new resource with the given unique name, arguments, and options.
func NewLegacyGroup(ctx *pulumi.Context,
	name string, args *LegacyGroupArgs, opts ...pulumi.ResourceOption) (*LegacyGroup, error) {
	if args == nil {
		args = &LegacyGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyGroup
	err := ctx.RegisterResource("dbtcloud:index/legacyGroup:LegacyGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyGroup gets an existing LegacyGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyGroupState, opts ...pulumi.ResourceOption) (*LegacyGroup, error) {
	var resource LegacyGroup
	err := ctx.ReadResource("dbtcloud:index/legacyGroup:LegacyGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyGroup resources.
type legacyGroupState struct {
	// Whether or not to assign this group to users by default
	AssignByDefault  *bool                        `pulumi:"assignByDefault"`
	GroupPermissions []LegacyGroupGroupPermission `pulumi:"groupPermissions"`
	// Whether the group is active
	IsActive *bool `pulumi:"isActive"`
	// Group name
	Name *string `pulumi:"name"`
	// SSO mapping group names for this group
	SsoMappingGroups []string `pulumi:"ssoMappingGroups"`
}

type LegacyGroupState struct {
	// Whether or not to assign this group to users by default
	AssignByDefault  pulumi.BoolPtrInput
	GroupPermissions LegacyGroupGroupPermissionArrayInput
	// Whether the group is active
	IsActive pulumi.BoolPtrInput
	// Group name
	Name pulumi.StringPtrInput
	// SSO mapping group names for this group
	SsoMappingGroups pulumi.StringArrayInput
}

func (LegacyGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyGroupState)(nil)).Elem()
}

type legacyGroupArgs struct {
	// Whether or not to assign this group to users by default
	AssignByDefault  *bool                        `pulumi:"assignByDefault"`
	GroupPermissions []LegacyGroupGroupPermission `pulumi:"groupPermissions"`
	// Whether the group is active
	IsActive *bool `pulumi:"isActive"`
	// Group name
	Name *string `pulumi:"name"`
	// SSO mapping group names for this group
	SsoMappingGroups []string `pulumi:"ssoMappingGroups"`
}

// The set of arguments for constructing a LegacyGroup resource.
type LegacyGroupArgs struct {
	// Whether or not to assign this group to users by default
	AssignByDefault  pulumi.BoolPtrInput
	GroupPermissions LegacyGroupGroupPermissionArrayInput
	// Whether the group is active
	IsActive pulumi.BoolPtrInput
	// Group name
	Name pulumi.StringPtrInput
	// SSO mapping group names for this group
	SsoMappingGroups pulumi.StringArrayInput
}

func (LegacyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyGroupArgs)(nil)).Elem()
}

type LegacyGroupInput interface {
	pulumi.Input

	ToLegacyGroupOutput() LegacyGroupOutput
	ToLegacyGroupOutputWithContext(ctx context.Context) LegacyGroupOutput
}

func (*LegacyGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyGroup)(nil)).Elem()
}

func (i *LegacyGroup) ToLegacyGroupOutput() LegacyGroupOutput {
	return i.ToLegacyGroupOutputWithContext(context.Background())
}

func (i *LegacyGroup) ToLegacyGroupOutputWithContext(ctx context.Context) LegacyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyGroupOutput)
}

// LegacyGroupArrayInput is an input type that accepts LegacyGroupArray and LegacyGroupArrayOutput values.
// You can construct a concrete instance of `LegacyGroupArrayInput` via:
//
//	LegacyGroupArray{ LegacyGroupArgs{...} }
type LegacyGroupArrayInput interface {
	pulumi.Input

	ToLegacyGroupArrayOutput() LegacyGroupArrayOutput
	ToLegacyGroupArrayOutputWithContext(context.Context) LegacyGroupArrayOutput
}

type LegacyGroupArray []LegacyGroupInput

func (LegacyGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyGroup)(nil)).Elem()
}

func (i LegacyGroupArray) ToLegacyGroupArrayOutput() LegacyGroupArrayOutput {
	return i.ToLegacyGroupArrayOutputWithContext(context.Background())
}

func (i LegacyGroupArray) ToLegacyGroupArrayOutputWithContext(ctx context.Context) LegacyGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyGroupArrayOutput)
}

// LegacyGroupMapInput is an input type that accepts LegacyGroupMap and LegacyGroupMapOutput values.
// You can construct a concrete instance of `LegacyGroupMapInput` via:
//
//	LegacyGroupMap{ "key": LegacyGroupArgs{...} }
type LegacyGroupMapInput interface {
	pulumi.Input

	ToLegacyGroupMapOutput() LegacyGroupMapOutput
	ToLegacyGroupMapOutputWithContext(context.Context) LegacyGroupMapOutput
}

type LegacyGroupMap map[string]LegacyGroupInput

func (LegacyGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyGroup)(nil)).Elem()
}

func (i LegacyGroupMap) ToLegacyGroupMapOutput() LegacyGroupMapOutput {
	return i.ToLegacyGroupMapOutputWithContext(context.Background())
}

func (i LegacyGroupMap) ToLegacyGroupMapOutputWithContext(ctx context.Context) LegacyGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyGroupMapOutput)
}

type LegacyGroupOutput struct{ *pulumi.OutputState }

func (LegacyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyGroup)(nil)).Elem()
}

func (o LegacyGroupOutput) ToLegacyGroupOutput() LegacyGroupOutput {
	return o
}

func (o LegacyGroupOutput) ToLegacyGroupOutputWithContext(ctx context.Context) LegacyGroupOutput {
	return o
}

// Whether or not to assign this group to users by default
func (o LegacyGroupOutput) AssignByDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyGroup) pulumi.BoolPtrOutput { return v.AssignByDefault }).(pulumi.BoolPtrOutput)
}

func (o LegacyGroupOutput) GroupPermissions() LegacyGroupGroupPermissionArrayOutput {
	return o.ApplyT(func(v *LegacyGroup) LegacyGroupGroupPermissionArrayOutput { return v.GroupPermissions }).(LegacyGroupGroupPermissionArrayOutput)
}

// Whether the group is active
func (o LegacyGroupOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyGroup) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Group name
func (o LegacyGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SSO mapping group names for this group
func (o LegacyGroupOutput) SsoMappingGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LegacyGroup) pulumi.StringArrayOutput { return v.SsoMappingGroups }).(pulumi.StringArrayOutput)
}

type LegacyGroupArrayOutput struct{ *pulumi.OutputState }

func (LegacyGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyGroup)(nil)).Elem()
}

func (o LegacyGroupArrayOutput) ToLegacyGroupArrayOutput() LegacyGroupArrayOutput {
	return o
}

func (o LegacyGroupArrayOutput) ToLegacyGroupArrayOutputWithContext(ctx context.Context) LegacyGroupArrayOutput {
	return o
}

func (o LegacyGroupArrayOutput) Index(i pulumi.IntInput) LegacyGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyGroup {
		return vs[0].([]*LegacyGroup)[vs[1].(int)]
	}).(LegacyGroupOutput)
}

type LegacyGroupMapOutput struct{ *pulumi.OutputState }

func (LegacyGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyGroup)(nil)).Elem()
}

func (o LegacyGroupMapOutput) ToLegacyGroupMapOutput() LegacyGroupMapOutput {
	return o
}

func (o LegacyGroupMapOutput) ToLegacyGroupMapOutputWithContext(ctx context.Context) LegacyGroupMapOutput {
	return o
}

func (o LegacyGroupMapOutput) MapIndex(k pulumi.StringInput) LegacyGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyGroup {
		return vs[0].(map[string]*LegacyGroup)[vs[1].(string)]
	}).(LegacyGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyGroupInput)(nil)).Elem(), &LegacyGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyGroupArrayInput)(nil)).Elem(), LegacyGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyGroupMapInput)(nil)).Elem(), LegacyGroupMap{})
	pulumi.RegisterOutputType(LegacyGroupOutput{})
	pulumi.RegisterOutputType(LegacyGroupArrayOutput{})
	pulumi.RegisterOutputType(LegacyGroupMapOutput{})
}

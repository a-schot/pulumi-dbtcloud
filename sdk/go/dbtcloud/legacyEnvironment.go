// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LegacyEnvironment struct {
	pulumi.CustomResourceState

	// Credential ID to create the environment with. A credential is not required for development environments but is required
	// for deployment environments
	CredentialId pulumi.IntPtrOutput `pulumi:"credentialId"`
	// Which custom branch to use in this environment
	CustomBranch pulumi.StringPtrOutput `pulumi:"customBranch"`
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or
	// `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion pulumi.StringOutput `pulumi:"dbtVersion"`
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to
	// 'production'
	DeploymentType pulumi.StringPtrOutput `pulumi:"deploymentType"`
	// Environment ID within the project
	EnvironmentId pulumi.IntOutput `pulumi:"environmentId"`
	// ID of the extended attributes for the environment
	ExtendedAttributesId pulumi.IntPtrOutput `pulumi:"extendedAttributesId"`
	// Whether the environment is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Environment name
	Name pulumi.StringOutput `pulumi:"name"`
	// Project ID to create the environment in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type pulumi.StringOutput `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch pulumi.BoolPtrOutput `pulumi:"useCustomBranch"`
}

// NewLegacyEnvironment registers a new resource with the given unique name, arguments, and options.
func NewLegacyEnvironment(ctx *pulumi.Context,
	name string, args *LegacyEnvironmentArgs, opts ...pulumi.ResourceOption) (*LegacyEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbtVersion == nil {
		return nil, errors.New("invalid value for required argument 'DbtVersion'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyEnvironment
	err := ctx.RegisterResource("dbtcloud:index/legacyEnvironment:LegacyEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyEnvironment gets an existing LegacyEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyEnvironmentState, opts ...pulumi.ResourceOption) (*LegacyEnvironment, error) {
	var resource LegacyEnvironment
	err := ctx.ReadResource("dbtcloud:index/legacyEnvironment:LegacyEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyEnvironment resources.
type legacyEnvironmentState struct {
	// Credential ID to create the environment with. A credential is not required for development environments but is required
	// for deployment environments
	CredentialId *int `pulumi:"credentialId"`
	// Which custom branch to use in this environment
	CustomBranch *string `pulumi:"customBranch"`
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or
	// `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion *string `pulumi:"dbtVersion"`
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to
	// 'production'
	DeploymentType *string `pulumi:"deploymentType"`
	// Environment ID within the project
	EnvironmentId *int `pulumi:"environmentId"`
	// ID of the extended attributes for the environment
	ExtendedAttributesId *int `pulumi:"extendedAttributesId"`
	// Whether the environment is active
	IsActive *bool `pulumi:"isActive"`
	// Environment name
	Name *string `pulumi:"name"`
	// Project ID to create the environment in
	ProjectId *int `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type *string `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch *bool `pulumi:"useCustomBranch"`
}

type LegacyEnvironmentState struct {
	// Credential ID to create the environment with. A credential is not required for development environments but is required
	// for deployment environments
	CredentialId pulumi.IntPtrInput
	// Which custom branch to use in this environment
	CustomBranch pulumi.StringPtrInput
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or
	// `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion pulumi.StringPtrInput
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to
	// 'production'
	DeploymentType pulumi.StringPtrInput
	// Environment ID within the project
	EnvironmentId pulumi.IntPtrInput
	// ID of the extended attributes for the environment
	ExtendedAttributesId pulumi.IntPtrInput
	// Whether the environment is active
	IsActive pulumi.BoolPtrInput
	// Environment name
	Name pulumi.StringPtrInput
	// Project ID to create the environment in
	ProjectId pulumi.IntPtrInput
	// The type of environment (must be either development or deployment)
	Type pulumi.StringPtrInput
	// Whether to use a custom git branch in this environment
	UseCustomBranch pulumi.BoolPtrInput
}

func (LegacyEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyEnvironmentState)(nil)).Elem()
}

type legacyEnvironmentArgs struct {
	// Credential ID to create the environment with. A credential is not required for development environments but is required
	// for deployment environments
	CredentialId *int `pulumi:"credentialId"`
	// Which custom branch to use in this environment
	CustomBranch *string `pulumi:"customBranch"`
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or
	// `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion string `pulumi:"dbtVersion"`
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to
	// 'production'
	DeploymentType *string `pulumi:"deploymentType"`
	// ID of the extended attributes for the environment
	ExtendedAttributesId *int `pulumi:"extendedAttributesId"`
	// Whether the environment is active
	IsActive *bool `pulumi:"isActive"`
	// Environment name
	Name *string `pulumi:"name"`
	// Project ID to create the environment in
	ProjectId int `pulumi:"projectId"`
	// The type of environment (must be either development or deployment)
	Type string `pulumi:"type"`
	// Whether to use a custom git branch in this environment
	UseCustomBranch *bool `pulumi:"useCustomBranch"`
}

// The set of arguments for constructing a LegacyEnvironment resource.
type LegacyEnvironmentArgs struct {
	// Credential ID to create the environment with. A credential is not required for development environments but is required
	// for deployment environments
	CredentialId pulumi.IntPtrInput
	// Which custom branch to use in this environment
	CustomBranch pulumi.StringPtrInput
	// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or
	// `major.minor.0-pre`, e.g. `1.5.0-latest`
	DbtVersion pulumi.StringInput
	// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to
	// 'production'
	DeploymentType pulumi.StringPtrInput
	// ID of the extended attributes for the environment
	ExtendedAttributesId pulumi.IntPtrInput
	// Whether the environment is active
	IsActive pulumi.BoolPtrInput
	// Environment name
	Name pulumi.StringPtrInput
	// Project ID to create the environment in
	ProjectId pulumi.IntInput
	// The type of environment (must be either development or deployment)
	Type pulumi.StringInput
	// Whether to use a custom git branch in this environment
	UseCustomBranch pulumi.BoolPtrInput
}

func (LegacyEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyEnvironmentArgs)(nil)).Elem()
}

type LegacyEnvironmentInput interface {
	pulumi.Input

	ToLegacyEnvironmentOutput() LegacyEnvironmentOutput
	ToLegacyEnvironmentOutputWithContext(ctx context.Context) LegacyEnvironmentOutput
}

func (*LegacyEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyEnvironment)(nil)).Elem()
}

func (i *LegacyEnvironment) ToLegacyEnvironmentOutput() LegacyEnvironmentOutput {
	return i.ToLegacyEnvironmentOutputWithContext(context.Background())
}

func (i *LegacyEnvironment) ToLegacyEnvironmentOutputWithContext(ctx context.Context) LegacyEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyEnvironmentOutput)
}

// LegacyEnvironmentArrayInput is an input type that accepts LegacyEnvironmentArray and LegacyEnvironmentArrayOutput values.
// You can construct a concrete instance of `LegacyEnvironmentArrayInput` via:
//
//	LegacyEnvironmentArray{ LegacyEnvironmentArgs{...} }
type LegacyEnvironmentArrayInput interface {
	pulumi.Input

	ToLegacyEnvironmentArrayOutput() LegacyEnvironmentArrayOutput
	ToLegacyEnvironmentArrayOutputWithContext(context.Context) LegacyEnvironmentArrayOutput
}

type LegacyEnvironmentArray []LegacyEnvironmentInput

func (LegacyEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyEnvironment)(nil)).Elem()
}

func (i LegacyEnvironmentArray) ToLegacyEnvironmentArrayOutput() LegacyEnvironmentArrayOutput {
	return i.ToLegacyEnvironmentArrayOutputWithContext(context.Background())
}

func (i LegacyEnvironmentArray) ToLegacyEnvironmentArrayOutputWithContext(ctx context.Context) LegacyEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyEnvironmentArrayOutput)
}

// LegacyEnvironmentMapInput is an input type that accepts LegacyEnvironmentMap and LegacyEnvironmentMapOutput values.
// You can construct a concrete instance of `LegacyEnvironmentMapInput` via:
//
//	LegacyEnvironmentMap{ "key": LegacyEnvironmentArgs{...} }
type LegacyEnvironmentMapInput interface {
	pulumi.Input

	ToLegacyEnvironmentMapOutput() LegacyEnvironmentMapOutput
	ToLegacyEnvironmentMapOutputWithContext(context.Context) LegacyEnvironmentMapOutput
}

type LegacyEnvironmentMap map[string]LegacyEnvironmentInput

func (LegacyEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyEnvironment)(nil)).Elem()
}

func (i LegacyEnvironmentMap) ToLegacyEnvironmentMapOutput() LegacyEnvironmentMapOutput {
	return i.ToLegacyEnvironmentMapOutputWithContext(context.Background())
}

func (i LegacyEnvironmentMap) ToLegacyEnvironmentMapOutputWithContext(ctx context.Context) LegacyEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyEnvironmentMapOutput)
}

type LegacyEnvironmentOutput struct{ *pulumi.OutputState }

func (LegacyEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyEnvironment)(nil)).Elem()
}

func (o LegacyEnvironmentOutput) ToLegacyEnvironmentOutput() LegacyEnvironmentOutput {
	return o
}

func (o LegacyEnvironmentOutput) ToLegacyEnvironmentOutputWithContext(ctx context.Context) LegacyEnvironmentOutput {
	return o
}

// Credential ID to create the environment with. A credential is not required for development environments but is required
// for deployment environments
func (o LegacyEnvironmentOutput) CredentialId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.IntPtrOutput { return v.CredentialId }).(pulumi.IntPtrOutput)
}

// Which custom branch to use in this environment
func (o LegacyEnvironmentOutput) CustomBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.StringPtrOutput { return v.CustomBranch }).(pulumi.StringPtrOutput)
}

// Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or
// `major.minor.0-pre`, e.g. `1.5.0-latest`
func (o LegacyEnvironmentOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.StringOutput { return v.DbtVersion }).(pulumi.StringOutput)
}

// The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to
// 'production'
func (o LegacyEnvironmentOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.StringPtrOutput { return v.DeploymentType }).(pulumi.StringPtrOutput)
}

// Environment ID within the project
func (o LegacyEnvironmentOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.IntOutput { return v.EnvironmentId }).(pulumi.IntOutput)
}

// ID of the extended attributes for the environment
func (o LegacyEnvironmentOutput) ExtendedAttributesId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.IntPtrOutput { return v.ExtendedAttributesId }).(pulumi.IntPtrOutput)
}

// Whether the environment is active
func (o LegacyEnvironmentOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Environment name
func (o LegacyEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project ID to create the environment in
func (o LegacyEnvironmentOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The type of environment (must be either development or deployment)
func (o LegacyEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Whether to use a custom git branch in this environment
func (o LegacyEnvironmentOutput) UseCustomBranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyEnvironment) pulumi.BoolPtrOutput { return v.UseCustomBranch }).(pulumi.BoolPtrOutput)
}

type LegacyEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (LegacyEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyEnvironment)(nil)).Elem()
}

func (o LegacyEnvironmentArrayOutput) ToLegacyEnvironmentArrayOutput() LegacyEnvironmentArrayOutput {
	return o
}

func (o LegacyEnvironmentArrayOutput) ToLegacyEnvironmentArrayOutputWithContext(ctx context.Context) LegacyEnvironmentArrayOutput {
	return o
}

func (o LegacyEnvironmentArrayOutput) Index(i pulumi.IntInput) LegacyEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyEnvironment {
		return vs[0].([]*LegacyEnvironment)[vs[1].(int)]
	}).(LegacyEnvironmentOutput)
}

type LegacyEnvironmentMapOutput struct{ *pulumi.OutputState }

func (LegacyEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyEnvironment)(nil)).Elem()
}

func (o LegacyEnvironmentMapOutput) ToLegacyEnvironmentMapOutput() LegacyEnvironmentMapOutput {
	return o
}

func (o LegacyEnvironmentMapOutput) ToLegacyEnvironmentMapOutputWithContext(ctx context.Context) LegacyEnvironmentMapOutput {
	return o
}

func (o LegacyEnvironmentMapOutput) MapIndex(k pulumi.StringInput) LegacyEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyEnvironment {
		return vs[0].(map[string]*LegacyEnvironment)[vs[1].(string)]
	}).(LegacyEnvironmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyEnvironmentInput)(nil)).Elem(), &LegacyEnvironment{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyEnvironmentArrayInput)(nil)).Elem(), LegacyEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyEnvironmentMapInput)(nil)).Elem(), LegacyEnvironmentMap{})
	pulumi.RegisterOutputType(LegacyEnvironmentOutput{})
	pulumi.RegisterOutputType(LegacyEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(LegacyEnvironmentMapOutput{})
}

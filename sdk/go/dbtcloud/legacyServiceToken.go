// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource
type LegacyServiceToken struct {
	pulumi.CustomResourceState

	// Service token name
	Name pulumi.StringOutput `pulumi:"name"`
	// Permissions set for the service token
	ServiceTokenPermissions LegacyServiceTokenServiceTokenPermissionArrayOutput `pulumi:"serviceTokenPermissions"`
	// Service token state (1 is active, 2 is inactive)
	State pulumi.IntPtrOutput `pulumi:"state"`
	// Service token secret value (only accessible on creation))
	TokenString pulumi.StringOutput `pulumi:"tokenString"`
	// Service token UID (part of the token)
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewLegacyServiceToken registers a new resource with the given unique name, arguments, and options.
func NewLegacyServiceToken(ctx *pulumi.Context,
	name string, args *LegacyServiceTokenArgs, opts ...pulumi.ResourceOption) (*LegacyServiceToken, error) {
	if args == nil {
		args = &LegacyServiceTokenArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tokenString",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyServiceToken
	err := ctx.RegisterResource("dbtcloud:index/legacyServiceToken:LegacyServiceToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyServiceToken gets an existing LegacyServiceToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyServiceToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyServiceTokenState, opts ...pulumi.ResourceOption) (*LegacyServiceToken, error) {
	var resource LegacyServiceToken
	err := ctx.ReadResource("dbtcloud:index/legacyServiceToken:LegacyServiceToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyServiceToken resources.
type legacyServiceTokenState struct {
	// Service token name
	Name *string `pulumi:"name"`
	// Permissions set for the service token
	ServiceTokenPermissions []LegacyServiceTokenServiceTokenPermission `pulumi:"serviceTokenPermissions"`
	// Service token state (1 is active, 2 is inactive)
	State *int `pulumi:"state"`
	// Service token secret value (only accessible on creation))
	TokenString *string `pulumi:"tokenString"`
	// Service token UID (part of the token)
	Uid *string `pulumi:"uid"`
}

type LegacyServiceTokenState struct {
	// Service token name
	Name pulumi.StringPtrInput
	// Permissions set for the service token
	ServiceTokenPermissions LegacyServiceTokenServiceTokenPermissionArrayInput
	// Service token state (1 is active, 2 is inactive)
	State pulumi.IntPtrInput
	// Service token secret value (only accessible on creation))
	TokenString pulumi.StringPtrInput
	// Service token UID (part of the token)
	Uid pulumi.StringPtrInput
}

func (LegacyServiceTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyServiceTokenState)(nil)).Elem()
}

type legacyServiceTokenArgs struct {
	// Service token name
	Name *string `pulumi:"name"`
	// Permissions set for the service token
	ServiceTokenPermissions []LegacyServiceTokenServiceTokenPermission `pulumi:"serviceTokenPermissions"`
	// Service token state (1 is active, 2 is inactive)
	State *int `pulumi:"state"`
}

// The set of arguments for constructing a LegacyServiceToken resource.
type LegacyServiceTokenArgs struct {
	// Service token name
	Name pulumi.StringPtrInput
	// Permissions set for the service token
	ServiceTokenPermissions LegacyServiceTokenServiceTokenPermissionArrayInput
	// Service token state (1 is active, 2 is inactive)
	State pulumi.IntPtrInput
}

func (LegacyServiceTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyServiceTokenArgs)(nil)).Elem()
}

type LegacyServiceTokenInput interface {
	pulumi.Input

	ToLegacyServiceTokenOutput() LegacyServiceTokenOutput
	ToLegacyServiceTokenOutputWithContext(ctx context.Context) LegacyServiceTokenOutput
}

func (*LegacyServiceToken) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyServiceToken)(nil)).Elem()
}

func (i *LegacyServiceToken) ToLegacyServiceTokenOutput() LegacyServiceTokenOutput {
	return i.ToLegacyServiceTokenOutputWithContext(context.Background())
}

func (i *LegacyServiceToken) ToLegacyServiceTokenOutputWithContext(ctx context.Context) LegacyServiceTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyServiceTokenOutput)
}

// LegacyServiceTokenArrayInput is an input type that accepts LegacyServiceTokenArray and LegacyServiceTokenArrayOutput values.
// You can construct a concrete instance of `LegacyServiceTokenArrayInput` via:
//
//	LegacyServiceTokenArray{ LegacyServiceTokenArgs{...} }
type LegacyServiceTokenArrayInput interface {
	pulumi.Input

	ToLegacyServiceTokenArrayOutput() LegacyServiceTokenArrayOutput
	ToLegacyServiceTokenArrayOutputWithContext(context.Context) LegacyServiceTokenArrayOutput
}

type LegacyServiceTokenArray []LegacyServiceTokenInput

func (LegacyServiceTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyServiceToken)(nil)).Elem()
}

func (i LegacyServiceTokenArray) ToLegacyServiceTokenArrayOutput() LegacyServiceTokenArrayOutput {
	return i.ToLegacyServiceTokenArrayOutputWithContext(context.Background())
}

func (i LegacyServiceTokenArray) ToLegacyServiceTokenArrayOutputWithContext(ctx context.Context) LegacyServiceTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyServiceTokenArrayOutput)
}

// LegacyServiceTokenMapInput is an input type that accepts LegacyServiceTokenMap and LegacyServiceTokenMapOutput values.
// You can construct a concrete instance of `LegacyServiceTokenMapInput` via:
//
//	LegacyServiceTokenMap{ "key": LegacyServiceTokenArgs{...} }
type LegacyServiceTokenMapInput interface {
	pulumi.Input

	ToLegacyServiceTokenMapOutput() LegacyServiceTokenMapOutput
	ToLegacyServiceTokenMapOutputWithContext(context.Context) LegacyServiceTokenMapOutput
}

type LegacyServiceTokenMap map[string]LegacyServiceTokenInput

func (LegacyServiceTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyServiceToken)(nil)).Elem()
}

func (i LegacyServiceTokenMap) ToLegacyServiceTokenMapOutput() LegacyServiceTokenMapOutput {
	return i.ToLegacyServiceTokenMapOutputWithContext(context.Background())
}

func (i LegacyServiceTokenMap) ToLegacyServiceTokenMapOutputWithContext(ctx context.Context) LegacyServiceTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyServiceTokenMapOutput)
}

type LegacyServiceTokenOutput struct{ *pulumi.OutputState }

func (LegacyServiceTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyServiceToken)(nil)).Elem()
}

func (o LegacyServiceTokenOutput) ToLegacyServiceTokenOutput() LegacyServiceTokenOutput {
	return o
}

func (o LegacyServiceTokenOutput) ToLegacyServiceTokenOutputWithContext(ctx context.Context) LegacyServiceTokenOutput {
	return o
}

// Service token name
func (o LegacyServiceTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyServiceToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Permissions set for the service token
func (o LegacyServiceTokenOutput) ServiceTokenPermissions() LegacyServiceTokenServiceTokenPermissionArrayOutput {
	return o.ApplyT(func(v *LegacyServiceToken) LegacyServiceTokenServiceTokenPermissionArrayOutput {
		return v.ServiceTokenPermissions
	}).(LegacyServiceTokenServiceTokenPermissionArrayOutput)
}

// Service token state (1 is active, 2 is inactive)
func (o LegacyServiceTokenOutput) State() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyServiceToken) pulumi.IntPtrOutput { return v.State }).(pulumi.IntPtrOutput)
}

// Service token secret value (only accessible on creation))
func (o LegacyServiceTokenOutput) TokenString() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyServiceToken) pulumi.StringOutput { return v.TokenString }).(pulumi.StringOutput)
}

// Service token UID (part of the token)
func (o LegacyServiceTokenOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyServiceToken) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type LegacyServiceTokenArrayOutput struct{ *pulumi.OutputState }

func (LegacyServiceTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyServiceToken)(nil)).Elem()
}

func (o LegacyServiceTokenArrayOutput) ToLegacyServiceTokenArrayOutput() LegacyServiceTokenArrayOutput {
	return o
}

func (o LegacyServiceTokenArrayOutput) ToLegacyServiceTokenArrayOutputWithContext(ctx context.Context) LegacyServiceTokenArrayOutput {
	return o
}

func (o LegacyServiceTokenArrayOutput) Index(i pulumi.IntInput) LegacyServiceTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyServiceToken {
		return vs[0].([]*LegacyServiceToken)[vs[1].(int)]
	}).(LegacyServiceTokenOutput)
}

type LegacyServiceTokenMapOutput struct{ *pulumi.OutputState }

func (LegacyServiceTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyServiceToken)(nil)).Elem()
}

func (o LegacyServiceTokenMapOutput) ToLegacyServiceTokenMapOutput() LegacyServiceTokenMapOutput {
	return o
}

func (o LegacyServiceTokenMapOutput) ToLegacyServiceTokenMapOutputWithContext(ctx context.Context) LegacyServiceTokenMapOutput {
	return o
}

func (o LegacyServiceTokenMapOutput) MapIndex(k pulumi.StringInput) LegacyServiceTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyServiceToken {
		return vs[0].(map[string]*LegacyServiceToken)[vs[1].(string)]
	}).(LegacyServiceTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyServiceTokenInput)(nil)).Elem(), &LegacyServiceToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyServiceTokenArrayInput)(nil)).Elem(), LegacyServiceTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyServiceTokenMapInput)(nil)).Elem(), LegacyServiceTokenMap{})
	pulumi.RegisterOutputType(LegacyServiceTokenOutput{})
	pulumi.RegisterOutputType(LegacyServiceTokenArrayOutput{})
	pulumi.RegisterOutputType(LegacyServiceTokenMapOutput{})
}

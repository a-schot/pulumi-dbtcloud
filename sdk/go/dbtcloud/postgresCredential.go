// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// NOTE for customers using the LEGACY dbt_cloud provider:
//			_, err := dbtcloud.NewPostgresCredential(ctx, "postgresProdCredential", &dbtcloud.PostgresCredentialArgs{
//				IsActive:      pulumi.Bool(true),
//				ProjectId:     pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				Type:          pulumi.String("postgres"),
//				DefaultSchema: pulumi.String("my_schema"),
//				Username:      pulumi.String("my_username"),
//				Password:      pulumi.String("my_password"),
//				NumThreads:    pulumi.Int(16),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import using a project ID and credential ID found in the URL or via the API.
//
// ```sh
// $ pulumi import dbtcloud:index/postgresCredential:PostgresCredential my_credential "project_id:credential_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/postgresCredential:PostgresCredential my_credential 12345:6789
// ```
type PostgresCredential struct {
	pulumi.CustomResourceState

	// The system Postgres/Redshift/AlloyDB credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// Default schema name
	DefaultSchema pulumi.StringOutput `pulumi:"defaultSchema"`
	// Whether the Postgres/Redshift/AlloyDB credential is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Number of threads to use
	NumThreads pulumi.IntPtrOutput `pulumi:"numThreads"`
	// Password for Postgres/Redshift/AlloyDB
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Project ID to create the Postgres/Redshift/AlloyDB credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Default schema name
	TargetName pulumi.StringPtrOutput `pulumi:"targetName"`
	// Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
	Type pulumi.StringOutput `pulumi:"type"`
	// Username for Postgres/Redshift/AlloyDB
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewPostgresCredential registers a new resource with the given unique name, arguments, and options.
func NewPostgresCredential(ctx *pulumi.Context,
	name string, args *PostgresCredentialArgs, opts ...pulumi.ResourceOption) (*PostgresCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultSchema == nil {
		return nil, errors.New("invalid value for required argument 'DefaultSchema'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresCredential
	err := ctx.RegisterResource("dbtcloud:index/postgresCredential:PostgresCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresCredential gets an existing PostgresCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresCredentialState, opts ...pulumi.ResourceOption) (*PostgresCredential, error) {
	var resource PostgresCredential
	err := ctx.ReadResource("dbtcloud:index/postgresCredential:PostgresCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresCredential resources.
type postgresCredentialState struct {
	// The system Postgres/Redshift/AlloyDB credential ID
	CredentialId *int `pulumi:"credentialId"`
	// Default schema name
	DefaultSchema *string `pulumi:"defaultSchema"`
	// Whether the Postgres/Redshift/AlloyDB credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads *int `pulumi:"numThreads"`
	// Password for Postgres/Redshift/AlloyDB
	Password *string `pulumi:"password"`
	// Project ID to create the Postgres/Redshift/AlloyDB credential in
	ProjectId *int `pulumi:"projectId"`
	// Default schema name
	TargetName *string `pulumi:"targetName"`
	// Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
	Type *string `pulumi:"type"`
	// Username for Postgres/Redshift/AlloyDB
	Username *string `pulumi:"username"`
}

type PostgresCredentialState struct {
	// The system Postgres/Redshift/AlloyDB credential ID
	CredentialId pulumi.IntPtrInput
	// Default schema name
	DefaultSchema pulumi.StringPtrInput
	// Whether the Postgres/Redshift/AlloyDB credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntPtrInput
	// Password for Postgres/Redshift/AlloyDB
	Password pulumi.StringPtrInput
	// Project ID to create the Postgres/Redshift/AlloyDB credential in
	ProjectId pulumi.IntPtrInput
	// Default schema name
	TargetName pulumi.StringPtrInput
	// Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
	Type pulumi.StringPtrInput
	// Username for Postgres/Redshift/AlloyDB
	Username pulumi.StringPtrInput
}

func (PostgresCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresCredentialState)(nil)).Elem()
}

type postgresCredentialArgs struct {
	// Default schema name
	DefaultSchema string `pulumi:"defaultSchema"`
	// Whether the Postgres/Redshift/AlloyDB credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads *int `pulumi:"numThreads"`
	// Password for Postgres/Redshift/AlloyDB
	Password *string `pulumi:"password"`
	// Project ID to create the Postgres/Redshift/AlloyDB credential in
	ProjectId int `pulumi:"projectId"`
	// Default schema name
	TargetName *string `pulumi:"targetName"`
	// Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
	Type string `pulumi:"type"`
	// Username for Postgres/Redshift/AlloyDB
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a PostgresCredential resource.
type PostgresCredentialArgs struct {
	// Default schema name
	DefaultSchema pulumi.StringInput
	// Whether the Postgres/Redshift/AlloyDB credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntPtrInput
	// Password for Postgres/Redshift/AlloyDB
	Password pulumi.StringPtrInput
	// Project ID to create the Postgres/Redshift/AlloyDB credential in
	ProjectId pulumi.IntInput
	// Default schema name
	TargetName pulumi.StringPtrInput
	// Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
	Type pulumi.StringInput
	// Username for Postgres/Redshift/AlloyDB
	Username pulumi.StringInput
}

func (PostgresCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresCredentialArgs)(nil)).Elem()
}

type PostgresCredentialInput interface {
	pulumi.Input

	ToPostgresCredentialOutput() PostgresCredentialOutput
	ToPostgresCredentialOutputWithContext(ctx context.Context) PostgresCredentialOutput
}

func (*PostgresCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresCredential)(nil)).Elem()
}

func (i *PostgresCredential) ToPostgresCredentialOutput() PostgresCredentialOutput {
	return i.ToPostgresCredentialOutputWithContext(context.Background())
}

func (i *PostgresCredential) ToPostgresCredentialOutputWithContext(ctx context.Context) PostgresCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresCredentialOutput)
}

// PostgresCredentialArrayInput is an input type that accepts PostgresCredentialArray and PostgresCredentialArrayOutput values.
// You can construct a concrete instance of `PostgresCredentialArrayInput` via:
//
//	PostgresCredentialArray{ PostgresCredentialArgs{...} }
type PostgresCredentialArrayInput interface {
	pulumi.Input

	ToPostgresCredentialArrayOutput() PostgresCredentialArrayOutput
	ToPostgresCredentialArrayOutputWithContext(context.Context) PostgresCredentialArrayOutput
}

type PostgresCredentialArray []PostgresCredentialInput

func (PostgresCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresCredential)(nil)).Elem()
}

func (i PostgresCredentialArray) ToPostgresCredentialArrayOutput() PostgresCredentialArrayOutput {
	return i.ToPostgresCredentialArrayOutputWithContext(context.Background())
}

func (i PostgresCredentialArray) ToPostgresCredentialArrayOutputWithContext(ctx context.Context) PostgresCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresCredentialArrayOutput)
}

// PostgresCredentialMapInput is an input type that accepts PostgresCredentialMap and PostgresCredentialMapOutput values.
// You can construct a concrete instance of `PostgresCredentialMapInput` via:
//
//	PostgresCredentialMap{ "key": PostgresCredentialArgs{...} }
type PostgresCredentialMapInput interface {
	pulumi.Input

	ToPostgresCredentialMapOutput() PostgresCredentialMapOutput
	ToPostgresCredentialMapOutputWithContext(context.Context) PostgresCredentialMapOutput
}

type PostgresCredentialMap map[string]PostgresCredentialInput

func (PostgresCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresCredential)(nil)).Elem()
}

func (i PostgresCredentialMap) ToPostgresCredentialMapOutput() PostgresCredentialMapOutput {
	return i.ToPostgresCredentialMapOutputWithContext(context.Background())
}

func (i PostgresCredentialMap) ToPostgresCredentialMapOutputWithContext(ctx context.Context) PostgresCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresCredentialMapOutput)
}

type PostgresCredentialOutput struct{ *pulumi.OutputState }

func (PostgresCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresCredential)(nil)).Elem()
}

func (o PostgresCredentialOutput) ToPostgresCredentialOutput() PostgresCredentialOutput {
	return o
}

func (o PostgresCredentialOutput) ToPostgresCredentialOutputWithContext(ctx context.Context) PostgresCredentialOutput {
	return o
}

// The system Postgres/Redshift/AlloyDB credential ID
func (o PostgresCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *PostgresCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// Default schema name
func (o PostgresCredentialOutput) DefaultSchema() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresCredential) pulumi.StringOutput { return v.DefaultSchema }).(pulumi.StringOutput)
}

// Whether the Postgres/Redshift/AlloyDB credential is active
func (o PostgresCredentialOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresCredential) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Number of threads to use
func (o PostgresCredentialOutput) NumThreads() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresCredential) pulumi.IntPtrOutput { return v.NumThreads }).(pulumi.IntPtrOutput)
}

// Password for Postgres/Redshift/AlloyDB
func (o PostgresCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresCredential) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Project ID to create the Postgres/Redshift/AlloyDB credential in
func (o PostgresCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *PostgresCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Default schema name
func (o PostgresCredentialOutput) TargetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresCredential) pulumi.StringPtrOutput { return v.TargetName }).(pulumi.StringPtrOutput)
}

// Type of connection. One of (postgres/redshift). Use postgres for alloydb connections
func (o PostgresCredentialOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresCredential) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Username for Postgres/Redshift/AlloyDB
func (o PostgresCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type PostgresCredentialArrayOutput struct{ *pulumi.OutputState }

func (PostgresCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresCredential)(nil)).Elem()
}

func (o PostgresCredentialArrayOutput) ToPostgresCredentialArrayOutput() PostgresCredentialArrayOutput {
	return o
}

func (o PostgresCredentialArrayOutput) ToPostgresCredentialArrayOutputWithContext(ctx context.Context) PostgresCredentialArrayOutput {
	return o
}

func (o PostgresCredentialArrayOutput) Index(i pulumi.IntInput) PostgresCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresCredential {
		return vs[0].([]*PostgresCredential)[vs[1].(int)]
	}).(PostgresCredentialOutput)
}

type PostgresCredentialMapOutput struct{ *pulumi.OutputState }

func (PostgresCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresCredential)(nil)).Elem()
}

func (o PostgresCredentialMapOutput) ToPostgresCredentialMapOutput() PostgresCredentialMapOutput {
	return o
}

func (o PostgresCredentialMapOutput) ToPostgresCredentialMapOutputWithContext(ctx context.Context) PostgresCredentialMapOutput {
	return o
}

func (o PostgresCredentialMapOutput) MapIndex(k pulumi.StringInput) PostgresCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresCredential {
		return vs[0].(map[string]*PostgresCredential)[vs[1].(string)]
	}).(PostgresCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresCredentialInput)(nil)).Elem(), &PostgresCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresCredentialArrayInput)(nil)).Elem(), PostgresCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresCredentialMapInput)(nil)).Elem(), PostgresCredentialMap{})
	pulumi.RegisterOutputType(PostgresCredentialOutput{})
	pulumi.RegisterOutputType(PostgresCredentialArrayOutput{})
	pulumi.RegisterOutputType(PostgresCredentialMapOutput{})
}

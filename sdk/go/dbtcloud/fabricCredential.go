// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Import using a project ID and credential ID found in the URL or via the API.
//
// ```sh
//
//	$ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential "project_id:credential_id"
//
// ```
//
// ```sh
//
//	$ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential 12345:6789
//
// ```
type FabricCredential struct {
	pulumi.CustomResourceState

	// Fabric adapter ID for the credential
	AdapterId pulumi.IntOutput `pulumi:"adapterId"`
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// The system Fabric credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Project ID to create the Fabric credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// The schema where to create the dbt models
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization pulumi.StringPtrOutput `pulumi:"schemaAuthorization"`
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId pulumi.StringPtrOutput `pulumi:"tenantId"`
	// The username of the Fabric account to connect to. Only used when connection with AD user/pass
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewFabricCredential registers a new resource with the given unique name, arguments, and options.
func NewFabricCredential(ctx *pulumi.Context,
	name string, args *FabricCredentialArgs, opts ...pulumi.ResourceOption) (*FabricCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdapterId == nil {
		return nil, errors.New("invalid value for required argument 'AdapterId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FabricCredential
	err := ctx.RegisterResource("dbtcloud:index/fabricCredential:FabricCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFabricCredential gets an existing FabricCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFabricCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FabricCredentialState, opts ...pulumi.ResourceOption) (*FabricCredential, error) {
	var resource FabricCredential
	err := ctx.ReadResource("dbtcloud:index/fabricCredential:FabricCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FabricCredential resources.
type fabricCredentialState struct {
	// Fabric adapter ID for the credential
	AdapterId *int `pulumi:"adapterId"`
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId *string `pulumi:"clientId"`
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret *string `pulumi:"clientSecret"`
	// The system Fabric credential ID
	CredentialId *int `pulumi:"credentialId"`
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password *string `pulumi:"password"`
	// Project ID to create the Fabric credential in
	ProjectId *int `pulumi:"projectId"`
	// The schema where to create the dbt models
	Schema *string `pulumi:"schema"`
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization *string `pulumi:"schemaAuthorization"`
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId *string `pulumi:"tenantId"`
	// The username of the Fabric account to connect to. Only used when connection with AD user/pass
	User *string `pulumi:"user"`
}

type FabricCredentialState struct {
	// Fabric adapter ID for the credential
	AdapterId pulumi.IntPtrInput
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId pulumi.StringPtrInput
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret pulumi.StringPtrInput
	// The system Fabric credential ID
	CredentialId pulumi.IntPtrInput
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password pulumi.StringPtrInput
	// Project ID to create the Fabric credential in
	ProjectId pulumi.IntPtrInput
	// The schema where to create the dbt models
	Schema pulumi.StringPtrInput
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization pulumi.StringPtrInput
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId pulumi.StringPtrInput
	// The username of the Fabric account to connect to. Only used when connection with AD user/pass
	User pulumi.StringPtrInput
}

func (FabricCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*fabricCredentialState)(nil)).Elem()
}

type fabricCredentialArgs struct {
	// Fabric adapter ID for the credential
	AdapterId int `pulumi:"adapterId"`
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId *string `pulumi:"clientId"`
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret *string `pulumi:"clientSecret"`
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password *string `pulumi:"password"`
	// Project ID to create the Fabric credential in
	ProjectId int `pulumi:"projectId"`
	// The schema where to create the dbt models
	Schema string `pulumi:"schema"`
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization *string `pulumi:"schemaAuthorization"`
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId *string `pulumi:"tenantId"`
	// The username of the Fabric account to connect to. Only used when connection with AD user/pass
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a FabricCredential resource.
type FabricCredentialArgs struct {
	// Fabric adapter ID for the credential
	AdapterId pulumi.IntInput
	// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientId pulumi.StringPtrInput
	// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
	ClientSecret pulumi.StringPtrInput
	// The password for the account to connect to. Only used when connection with AD user/pass
	Password pulumi.StringPtrInput
	// Project ID to create the Fabric credential in
	ProjectId pulumi.IntInput
	// The schema where to create the dbt models
	Schema pulumi.StringInput
	// Optionally set this to the principal who should own the schemas created by dbt
	SchemaAuthorization pulumi.StringPtrInput
	// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
	TenantId pulumi.StringPtrInput
	// The username of the Fabric account to connect to. Only used when connection with AD user/pass
	User pulumi.StringPtrInput
}

func (FabricCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fabricCredentialArgs)(nil)).Elem()
}

type FabricCredentialInput interface {
	pulumi.Input

	ToFabricCredentialOutput() FabricCredentialOutput
	ToFabricCredentialOutputWithContext(ctx context.Context) FabricCredentialOutput
}

func (*FabricCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricCredential)(nil)).Elem()
}

func (i *FabricCredential) ToFabricCredentialOutput() FabricCredentialOutput {
	return i.ToFabricCredentialOutputWithContext(context.Background())
}

func (i *FabricCredential) ToFabricCredentialOutputWithContext(ctx context.Context) FabricCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricCredentialOutput)
}

// FabricCredentialArrayInput is an input type that accepts FabricCredentialArray and FabricCredentialArrayOutput values.
// You can construct a concrete instance of `FabricCredentialArrayInput` via:
//
//	FabricCredentialArray{ FabricCredentialArgs{...} }
type FabricCredentialArrayInput interface {
	pulumi.Input

	ToFabricCredentialArrayOutput() FabricCredentialArrayOutput
	ToFabricCredentialArrayOutputWithContext(context.Context) FabricCredentialArrayOutput
}

type FabricCredentialArray []FabricCredentialInput

func (FabricCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FabricCredential)(nil)).Elem()
}

func (i FabricCredentialArray) ToFabricCredentialArrayOutput() FabricCredentialArrayOutput {
	return i.ToFabricCredentialArrayOutputWithContext(context.Background())
}

func (i FabricCredentialArray) ToFabricCredentialArrayOutputWithContext(ctx context.Context) FabricCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricCredentialArrayOutput)
}

// FabricCredentialMapInput is an input type that accepts FabricCredentialMap and FabricCredentialMapOutput values.
// You can construct a concrete instance of `FabricCredentialMapInput` via:
//
//	FabricCredentialMap{ "key": FabricCredentialArgs{...} }
type FabricCredentialMapInput interface {
	pulumi.Input

	ToFabricCredentialMapOutput() FabricCredentialMapOutput
	ToFabricCredentialMapOutputWithContext(context.Context) FabricCredentialMapOutput
}

type FabricCredentialMap map[string]FabricCredentialInput

func (FabricCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FabricCredential)(nil)).Elem()
}

func (i FabricCredentialMap) ToFabricCredentialMapOutput() FabricCredentialMapOutput {
	return i.ToFabricCredentialMapOutputWithContext(context.Background())
}

func (i FabricCredentialMap) ToFabricCredentialMapOutputWithContext(ctx context.Context) FabricCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricCredentialMapOutput)
}

type FabricCredentialOutput struct{ *pulumi.OutputState }

func (FabricCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FabricCredential)(nil)).Elem()
}

func (o FabricCredentialOutput) ToFabricCredentialOutput() FabricCredentialOutput {
	return o
}

func (o FabricCredentialOutput) ToFabricCredentialOutputWithContext(ctx context.Context) FabricCredentialOutput {
	return o
}

// Fabric adapter ID for the credential
func (o FabricCredentialOutput) AdapterId() pulumi.IntOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.IntOutput { return v.AdapterId }).(pulumi.IntOutput)
}

// The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
func (o FabricCredentialOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.
func (o FabricCredentialOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The system Fabric credential ID
func (o FabricCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// The password for the account to connect to. Only used when connection with AD user/pass
func (o FabricCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Project ID to create the Fabric credential in
func (o FabricCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// The schema where to create the dbt models
func (o FabricCredentialOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Optionally set this to the principal who should own the schemas created by dbt
func (o FabricCredentialOutput) SchemaAuthorization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.StringPtrOutput { return v.SchemaAuthorization }).(pulumi.StringPtrOutput)
}

// The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.
func (o FabricCredentialOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.StringPtrOutput { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The username of the Fabric account to connect to. Only used when connection with AD user/pass
func (o FabricCredentialOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FabricCredential) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

type FabricCredentialArrayOutput struct{ *pulumi.OutputState }

func (FabricCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FabricCredential)(nil)).Elem()
}

func (o FabricCredentialArrayOutput) ToFabricCredentialArrayOutput() FabricCredentialArrayOutput {
	return o
}

func (o FabricCredentialArrayOutput) ToFabricCredentialArrayOutputWithContext(ctx context.Context) FabricCredentialArrayOutput {
	return o
}

func (o FabricCredentialArrayOutput) Index(i pulumi.IntInput) FabricCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FabricCredential {
		return vs[0].([]*FabricCredential)[vs[1].(int)]
	}).(FabricCredentialOutput)
}

type FabricCredentialMapOutput struct{ *pulumi.OutputState }

func (FabricCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FabricCredential)(nil)).Elem()
}

func (o FabricCredentialMapOutput) ToFabricCredentialMapOutput() FabricCredentialMapOutput {
	return o
}

func (o FabricCredentialMapOutput) ToFabricCredentialMapOutputWithContext(ctx context.Context) FabricCredentialMapOutput {
	return o
}

func (o FabricCredentialMapOutput) MapIndex(k pulumi.StringInput) FabricCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FabricCredential {
		return vs[0].(map[string]*FabricCredential)[vs[1].(string)]
	}).(FabricCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FabricCredentialInput)(nil)).Elem(), &FabricCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*FabricCredentialArrayInput)(nil)).Elem(), FabricCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FabricCredentialMapInput)(nil)).Elem(), FabricCredentialMap{})
	pulumi.RegisterOutputType(FabricCredentialOutput{})
	pulumi.RegisterOutputType(FabricCredentialArrayOutput{})
	pulumi.RegisterOutputType(FabricCredentialMapOutput{})
}

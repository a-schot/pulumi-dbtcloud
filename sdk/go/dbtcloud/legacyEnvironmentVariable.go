// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LegacyEnvironmentVariable struct {
	pulumi.CustomResourceState

	// Map from environment names to respective variable value, a special key `project` should be set for the project default
	// variable value. This field is not set as sensitive so take precautions when using secret environment variables.
	EnvironmentValues pulumi.MapOutput `pulumi:"environmentValues"`
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name pulumi.StringOutput `pulumi:"name"`
	// Project for the variable to be created in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
}

// NewLegacyEnvironmentVariable registers a new resource with the given unique name, arguments, and options.
func NewLegacyEnvironmentVariable(ctx *pulumi.Context,
	name string, args *LegacyEnvironmentVariableArgs, opts ...pulumi.ResourceOption) (*LegacyEnvironmentVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentValues == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentValues'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyEnvironmentVariable
	err := ctx.RegisterResource("dbtcloud:index/legacyEnvironmentVariable:LegacyEnvironmentVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyEnvironmentVariable gets an existing LegacyEnvironmentVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyEnvironmentVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyEnvironmentVariableState, opts ...pulumi.ResourceOption) (*LegacyEnvironmentVariable, error) {
	var resource LegacyEnvironmentVariable
	err := ctx.ReadResource("dbtcloud:index/legacyEnvironmentVariable:LegacyEnvironmentVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyEnvironmentVariable resources.
type legacyEnvironmentVariableState struct {
	// Map from environment names to respective variable value, a special key `project` should be set for the project default
	// variable value. This field is not set as sensitive so take precautions when using secret environment variables.
	EnvironmentValues map[string]interface{} `pulumi:"environmentValues"`
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name *string `pulumi:"name"`
	// Project for the variable to be created in
	ProjectId *int `pulumi:"projectId"`
}

type LegacyEnvironmentVariableState struct {
	// Map from environment names to respective variable value, a special key `project` should be set for the project default
	// variable value. This field is not set as sensitive so take precautions when using secret environment variables.
	EnvironmentValues pulumi.MapInput
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name pulumi.StringPtrInput
	// Project for the variable to be created in
	ProjectId pulumi.IntPtrInput
}

func (LegacyEnvironmentVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyEnvironmentVariableState)(nil)).Elem()
}

type legacyEnvironmentVariableArgs struct {
	// Map from environment names to respective variable value, a special key `project` should be set for the project default
	// variable value. This field is not set as sensitive so take precautions when using secret environment variables.
	EnvironmentValues map[string]interface{} `pulumi:"environmentValues"`
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name *string `pulumi:"name"`
	// Project for the variable to be created in
	ProjectId int `pulumi:"projectId"`
}

// The set of arguments for constructing a LegacyEnvironmentVariable resource.
type LegacyEnvironmentVariableArgs struct {
	// Map from environment names to respective variable value, a special key `project` should be set for the project default
	// variable value. This field is not set as sensitive so take precautions when using secret environment variables.
	EnvironmentValues pulumi.MapInput
	// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
	Name pulumi.StringPtrInput
	// Project for the variable to be created in
	ProjectId pulumi.IntInput
}

func (LegacyEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyEnvironmentVariableArgs)(nil)).Elem()
}

type LegacyEnvironmentVariableInput interface {
	pulumi.Input

	ToLegacyEnvironmentVariableOutput() LegacyEnvironmentVariableOutput
	ToLegacyEnvironmentVariableOutputWithContext(ctx context.Context) LegacyEnvironmentVariableOutput
}

func (*LegacyEnvironmentVariable) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyEnvironmentVariable)(nil)).Elem()
}

func (i *LegacyEnvironmentVariable) ToLegacyEnvironmentVariableOutput() LegacyEnvironmentVariableOutput {
	return i.ToLegacyEnvironmentVariableOutputWithContext(context.Background())
}

func (i *LegacyEnvironmentVariable) ToLegacyEnvironmentVariableOutputWithContext(ctx context.Context) LegacyEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyEnvironmentVariableOutput)
}

// LegacyEnvironmentVariableArrayInput is an input type that accepts LegacyEnvironmentVariableArray and LegacyEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `LegacyEnvironmentVariableArrayInput` via:
//
//	LegacyEnvironmentVariableArray{ LegacyEnvironmentVariableArgs{...} }
type LegacyEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToLegacyEnvironmentVariableArrayOutput() LegacyEnvironmentVariableArrayOutput
	ToLegacyEnvironmentVariableArrayOutputWithContext(context.Context) LegacyEnvironmentVariableArrayOutput
}

type LegacyEnvironmentVariableArray []LegacyEnvironmentVariableInput

func (LegacyEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyEnvironmentVariable)(nil)).Elem()
}

func (i LegacyEnvironmentVariableArray) ToLegacyEnvironmentVariableArrayOutput() LegacyEnvironmentVariableArrayOutput {
	return i.ToLegacyEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i LegacyEnvironmentVariableArray) ToLegacyEnvironmentVariableArrayOutputWithContext(ctx context.Context) LegacyEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyEnvironmentVariableArrayOutput)
}

// LegacyEnvironmentVariableMapInput is an input type that accepts LegacyEnvironmentVariableMap and LegacyEnvironmentVariableMapOutput values.
// You can construct a concrete instance of `LegacyEnvironmentVariableMapInput` via:
//
//	LegacyEnvironmentVariableMap{ "key": LegacyEnvironmentVariableArgs{...} }
type LegacyEnvironmentVariableMapInput interface {
	pulumi.Input

	ToLegacyEnvironmentVariableMapOutput() LegacyEnvironmentVariableMapOutput
	ToLegacyEnvironmentVariableMapOutputWithContext(context.Context) LegacyEnvironmentVariableMapOutput
}

type LegacyEnvironmentVariableMap map[string]LegacyEnvironmentVariableInput

func (LegacyEnvironmentVariableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyEnvironmentVariable)(nil)).Elem()
}

func (i LegacyEnvironmentVariableMap) ToLegacyEnvironmentVariableMapOutput() LegacyEnvironmentVariableMapOutput {
	return i.ToLegacyEnvironmentVariableMapOutputWithContext(context.Background())
}

func (i LegacyEnvironmentVariableMap) ToLegacyEnvironmentVariableMapOutputWithContext(ctx context.Context) LegacyEnvironmentVariableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyEnvironmentVariableMapOutput)
}

type LegacyEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (LegacyEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyEnvironmentVariable)(nil)).Elem()
}

func (o LegacyEnvironmentVariableOutput) ToLegacyEnvironmentVariableOutput() LegacyEnvironmentVariableOutput {
	return o
}

func (o LegacyEnvironmentVariableOutput) ToLegacyEnvironmentVariableOutputWithContext(ctx context.Context) LegacyEnvironmentVariableOutput {
	return o
}

// Map from environment names to respective variable value, a special key `project` should be set for the project default
// variable value. This field is not set as sensitive so take precautions when using secret environment variables.
func (o LegacyEnvironmentVariableOutput) EnvironmentValues() pulumi.MapOutput {
	return o.ApplyT(func(v *LegacyEnvironmentVariable) pulumi.MapOutput { return v.EnvironmentValues }).(pulumi.MapOutput)
}

// Name for the variable, must be unique within a project, must be prefixed with 'DBT_'
func (o LegacyEnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyEnvironmentVariable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project for the variable to be created in
func (o LegacyEnvironmentVariableOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyEnvironmentVariable) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

type LegacyEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (LegacyEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyEnvironmentVariable)(nil)).Elem()
}

func (o LegacyEnvironmentVariableArrayOutput) ToLegacyEnvironmentVariableArrayOutput() LegacyEnvironmentVariableArrayOutput {
	return o
}

func (o LegacyEnvironmentVariableArrayOutput) ToLegacyEnvironmentVariableArrayOutputWithContext(ctx context.Context) LegacyEnvironmentVariableArrayOutput {
	return o
}

func (o LegacyEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) LegacyEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyEnvironmentVariable {
		return vs[0].([]*LegacyEnvironmentVariable)[vs[1].(int)]
	}).(LegacyEnvironmentVariableOutput)
}

type LegacyEnvironmentVariableMapOutput struct{ *pulumi.OutputState }

func (LegacyEnvironmentVariableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyEnvironmentVariable)(nil)).Elem()
}

func (o LegacyEnvironmentVariableMapOutput) ToLegacyEnvironmentVariableMapOutput() LegacyEnvironmentVariableMapOutput {
	return o
}

func (o LegacyEnvironmentVariableMapOutput) ToLegacyEnvironmentVariableMapOutputWithContext(ctx context.Context) LegacyEnvironmentVariableMapOutput {
	return o
}

func (o LegacyEnvironmentVariableMapOutput) MapIndex(k pulumi.StringInput) LegacyEnvironmentVariableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyEnvironmentVariable {
		return vs[0].(map[string]*LegacyEnvironmentVariable)[vs[1].(string)]
	}).(LegacyEnvironmentVariableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyEnvironmentVariableInput)(nil)).Elem(), &LegacyEnvironmentVariable{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyEnvironmentVariableArrayInput)(nil)).Elem(), LegacyEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyEnvironmentVariableMapInput)(nil)).Elem(), LegacyEnvironmentVariableMap{})
	pulumi.RegisterOutputType(LegacyEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(LegacyEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(LegacyEnvironmentVariableMapOutput{})
}

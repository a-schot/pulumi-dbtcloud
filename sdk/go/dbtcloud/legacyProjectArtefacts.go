// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LegacyProjectArtefacts struct {
	pulumi.CustomResourceState

	// Docs Job ID
	DocsJobId pulumi.IntPtrOutput `pulumi:"docsJobId"`
	// Freshness Job ID
	FreshnessJobId pulumi.IntPtrOutput `pulumi:"freshnessJobId"`
	// Project ID
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
}

// NewLegacyProjectArtefacts registers a new resource with the given unique name, arguments, and options.
func NewLegacyProjectArtefacts(ctx *pulumi.Context,
	name string, args *LegacyProjectArtefactsArgs, opts ...pulumi.ResourceOption) (*LegacyProjectArtefacts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyProjectArtefacts
	err := ctx.RegisterResource("dbtcloud:index/legacyProjectArtefacts:LegacyProjectArtefacts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyProjectArtefacts gets an existing LegacyProjectArtefacts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyProjectArtefacts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyProjectArtefactsState, opts ...pulumi.ResourceOption) (*LegacyProjectArtefacts, error) {
	var resource LegacyProjectArtefacts
	err := ctx.ReadResource("dbtcloud:index/legacyProjectArtefacts:LegacyProjectArtefacts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyProjectArtefacts resources.
type legacyProjectArtefactsState struct {
	// Docs Job ID
	DocsJobId *int `pulumi:"docsJobId"`
	// Freshness Job ID
	FreshnessJobId *int `pulumi:"freshnessJobId"`
	// Project ID
	ProjectId *int `pulumi:"projectId"`
}

type LegacyProjectArtefactsState struct {
	// Docs Job ID
	DocsJobId pulumi.IntPtrInput
	// Freshness Job ID
	FreshnessJobId pulumi.IntPtrInput
	// Project ID
	ProjectId pulumi.IntPtrInput
}

func (LegacyProjectArtefactsState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyProjectArtefactsState)(nil)).Elem()
}

type legacyProjectArtefactsArgs struct {
	// Docs Job ID
	DocsJobId *int `pulumi:"docsJobId"`
	// Freshness Job ID
	FreshnessJobId *int `pulumi:"freshnessJobId"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
}

// The set of arguments for constructing a LegacyProjectArtefacts resource.
type LegacyProjectArtefactsArgs struct {
	// Docs Job ID
	DocsJobId pulumi.IntPtrInput
	// Freshness Job ID
	FreshnessJobId pulumi.IntPtrInput
	// Project ID
	ProjectId pulumi.IntInput
}

func (LegacyProjectArtefactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyProjectArtefactsArgs)(nil)).Elem()
}

type LegacyProjectArtefactsInput interface {
	pulumi.Input

	ToLegacyProjectArtefactsOutput() LegacyProjectArtefactsOutput
	ToLegacyProjectArtefactsOutputWithContext(ctx context.Context) LegacyProjectArtefactsOutput
}

func (*LegacyProjectArtefacts) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyProjectArtefacts)(nil)).Elem()
}

func (i *LegacyProjectArtefacts) ToLegacyProjectArtefactsOutput() LegacyProjectArtefactsOutput {
	return i.ToLegacyProjectArtefactsOutputWithContext(context.Background())
}

func (i *LegacyProjectArtefacts) ToLegacyProjectArtefactsOutputWithContext(ctx context.Context) LegacyProjectArtefactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectArtefactsOutput)
}

// LegacyProjectArtefactsArrayInput is an input type that accepts LegacyProjectArtefactsArray and LegacyProjectArtefactsArrayOutput values.
// You can construct a concrete instance of `LegacyProjectArtefactsArrayInput` via:
//
//	LegacyProjectArtefactsArray{ LegacyProjectArtefactsArgs{...} }
type LegacyProjectArtefactsArrayInput interface {
	pulumi.Input

	ToLegacyProjectArtefactsArrayOutput() LegacyProjectArtefactsArrayOutput
	ToLegacyProjectArtefactsArrayOutputWithContext(context.Context) LegacyProjectArtefactsArrayOutput
}

type LegacyProjectArtefactsArray []LegacyProjectArtefactsInput

func (LegacyProjectArtefactsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyProjectArtefacts)(nil)).Elem()
}

func (i LegacyProjectArtefactsArray) ToLegacyProjectArtefactsArrayOutput() LegacyProjectArtefactsArrayOutput {
	return i.ToLegacyProjectArtefactsArrayOutputWithContext(context.Background())
}

func (i LegacyProjectArtefactsArray) ToLegacyProjectArtefactsArrayOutputWithContext(ctx context.Context) LegacyProjectArtefactsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectArtefactsArrayOutput)
}

// LegacyProjectArtefactsMapInput is an input type that accepts LegacyProjectArtefactsMap and LegacyProjectArtefactsMapOutput values.
// You can construct a concrete instance of `LegacyProjectArtefactsMapInput` via:
//
//	LegacyProjectArtefactsMap{ "key": LegacyProjectArtefactsArgs{...} }
type LegacyProjectArtefactsMapInput interface {
	pulumi.Input

	ToLegacyProjectArtefactsMapOutput() LegacyProjectArtefactsMapOutput
	ToLegacyProjectArtefactsMapOutputWithContext(context.Context) LegacyProjectArtefactsMapOutput
}

type LegacyProjectArtefactsMap map[string]LegacyProjectArtefactsInput

func (LegacyProjectArtefactsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyProjectArtefacts)(nil)).Elem()
}

func (i LegacyProjectArtefactsMap) ToLegacyProjectArtefactsMapOutput() LegacyProjectArtefactsMapOutput {
	return i.ToLegacyProjectArtefactsMapOutputWithContext(context.Background())
}

func (i LegacyProjectArtefactsMap) ToLegacyProjectArtefactsMapOutputWithContext(ctx context.Context) LegacyProjectArtefactsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectArtefactsMapOutput)
}

type LegacyProjectArtefactsOutput struct{ *pulumi.OutputState }

func (LegacyProjectArtefactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyProjectArtefacts)(nil)).Elem()
}

func (o LegacyProjectArtefactsOutput) ToLegacyProjectArtefactsOutput() LegacyProjectArtefactsOutput {
	return o
}

func (o LegacyProjectArtefactsOutput) ToLegacyProjectArtefactsOutputWithContext(ctx context.Context) LegacyProjectArtefactsOutput {
	return o
}

// Docs Job ID
func (o LegacyProjectArtefactsOutput) DocsJobId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyProjectArtefacts) pulumi.IntPtrOutput { return v.DocsJobId }).(pulumi.IntPtrOutput)
}

// Freshness Job ID
func (o LegacyProjectArtefactsOutput) FreshnessJobId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyProjectArtefacts) pulumi.IntPtrOutput { return v.FreshnessJobId }).(pulumi.IntPtrOutput)
}

// Project ID
func (o LegacyProjectArtefactsOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyProjectArtefacts) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

type LegacyProjectArtefactsArrayOutput struct{ *pulumi.OutputState }

func (LegacyProjectArtefactsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyProjectArtefacts)(nil)).Elem()
}

func (o LegacyProjectArtefactsArrayOutput) ToLegacyProjectArtefactsArrayOutput() LegacyProjectArtefactsArrayOutput {
	return o
}

func (o LegacyProjectArtefactsArrayOutput) ToLegacyProjectArtefactsArrayOutputWithContext(ctx context.Context) LegacyProjectArtefactsArrayOutput {
	return o
}

func (o LegacyProjectArtefactsArrayOutput) Index(i pulumi.IntInput) LegacyProjectArtefactsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyProjectArtefacts {
		return vs[0].([]*LegacyProjectArtefacts)[vs[1].(int)]
	}).(LegacyProjectArtefactsOutput)
}

type LegacyProjectArtefactsMapOutput struct{ *pulumi.OutputState }

func (LegacyProjectArtefactsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyProjectArtefacts)(nil)).Elem()
}

func (o LegacyProjectArtefactsMapOutput) ToLegacyProjectArtefactsMapOutput() LegacyProjectArtefactsMapOutput {
	return o
}

func (o LegacyProjectArtefactsMapOutput) ToLegacyProjectArtefactsMapOutputWithContext(ctx context.Context) LegacyProjectArtefactsMapOutput {
	return o
}

func (o LegacyProjectArtefactsMapOutput) MapIndex(k pulumi.StringInput) LegacyProjectArtefactsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyProjectArtefacts {
		return vs[0].(map[string]*LegacyProjectArtefacts)[vs[1].(string)]
	}).(LegacyProjectArtefactsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectArtefactsInput)(nil)).Elem(), &LegacyProjectArtefacts{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectArtefactsArrayInput)(nil)).Elem(), LegacyProjectArtefactsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectArtefactsMapInput)(nil)).Elem(), LegacyProjectArtefactsMap{})
	pulumi.RegisterOutputType(LegacyProjectArtefactsOutput{})
	pulumi.RegisterOutputType(LegacyProjectArtefactsArrayOutput{})
	pulumi.RegisterOutputType(LegacyProjectArtefactsMapOutput{})
}

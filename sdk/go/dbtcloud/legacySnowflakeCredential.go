// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LegacySnowflakeCredential struct {
	pulumi.CustomResourceState

	// The type of Snowflake credential ('password' or 'keypair')
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// The system Snowflake credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// Database to connect to
	Database pulumi.StringPtrOutput `pulumi:"database"`
	// Whether the Snowflake credential is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Number of threads to use
	NumThreads pulumi.IntOutput `pulumi:"numThreads"`
	// Password for Snowflake
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Private key for Snowflake
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase pulumi.StringPtrOutput `pulumi:"privateKeyPassphrase"`
	// Project ID to create the Snowflake credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Role to assume
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Default schema name
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Username for Snowflake
	User pulumi.StringOutput `pulumi:"user"`
	// Warehouse to use
	Warehouse pulumi.StringPtrOutput `pulumi:"warehouse"`
}

// NewLegacySnowflakeCredential registers a new resource with the given unique name, arguments, and options.
func NewLegacySnowflakeCredential(ctx *pulumi.Context,
	name string, args *LegacySnowflakeCredentialArgs, opts ...pulumi.ResourceOption) (*LegacySnowflakeCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthType == nil {
		return nil, errors.New("invalid value for required argument 'AuthType'")
	}
	if args.NumThreads == nil {
		return nil, errors.New("invalid value for required argument 'NumThreads'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	if args.PrivateKeyPassphrase != nil {
		args.PrivateKeyPassphrase = pulumi.ToSecret(args.PrivateKeyPassphrase).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"privateKey",
		"privateKeyPassphrase",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacySnowflakeCredential
	err := ctx.RegisterResource("dbtcloud:index/legacySnowflakeCredential:LegacySnowflakeCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacySnowflakeCredential gets an existing LegacySnowflakeCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacySnowflakeCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacySnowflakeCredentialState, opts ...pulumi.ResourceOption) (*LegacySnowflakeCredential, error) {
	var resource LegacySnowflakeCredential
	err := ctx.ReadResource("dbtcloud:index/legacySnowflakeCredential:LegacySnowflakeCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacySnowflakeCredential resources.
type legacySnowflakeCredentialState struct {
	// The type of Snowflake credential ('password' or 'keypair')
	AuthType *string `pulumi:"authType"`
	// The system Snowflake credential ID
	CredentialId *int `pulumi:"credentialId"`
	// Database to connect to
	Database *string `pulumi:"database"`
	// Whether the Snowflake credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads *int `pulumi:"numThreads"`
	// Password for Snowflake
	Password *string `pulumi:"password"`
	// Private key for Snowflake
	PrivateKey *string `pulumi:"privateKey"`
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase *string `pulumi:"privateKeyPassphrase"`
	// Project ID to create the Snowflake credential in
	ProjectId *int `pulumi:"projectId"`
	// Role to assume
	Role *string `pulumi:"role"`
	// Default schema name
	Schema *string `pulumi:"schema"`
	// Username for Snowflake
	User *string `pulumi:"user"`
	// Warehouse to use
	Warehouse *string `pulumi:"warehouse"`
}

type LegacySnowflakeCredentialState struct {
	// The type of Snowflake credential ('password' or 'keypair')
	AuthType pulumi.StringPtrInput
	// The system Snowflake credential ID
	CredentialId pulumi.IntPtrInput
	// Database to connect to
	Database pulumi.StringPtrInput
	// Whether the Snowflake credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntPtrInput
	// Password for Snowflake
	Password pulumi.StringPtrInput
	// Private key for Snowflake
	PrivateKey pulumi.StringPtrInput
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase pulumi.StringPtrInput
	// Project ID to create the Snowflake credential in
	ProjectId pulumi.IntPtrInput
	// Role to assume
	Role pulumi.StringPtrInput
	// Default schema name
	Schema pulumi.StringPtrInput
	// Username for Snowflake
	User pulumi.StringPtrInput
	// Warehouse to use
	Warehouse pulumi.StringPtrInput
}

func (LegacySnowflakeCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacySnowflakeCredentialState)(nil)).Elem()
}

type legacySnowflakeCredentialArgs struct {
	// The type of Snowflake credential ('password' or 'keypair')
	AuthType string `pulumi:"authType"`
	// Database to connect to
	Database *string `pulumi:"database"`
	// Whether the Snowflake credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads int `pulumi:"numThreads"`
	// Password for Snowflake
	Password *string `pulumi:"password"`
	// Private key for Snowflake
	PrivateKey *string `pulumi:"privateKey"`
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase *string `pulumi:"privateKeyPassphrase"`
	// Project ID to create the Snowflake credential in
	ProjectId int `pulumi:"projectId"`
	// Role to assume
	Role *string `pulumi:"role"`
	// Default schema name
	Schema string `pulumi:"schema"`
	// Username for Snowflake
	User string `pulumi:"user"`
	// Warehouse to use
	Warehouse *string `pulumi:"warehouse"`
}

// The set of arguments for constructing a LegacySnowflakeCredential resource.
type LegacySnowflakeCredentialArgs struct {
	// The type of Snowflake credential ('password' or 'keypair')
	AuthType pulumi.StringInput
	// Database to connect to
	Database pulumi.StringPtrInput
	// Whether the Snowflake credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntInput
	// Password for Snowflake
	Password pulumi.StringPtrInput
	// Private key for Snowflake
	PrivateKey pulumi.StringPtrInput
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase pulumi.StringPtrInput
	// Project ID to create the Snowflake credential in
	ProjectId pulumi.IntInput
	// Role to assume
	Role pulumi.StringPtrInput
	// Default schema name
	Schema pulumi.StringInput
	// Username for Snowflake
	User pulumi.StringInput
	// Warehouse to use
	Warehouse pulumi.StringPtrInput
}

func (LegacySnowflakeCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacySnowflakeCredentialArgs)(nil)).Elem()
}

type LegacySnowflakeCredentialInput interface {
	pulumi.Input

	ToLegacySnowflakeCredentialOutput() LegacySnowflakeCredentialOutput
	ToLegacySnowflakeCredentialOutputWithContext(ctx context.Context) LegacySnowflakeCredentialOutput
}

func (*LegacySnowflakeCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacySnowflakeCredential)(nil)).Elem()
}

func (i *LegacySnowflakeCredential) ToLegacySnowflakeCredentialOutput() LegacySnowflakeCredentialOutput {
	return i.ToLegacySnowflakeCredentialOutputWithContext(context.Background())
}

func (i *LegacySnowflakeCredential) ToLegacySnowflakeCredentialOutputWithContext(ctx context.Context) LegacySnowflakeCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacySnowflakeCredentialOutput)
}

// LegacySnowflakeCredentialArrayInput is an input type that accepts LegacySnowflakeCredentialArray and LegacySnowflakeCredentialArrayOutput values.
// You can construct a concrete instance of `LegacySnowflakeCredentialArrayInput` via:
//
//	LegacySnowflakeCredentialArray{ LegacySnowflakeCredentialArgs{...} }
type LegacySnowflakeCredentialArrayInput interface {
	pulumi.Input

	ToLegacySnowflakeCredentialArrayOutput() LegacySnowflakeCredentialArrayOutput
	ToLegacySnowflakeCredentialArrayOutputWithContext(context.Context) LegacySnowflakeCredentialArrayOutput
}

type LegacySnowflakeCredentialArray []LegacySnowflakeCredentialInput

func (LegacySnowflakeCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacySnowflakeCredential)(nil)).Elem()
}

func (i LegacySnowflakeCredentialArray) ToLegacySnowflakeCredentialArrayOutput() LegacySnowflakeCredentialArrayOutput {
	return i.ToLegacySnowflakeCredentialArrayOutputWithContext(context.Background())
}

func (i LegacySnowflakeCredentialArray) ToLegacySnowflakeCredentialArrayOutputWithContext(ctx context.Context) LegacySnowflakeCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacySnowflakeCredentialArrayOutput)
}

// LegacySnowflakeCredentialMapInput is an input type that accepts LegacySnowflakeCredentialMap and LegacySnowflakeCredentialMapOutput values.
// You can construct a concrete instance of `LegacySnowflakeCredentialMapInput` via:
//
//	LegacySnowflakeCredentialMap{ "key": LegacySnowflakeCredentialArgs{...} }
type LegacySnowflakeCredentialMapInput interface {
	pulumi.Input

	ToLegacySnowflakeCredentialMapOutput() LegacySnowflakeCredentialMapOutput
	ToLegacySnowflakeCredentialMapOutputWithContext(context.Context) LegacySnowflakeCredentialMapOutput
}

type LegacySnowflakeCredentialMap map[string]LegacySnowflakeCredentialInput

func (LegacySnowflakeCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacySnowflakeCredential)(nil)).Elem()
}

func (i LegacySnowflakeCredentialMap) ToLegacySnowflakeCredentialMapOutput() LegacySnowflakeCredentialMapOutput {
	return i.ToLegacySnowflakeCredentialMapOutputWithContext(context.Background())
}

func (i LegacySnowflakeCredentialMap) ToLegacySnowflakeCredentialMapOutputWithContext(ctx context.Context) LegacySnowflakeCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacySnowflakeCredentialMapOutput)
}

type LegacySnowflakeCredentialOutput struct{ *pulumi.OutputState }

func (LegacySnowflakeCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacySnowflakeCredential)(nil)).Elem()
}

func (o LegacySnowflakeCredentialOutput) ToLegacySnowflakeCredentialOutput() LegacySnowflakeCredentialOutput {
	return o
}

func (o LegacySnowflakeCredentialOutput) ToLegacySnowflakeCredentialOutputWithContext(ctx context.Context) LegacySnowflakeCredentialOutput {
	return o
}

// The type of Snowflake credential ('password' or 'keypair')
func (o LegacySnowflakeCredentialOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// The system Snowflake credential ID
func (o LegacySnowflakeCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// Database to connect to
func (o LegacySnowflakeCredentialOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.StringPtrOutput { return v.Database }).(pulumi.StringPtrOutput)
}

// Whether the Snowflake credential is active
func (o LegacySnowflakeCredentialOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Number of threads to use
func (o LegacySnowflakeCredentialOutput) NumThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.IntOutput { return v.NumThreads }).(pulumi.IntOutput)
}

// Password for Snowflake
func (o LegacySnowflakeCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Private key for Snowflake
func (o LegacySnowflakeCredentialOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Private key passphrase for Snowflake
func (o LegacySnowflakeCredentialOutput) PrivateKeyPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.StringPtrOutput { return v.PrivateKeyPassphrase }).(pulumi.StringPtrOutput)
}

// Project ID to create the Snowflake credential in
func (o LegacySnowflakeCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Role to assume
func (o LegacySnowflakeCredentialOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Default schema name
func (o LegacySnowflakeCredentialOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Username for Snowflake
func (o LegacySnowflakeCredentialOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// Warehouse to use
func (o LegacySnowflakeCredentialOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacySnowflakeCredential) pulumi.StringPtrOutput { return v.Warehouse }).(pulumi.StringPtrOutput)
}

type LegacySnowflakeCredentialArrayOutput struct{ *pulumi.OutputState }

func (LegacySnowflakeCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacySnowflakeCredential)(nil)).Elem()
}

func (o LegacySnowflakeCredentialArrayOutput) ToLegacySnowflakeCredentialArrayOutput() LegacySnowflakeCredentialArrayOutput {
	return o
}

func (o LegacySnowflakeCredentialArrayOutput) ToLegacySnowflakeCredentialArrayOutputWithContext(ctx context.Context) LegacySnowflakeCredentialArrayOutput {
	return o
}

func (o LegacySnowflakeCredentialArrayOutput) Index(i pulumi.IntInput) LegacySnowflakeCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacySnowflakeCredential {
		return vs[0].([]*LegacySnowflakeCredential)[vs[1].(int)]
	}).(LegacySnowflakeCredentialOutput)
}

type LegacySnowflakeCredentialMapOutput struct{ *pulumi.OutputState }

func (LegacySnowflakeCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacySnowflakeCredential)(nil)).Elem()
}

func (o LegacySnowflakeCredentialMapOutput) ToLegacySnowflakeCredentialMapOutput() LegacySnowflakeCredentialMapOutput {
	return o
}

func (o LegacySnowflakeCredentialMapOutput) ToLegacySnowflakeCredentialMapOutputWithContext(ctx context.Context) LegacySnowflakeCredentialMapOutput {
	return o
}

func (o LegacySnowflakeCredentialMapOutput) MapIndex(k pulumi.StringInput) LegacySnowflakeCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacySnowflakeCredential {
		return vs[0].(map[string]*LegacySnowflakeCredential)[vs[1].(string)]
	}).(LegacySnowflakeCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacySnowflakeCredentialInput)(nil)).Elem(), &LegacySnowflakeCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacySnowflakeCredentialArrayInput)(nil)).Elem(), LegacySnowflakeCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacySnowflakeCredentialMapInput)(nil)).Elem(), LegacySnowflakeCredentialMap{})
	pulumi.RegisterOutputType(LegacySnowflakeCredentialOutput{})
	pulumi.RegisterOutputType(LegacySnowflakeCredentialArrayOutput{})
	pulumi.RegisterOutputType(LegacySnowflakeCredentialMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LegacyProjectRepository struct {
	pulumi.CustomResourceState

	// Project ID
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Repository ID
	RepositoryId pulumi.IntOutput `pulumi:"repositoryId"`
}

// NewLegacyProjectRepository registers a new resource with the given unique name, arguments, and options.
func NewLegacyProjectRepository(ctx *pulumi.Context,
	name string, args *LegacyProjectRepositoryArgs, opts ...pulumi.ResourceOption) (*LegacyProjectRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyProjectRepository
	err := ctx.RegisterResource("dbtcloud:index/legacyProjectRepository:LegacyProjectRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyProjectRepository gets an existing LegacyProjectRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyProjectRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyProjectRepositoryState, opts ...pulumi.ResourceOption) (*LegacyProjectRepository, error) {
	var resource LegacyProjectRepository
	err := ctx.ReadResource("dbtcloud:index/legacyProjectRepository:LegacyProjectRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyProjectRepository resources.
type legacyProjectRepositoryState struct {
	// Project ID
	ProjectId *int `pulumi:"projectId"`
	// Repository ID
	RepositoryId *int `pulumi:"repositoryId"`
}

type LegacyProjectRepositoryState struct {
	// Project ID
	ProjectId pulumi.IntPtrInput
	// Repository ID
	RepositoryId pulumi.IntPtrInput
}

func (LegacyProjectRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyProjectRepositoryState)(nil)).Elem()
}

type legacyProjectRepositoryArgs struct {
	// Project ID
	ProjectId int `pulumi:"projectId"`
	// Repository ID
	RepositoryId int `pulumi:"repositoryId"`
}

// The set of arguments for constructing a LegacyProjectRepository resource.
type LegacyProjectRepositoryArgs struct {
	// Project ID
	ProjectId pulumi.IntInput
	// Repository ID
	RepositoryId pulumi.IntInput
}

func (LegacyProjectRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyProjectRepositoryArgs)(nil)).Elem()
}

type LegacyProjectRepositoryInput interface {
	pulumi.Input

	ToLegacyProjectRepositoryOutput() LegacyProjectRepositoryOutput
	ToLegacyProjectRepositoryOutputWithContext(ctx context.Context) LegacyProjectRepositoryOutput
}

func (*LegacyProjectRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyProjectRepository)(nil)).Elem()
}

func (i *LegacyProjectRepository) ToLegacyProjectRepositoryOutput() LegacyProjectRepositoryOutput {
	return i.ToLegacyProjectRepositoryOutputWithContext(context.Background())
}

func (i *LegacyProjectRepository) ToLegacyProjectRepositoryOutputWithContext(ctx context.Context) LegacyProjectRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectRepositoryOutput)
}

// LegacyProjectRepositoryArrayInput is an input type that accepts LegacyProjectRepositoryArray and LegacyProjectRepositoryArrayOutput values.
// You can construct a concrete instance of `LegacyProjectRepositoryArrayInput` via:
//
//	LegacyProjectRepositoryArray{ LegacyProjectRepositoryArgs{...} }
type LegacyProjectRepositoryArrayInput interface {
	pulumi.Input

	ToLegacyProjectRepositoryArrayOutput() LegacyProjectRepositoryArrayOutput
	ToLegacyProjectRepositoryArrayOutputWithContext(context.Context) LegacyProjectRepositoryArrayOutput
}

type LegacyProjectRepositoryArray []LegacyProjectRepositoryInput

func (LegacyProjectRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyProjectRepository)(nil)).Elem()
}

func (i LegacyProjectRepositoryArray) ToLegacyProjectRepositoryArrayOutput() LegacyProjectRepositoryArrayOutput {
	return i.ToLegacyProjectRepositoryArrayOutputWithContext(context.Background())
}

func (i LegacyProjectRepositoryArray) ToLegacyProjectRepositoryArrayOutputWithContext(ctx context.Context) LegacyProjectRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectRepositoryArrayOutput)
}

// LegacyProjectRepositoryMapInput is an input type that accepts LegacyProjectRepositoryMap and LegacyProjectRepositoryMapOutput values.
// You can construct a concrete instance of `LegacyProjectRepositoryMapInput` via:
//
//	LegacyProjectRepositoryMap{ "key": LegacyProjectRepositoryArgs{...} }
type LegacyProjectRepositoryMapInput interface {
	pulumi.Input

	ToLegacyProjectRepositoryMapOutput() LegacyProjectRepositoryMapOutput
	ToLegacyProjectRepositoryMapOutputWithContext(context.Context) LegacyProjectRepositoryMapOutput
}

type LegacyProjectRepositoryMap map[string]LegacyProjectRepositoryInput

func (LegacyProjectRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyProjectRepository)(nil)).Elem()
}

func (i LegacyProjectRepositoryMap) ToLegacyProjectRepositoryMapOutput() LegacyProjectRepositoryMapOutput {
	return i.ToLegacyProjectRepositoryMapOutputWithContext(context.Background())
}

func (i LegacyProjectRepositoryMap) ToLegacyProjectRepositoryMapOutputWithContext(ctx context.Context) LegacyProjectRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectRepositoryMapOutput)
}

type LegacyProjectRepositoryOutput struct{ *pulumi.OutputState }

func (LegacyProjectRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyProjectRepository)(nil)).Elem()
}

func (o LegacyProjectRepositoryOutput) ToLegacyProjectRepositoryOutput() LegacyProjectRepositoryOutput {
	return o
}

func (o LegacyProjectRepositoryOutput) ToLegacyProjectRepositoryOutputWithContext(ctx context.Context) LegacyProjectRepositoryOutput {
	return o
}

// Project ID
func (o LegacyProjectRepositoryOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyProjectRepository) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Repository ID
func (o LegacyProjectRepositoryOutput) RepositoryId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyProjectRepository) pulumi.IntOutput { return v.RepositoryId }).(pulumi.IntOutput)
}

type LegacyProjectRepositoryArrayOutput struct{ *pulumi.OutputState }

func (LegacyProjectRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyProjectRepository)(nil)).Elem()
}

func (o LegacyProjectRepositoryArrayOutput) ToLegacyProjectRepositoryArrayOutput() LegacyProjectRepositoryArrayOutput {
	return o
}

func (o LegacyProjectRepositoryArrayOutput) ToLegacyProjectRepositoryArrayOutputWithContext(ctx context.Context) LegacyProjectRepositoryArrayOutput {
	return o
}

func (o LegacyProjectRepositoryArrayOutput) Index(i pulumi.IntInput) LegacyProjectRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyProjectRepository {
		return vs[0].([]*LegacyProjectRepository)[vs[1].(int)]
	}).(LegacyProjectRepositoryOutput)
}

type LegacyProjectRepositoryMapOutput struct{ *pulumi.OutputState }

func (LegacyProjectRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyProjectRepository)(nil)).Elem()
}

func (o LegacyProjectRepositoryMapOutput) ToLegacyProjectRepositoryMapOutput() LegacyProjectRepositoryMapOutput {
	return o
}

func (o LegacyProjectRepositoryMapOutput) ToLegacyProjectRepositoryMapOutputWithContext(ctx context.Context) LegacyProjectRepositoryMapOutput {
	return o
}

func (o LegacyProjectRepositoryMapOutput) MapIndex(k pulumi.StringInput) LegacyProjectRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyProjectRepository {
		return vs[0].(map[string]*LegacyProjectRepository)[vs[1].(string)]
	}).(LegacyProjectRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectRepositoryInput)(nil)).Elem(), &LegacyProjectRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectRepositoryArrayInput)(nil)).Elem(), LegacyProjectRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectRepositoryMapInput)(nil)).Elem(), LegacyProjectRepositoryMap{})
	pulumi.RegisterOutputType(LegacyProjectRepositoryOutput{})
	pulumi.RegisterOutputType(LegacyProjectRepositoryArrayOutput{})
	pulumi.RegisterOutputType(LegacyProjectRepositoryMapOutput{})
}

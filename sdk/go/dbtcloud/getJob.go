// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupJob(ctx *pulumi.Context, args *LookupJobArgs, opts ...pulumi.InvokeOption) (*LookupJobResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupJobResult
	err := ctx.Invoke("dbtcloud:index/getJob:getJob", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getJob.
type LookupJobArgs struct {
	// ID of the job
	JobId int `pulumi:"jobId"`
	// ID of the project the job is in
	ProjectId int `pulumi:"projectId"`
}

// A collection of values returned by getJob.
type LookupJobResult struct {
	// ID of the environment this job defers to
	DeferringEnvironmentId int `pulumi:"deferringEnvironmentId"`
	// ID of the job this job defers to
	DeferringJobId int `pulumi:"deferringJobId"`
	// Long description for the job
	Description string `pulumi:"description"`
	// ID of the environment the job is in
	EnvironmentId int `pulumi:"environmentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Which other job should trigger this job when it finishes, and on which conditions.
	JobCompletionTriggerConditions []GetJobJobCompletionTriggerCondition `pulumi:"jobCompletionTriggerConditions"`
	// ID of the job
	JobId int `pulumi:"jobId"`
	// Given name for the job
	Name string `pulumi:"name"`
	// ID of the project the job is in
	ProjectId int `pulumi:"projectId"`
	// Whether this job defers on a previous run of itself (overrides value in deferring*job*id)
	SelfDeferring bool `pulumi:"selfDeferring"`
	// Number of seconds before the job times out
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
	// Flags for which types of triggers to use, keys of github*webhook, git*provider*webhook, schedule, custom*branch_only
	Triggers map[string]bool `pulumi:"triggers"`
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr bool `pulumi:"triggersOnDraftPr"`
}

func LookupJobOutput(ctx *pulumi.Context, args LookupJobOutputArgs, opts ...pulumi.InvokeOption) LookupJobResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupJobResult, error) {
			args := v.(LookupJobArgs)
			r, err := LookupJob(ctx, &args, opts...)
			var s LookupJobResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupJobResultOutput)
}

// A collection of arguments for invoking getJob.
type LookupJobOutputArgs struct {
	// ID of the job
	JobId pulumi.IntInput `pulumi:"jobId"`
	// ID of the project the job is in
	ProjectId pulumi.IntInput `pulumi:"projectId"`
}

func (LookupJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobArgs)(nil)).Elem()
}

// A collection of values returned by getJob.
type LookupJobResultOutput struct{ *pulumi.OutputState }

func (LookupJobResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobResult)(nil)).Elem()
}

func (o LookupJobResultOutput) ToLookupJobResultOutput() LookupJobResultOutput {
	return o
}

func (o LookupJobResultOutput) ToLookupJobResultOutputWithContext(ctx context.Context) LookupJobResultOutput {
	return o
}

// ID of the environment this job defers to
func (o LookupJobResultOutput) DeferringEnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.DeferringEnvironmentId }).(pulumi.IntOutput)
}

// ID of the job this job defers to
func (o LookupJobResultOutput) DeferringJobId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.DeferringJobId }).(pulumi.IntOutput)
}

// Long description for the job
func (o LookupJobResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the environment the job is in
func (o LookupJobResultOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.EnvironmentId }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupJobResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.Id }).(pulumi.StringOutput)
}

// Which other job should trigger this job when it finishes, and on which conditions.
func (o LookupJobResultOutput) JobCompletionTriggerConditions() GetJobJobCompletionTriggerConditionArrayOutput {
	return o.ApplyT(func(v LookupJobResult) []GetJobJobCompletionTriggerCondition { return v.JobCompletionTriggerConditions }).(GetJobJobCompletionTriggerConditionArrayOutput)
}

// ID of the job
func (o LookupJobResultOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.JobId }).(pulumi.IntOutput)
}

// Given name for the job
func (o LookupJobResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.Name }).(pulumi.StringOutput)
}

// ID of the project the job is in
func (o LookupJobResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

// Whether this job defers on a previous run of itself (overrides value in deferring*job*id)
func (o LookupJobResultOutput) SelfDeferring() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupJobResult) bool { return v.SelfDeferring }).(pulumi.BoolOutput)
}

// Number of seconds before the job times out
func (o LookupJobResultOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupJobResult) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

// Flags for which types of triggers to use, keys of github*webhook, git*provider*webhook, schedule, custom*branch_only
func (o LookupJobResultOutput) Triggers() pulumi.BoolMapOutput {
	return o.ApplyT(func(v LookupJobResult) map[string]bool { return v.Triggers }).(pulumi.BoolMapOutput)
}

// Whether the CI job should be automatically triggered on draft PRs
func (o LookupJobResultOutput) TriggersOnDraftPr() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupJobResult) bool { return v.TriggersOnDraftPr }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupJobResultOutput{})
}

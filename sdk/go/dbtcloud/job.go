// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > As of October 2023, CI improvements have been rolled out to dbt Cloud with minor impacts to some jobs:  [more info](https://docs.getdbt.com/docs/dbt-versions/release-notes/june-2023/ci-updates-phase1-rn).
// <br/>
// <br/>
// Those improvements include modifications to deferral which was historically set at the job level and will now be set at the environment level.
// Deferral can still be set to "self" by setting `selfDeferring` to `true` but with the new approach, deferral to other runs need to be done with `deferringEnvironmentId` instead of `deferringJobId`.
//
// > As of beginning of February 2024, job chaining with `jobCompletionTriggerCondition` is in private beta and not available to all users.
// <br/>
// <br/>
// This notice will be removed once the feature is generally available.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dailyJob, err := dbtcloud.NewJob(ctx, "dailyJob", &dbtcloud.JobArgs{
//				EnvironmentId: pulumi.Any(dbtcloud_environment.Prod_environment.Environment_id),
//				ExecuteSteps: pulumi.StringArray{
//					pulumi.String("dbt build"),
//				},
//				GenerateDocs:       pulumi.Bool(true),
//				IsActive:           pulumi.Bool(true),
//				NumThreads:         pulumi.Int(64),
//				ProjectId:          pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				RunGenerateSources: pulumi.Bool(true),
//				TargetName:         pulumi.String("default"),
//				Triggers: pulumi.BoolMap{
//					"custom_branch_only":   pulumi.Bool(false),
//					"github_webhook":       pulumi.Bool(false),
//					"git_provider_webhook": pulumi.Bool(false),
//					"schedule":             pulumi.Bool(true),
//				},
//				ScheduleDays: pulumi.IntArray{
//					pulumi.Int(0),
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//					pulumi.Int(4),
//					pulumi.Int(5),
//					pulumi.Int(6),
//				},
//				ScheduleType: pulumi.String("days_of_week"),
//				ScheduleHours: pulumi.IntArray{
//					pulumi.Int(0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dbtcloud.NewJob(ctx, "ciJob", &dbtcloud.JobArgs{
//				EnvironmentId: pulumi.Any(dbtcloud_environment.Ci_environment.Environment_id),
//				ExecuteSteps: pulumi.StringArray{
//					pulumi.String("dbt build -s state:modified+ --fail-fast"),
//				},
//				GenerateDocs:           pulumi.Bool(false),
//				DeferringEnvironmentId: pulumi.Any(dbtcloud_environment.Prod_environment.Environment_id),
//				NumThreads:             pulumi.Int(32),
//				ProjectId:              pulumi.Any(dbtcloud_project.Dbt_project.Id),
//				RunGenerateSources:     pulumi.Bool(false),
//				Triggers: pulumi.BoolMap{
//					"custom_branch_only":   pulumi.Bool(true),
//					"github_webhook":       pulumi.Bool(true),
//					"git_provider_webhook": pulumi.Bool(true),
//					"schedule":             pulumi.Bool(false),
//				},
//				ScheduleDays: pulumi.IntArray{
//					pulumi.Int(0),
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//					pulumi.Int(4),
//					pulumi.Int(5),
//					pulumi.Int(6),
//				},
//				ScheduleType: pulumi.String("days_of_week"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dbtcloud.NewJob(ctx, "downstreamJob", &dbtcloud.JobArgs{
//				EnvironmentId: pulumi.Any(dbtcloud_environment.Project2_prod_environment.Environment_id),
//				ExecuteSteps: pulumi.StringArray{
//					pulumi.String("dbt build -s +my_model"),
//				},
//				GenerateDocs:       pulumi.Bool(true),
//				NumThreads:         pulumi.Int(32),
//				ProjectId:          pulumi.Any(dbtcloud_project.Dbt_project2.Id),
//				RunGenerateSources: pulumi.Bool(true),
//				Triggers: pulumi.BoolMap{
//					"custom_branch_only":   pulumi.Bool(false),
//					"github_webhook":       pulumi.Bool(false),
//					"git_provider_webhook": pulumi.Bool(false),
//					"schedule":             pulumi.Bool(false),
//				},
//				ScheduleDays: pulumi.IntArray{
//					pulumi.Int(0),
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//					pulumi.Int(4),
//					pulumi.Int(5),
//					pulumi.Int(6),
//				},
//				ScheduleType: pulumi.String("days_of_week"),
//				JobCompletionTriggerCondition: &dbtcloud.JobJobCompletionTriggerConditionArgs{
//					JobId:     dailyJob.ID(),
//					ProjectId: pulumi.Any(dbtcloud_project.Dbt_project.Id),
//					Statuses: pulumi.StringArray{
//						pulumi.String("success"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import using a job ID found in the URL or via the API.
//
// ```sh
//
//	$ pulumi import dbtcloud:index/job:Job test_job "job_id"
//
// ```
//
// ```sh
//
//	$ pulumi import dbtcloud:index/job:Job test_job 12345
//
// ```
type Job struct {
	pulumi.CustomResourceState

	// Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
	DbtVersion pulumi.StringPtrOutput `pulumi:"dbtVersion"`
	// Environment identifier that this job defers to (new deferring approach)
	DeferringEnvironmentId pulumi.IntPtrOutput `pulumi:"deferringEnvironmentId"`
	// Job identifier that this job defers to (legacy deferring approach)
	DeferringJobId pulumi.IntPtrOutput `pulumi:"deferringJobId"`
	// Description for the job
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Environment ID to create the job in
	EnvironmentId pulumi.IntOutput `pulumi:"environmentId"`
	// List of commands to execute for the job
	ExecuteSteps pulumi.StringArrayOutput `pulumi:"executeSteps"`
	// Flag for whether the job should generate documentation
	GenerateDocs pulumi.BoolPtrOutput `pulumi:"generateDocs"`
	// Flag for whether the job is marked active or deleted. To create/keep a job in a 'deactivated' state, check  the `triggers` config.
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
	JobCompletionTriggerCondition JobJobCompletionTriggerConditionPtrOutput `pulumi:"jobCompletionTriggerCondition"`
	// Job name
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of threads to use in the job
	NumThreads pulumi.IntPtrOutput `pulumi:"numThreads"`
	// The ID of the project where the trigger job is running in.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
	RunGenerateSources pulumi.BoolPtrOutput `pulumi:"runGenerateSources"`
	// Custom cron expression for schedule
	ScheduleCron pulumi.StringPtrOutput `pulumi:"scheduleCron"`
	// List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
	ScheduleDays pulumi.IntArrayOutput `pulumi:"scheduleDays"`
	// List of hours to execute the job at if running on a schedule
	ScheduleHours pulumi.IntArrayOutput `pulumi:"scheduleHours"`
	// Number of hours between job executions if running on a schedule
	ScheduleInterval pulumi.IntPtrOutput `pulumi:"scheduleInterval"`
	// Type of schedule to use, one of every*day/ days*of*week/ custom*cron
	ScheduleType pulumi.StringPtrOutput `pulumi:"scheduleType"`
	// Whether this job defers on a previous run of itself
	SelfDeferring pulumi.BoolPtrOutput `pulumi:"selfDeferring"`
	// Target name for the dbt profile
	TargetName pulumi.StringPtrOutput `pulumi:"targetName"`
	// Number of seconds to allow the job to run before timing out
	TimeoutSeconds pulumi.IntPtrOutput `pulumi:"timeoutSeconds"`
	// Flags for which types of triggers to use, possible values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `customBranchOnly`. \n\n`customBranchOnly` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment. To create a job in a 'deactivated' state, set all to `false`.
	Triggers pulumi.BoolMapOutput `pulumi:"triggers"`
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr pulumi.BoolPtrOutput `pulumi:"triggersOnDraftPr"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.ExecuteSteps == nil {
		return nil, errors.New("invalid value for required argument 'ExecuteSteps'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Triggers == nil {
		return nil, errors.New("invalid value for required argument 'Triggers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Job
	err := ctx.RegisterResource("dbtcloud:index/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("dbtcloud:index/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
	DbtVersion *string `pulumi:"dbtVersion"`
	// Environment identifier that this job defers to (new deferring approach)
	DeferringEnvironmentId *int `pulumi:"deferringEnvironmentId"`
	// Job identifier that this job defers to (legacy deferring approach)
	DeferringJobId *int `pulumi:"deferringJobId"`
	// Description for the job
	Description *string `pulumi:"description"`
	// Environment ID to create the job in
	EnvironmentId *int `pulumi:"environmentId"`
	// List of commands to execute for the job
	ExecuteSteps []string `pulumi:"executeSteps"`
	// Flag for whether the job should generate documentation
	GenerateDocs *bool `pulumi:"generateDocs"`
	// Flag for whether the job is marked active or deleted. To create/keep a job in a 'deactivated' state, check  the `triggers` config.
	IsActive *bool `pulumi:"isActive"`
	// Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
	JobCompletionTriggerCondition *JobJobCompletionTriggerCondition `pulumi:"jobCompletionTriggerCondition"`
	// Job name
	Name *string `pulumi:"name"`
	// Number of threads to use in the job
	NumThreads *int `pulumi:"numThreads"`
	// The ID of the project where the trigger job is running in.
	ProjectId *int `pulumi:"projectId"`
	// Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
	RunGenerateSources *bool `pulumi:"runGenerateSources"`
	// Custom cron expression for schedule
	ScheduleCron *string `pulumi:"scheduleCron"`
	// List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
	ScheduleDays []int `pulumi:"scheduleDays"`
	// List of hours to execute the job at if running on a schedule
	ScheduleHours []int `pulumi:"scheduleHours"`
	// Number of hours between job executions if running on a schedule
	ScheduleInterval *int `pulumi:"scheduleInterval"`
	// Type of schedule to use, one of every*day/ days*of*week/ custom*cron
	ScheduleType *string `pulumi:"scheduleType"`
	// Whether this job defers on a previous run of itself
	SelfDeferring *bool `pulumi:"selfDeferring"`
	// Target name for the dbt profile
	TargetName *string `pulumi:"targetName"`
	// Number of seconds to allow the job to run before timing out
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// Flags for which types of triggers to use, possible values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `customBranchOnly`. \n\n`customBranchOnly` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment. To create a job in a 'deactivated' state, set all to `false`.
	Triggers map[string]bool `pulumi:"triggers"`
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr *bool `pulumi:"triggersOnDraftPr"`
}

type JobState struct {
	// Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
	DbtVersion pulumi.StringPtrInput
	// Environment identifier that this job defers to (new deferring approach)
	DeferringEnvironmentId pulumi.IntPtrInput
	// Job identifier that this job defers to (legacy deferring approach)
	DeferringJobId pulumi.IntPtrInput
	// Description for the job
	Description pulumi.StringPtrInput
	// Environment ID to create the job in
	EnvironmentId pulumi.IntPtrInput
	// List of commands to execute for the job
	ExecuteSteps pulumi.StringArrayInput
	// Flag for whether the job should generate documentation
	GenerateDocs pulumi.BoolPtrInput
	// Flag for whether the job is marked active or deleted. To create/keep a job in a 'deactivated' state, check  the `triggers` config.
	IsActive pulumi.BoolPtrInput
	// Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
	JobCompletionTriggerCondition JobJobCompletionTriggerConditionPtrInput
	// Job name
	Name pulumi.StringPtrInput
	// Number of threads to use in the job
	NumThreads pulumi.IntPtrInput
	// The ID of the project where the trigger job is running in.
	ProjectId pulumi.IntPtrInput
	// Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
	RunGenerateSources pulumi.BoolPtrInput
	// Custom cron expression for schedule
	ScheduleCron pulumi.StringPtrInput
	// List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
	ScheduleDays pulumi.IntArrayInput
	// List of hours to execute the job at if running on a schedule
	ScheduleHours pulumi.IntArrayInput
	// Number of hours between job executions if running on a schedule
	ScheduleInterval pulumi.IntPtrInput
	// Type of schedule to use, one of every*day/ days*of*week/ custom*cron
	ScheduleType pulumi.StringPtrInput
	// Whether this job defers on a previous run of itself
	SelfDeferring pulumi.BoolPtrInput
	// Target name for the dbt profile
	TargetName pulumi.StringPtrInput
	// Number of seconds to allow the job to run before timing out
	TimeoutSeconds pulumi.IntPtrInput
	// Flags for which types of triggers to use, possible values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `customBranchOnly`. \n\n`customBranchOnly` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment. To create a job in a 'deactivated' state, set all to `false`.
	Triggers pulumi.BoolMapInput
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr pulumi.BoolPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
	DbtVersion *string `pulumi:"dbtVersion"`
	// Environment identifier that this job defers to (new deferring approach)
	DeferringEnvironmentId *int `pulumi:"deferringEnvironmentId"`
	// Job identifier that this job defers to (legacy deferring approach)
	DeferringJobId *int `pulumi:"deferringJobId"`
	// Description for the job
	Description *string `pulumi:"description"`
	// Environment ID to create the job in
	EnvironmentId int `pulumi:"environmentId"`
	// List of commands to execute for the job
	ExecuteSteps []string `pulumi:"executeSteps"`
	// Flag for whether the job should generate documentation
	GenerateDocs *bool `pulumi:"generateDocs"`
	// Flag for whether the job is marked active or deleted. To create/keep a job in a 'deactivated' state, check  the `triggers` config.
	IsActive *bool `pulumi:"isActive"`
	// Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
	JobCompletionTriggerCondition *JobJobCompletionTriggerCondition `pulumi:"jobCompletionTriggerCondition"`
	// Job name
	Name *string `pulumi:"name"`
	// Number of threads to use in the job
	NumThreads *int `pulumi:"numThreads"`
	// The ID of the project where the trigger job is running in.
	ProjectId int `pulumi:"projectId"`
	// Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
	RunGenerateSources *bool `pulumi:"runGenerateSources"`
	// Custom cron expression for schedule
	ScheduleCron *string `pulumi:"scheduleCron"`
	// List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
	ScheduleDays []int `pulumi:"scheduleDays"`
	// List of hours to execute the job at if running on a schedule
	ScheduleHours []int `pulumi:"scheduleHours"`
	// Number of hours between job executions if running on a schedule
	ScheduleInterval *int `pulumi:"scheduleInterval"`
	// Type of schedule to use, one of every*day/ days*of*week/ custom*cron
	ScheduleType *string `pulumi:"scheduleType"`
	// Whether this job defers on a previous run of itself
	SelfDeferring *bool `pulumi:"selfDeferring"`
	// Target name for the dbt profile
	TargetName *string `pulumi:"targetName"`
	// Number of seconds to allow the job to run before timing out
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// Flags for which types of triggers to use, possible values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `customBranchOnly`. \n\n`customBranchOnly` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment. To create a job in a 'deactivated' state, set all to `false`.
	Triggers map[string]bool `pulumi:"triggers"`
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr *bool `pulumi:"triggersOnDraftPr"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
	DbtVersion pulumi.StringPtrInput
	// Environment identifier that this job defers to (new deferring approach)
	DeferringEnvironmentId pulumi.IntPtrInput
	// Job identifier that this job defers to (legacy deferring approach)
	DeferringJobId pulumi.IntPtrInput
	// Description for the job
	Description pulumi.StringPtrInput
	// Environment ID to create the job in
	EnvironmentId pulumi.IntInput
	// List of commands to execute for the job
	ExecuteSteps pulumi.StringArrayInput
	// Flag for whether the job should generate documentation
	GenerateDocs pulumi.BoolPtrInput
	// Flag for whether the job is marked active or deleted. To create/keep a job in a 'deactivated' state, check  the `triggers` config.
	IsActive pulumi.BoolPtrInput
	// Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
	JobCompletionTriggerCondition JobJobCompletionTriggerConditionPtrInput
	// Job name
	Name pulumi.StringPtrInput
	// Number of threads to use in the job
	NumThreads pulumi.IntPtrInput
	// The ID of the project where the trigger job is running in.
	ProjectId pulumi.IntInput
	// Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
	RunGenerateSources pulumi.BoolPtrInput
	// Custom cron expression for schedule
	ScheduleCron pulumi.StringPtrInput
	// List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
	ScheduleDays pulumi.IntArrayInput
	// List of hours to execute the job at if running on a schedule
	ScheduleHours pulumi.IntArrayInput
	// Number of hours between job executions if running on a schedule
	ScheduleInterval pulumi.IntPtrInput
	// Type of schedule to use, one of every*day/ days*of*week/ custom*cron
	ScheduleType pulumi.StringPtrInput
	// Whether this job defers on a previous run of itself
	SelfDeferring pulumi.BoolPtrInput
	// Target name for the dbt profile
	TargetName pulumi.StringPtrInput
	// Number of seconds to allow the job to run before timing out
	TimeoutSeconds pulumi.IntPtrInput
	// Flags for which types of triggers to use, possible values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `customBranchOnly`. \n\n`customBranchOnly` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment. To create a job in a 'deactivated' state, set all to `false`.
	Triggers pulumi.BoolMapInput
	// Whether the CI job should be automatically triggered on draft PRs
	TriggersOnDraftPr pulumi.BoolPtrInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//	JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//	JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions
func (o JobOutput) DbtVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.DbtVersion }).(pulumi.StringPtrOutput)
}

// Environment identifier that this job defers to (new deferring approach)
func (o JobOutput) DeferringEnvironmentId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.DeferringEnvironmentId }).(pulumi.IntPtrOutput)
}

// Job identifier that this job defers to (legacy deferring approach)
func (o JobOutput) DeferringJobId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.DeferringJobId }).(pulumi.IntPtrOutput)
}

// Description for the job
func (o JobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment ID to create the job in
func (o JobOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v *Job) pulumi.IntOutput { return v.EnvironmentId }).(pulumi.IntOutput)
}

// List of commands to execute for the job
func (o JobOutput) ExecuteSteps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Job) pulumi.StringArrayOutput { return v.ExecuteSteps }).(pulumi.StringArrayOutput)
}

// Flag for whether the job should generate documentation
func (o JobOutput) GenerateDocs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.GenerateDocs }).(pulumi.BoolPtrOutput)
}

// Flag for whether the job is marked active or deleted. To create/keep a job in a 'deactivated' state, check  the `triggers` config.
func (o JobOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Which other job should trigger this job when it finishes, and on which conditions (sometimes referred as 'job chaining').
func (o JobOutput) JobCompletionTriggerCondition() JobJobCompletionTriggerConditionPtrOutput {
	return o.ApplyT(func(v *Job) JobJobCompletionTriggerConditionPtrOutput { return v.JobCompletionTriggerCondition }).(JobJobCompletionTriggerConditionPtrOutput)
}

// Job name
func (o JobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of threads to use in the job
func (o JobOutput) NumThreads() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.NumThreads }).(pulumi.IntPtrOutput)
}

// The ID of the project where the trigger job is running in.
func (o JobOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *Job) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Flag for whether the job should add a `dbt source freshness` step to the job. The difference between manually adding a step with `dbt source freshness` in the job steps or using this flag is that with this flag, a failed freshness will still allow the following steps to run.
func (o JobOutput) RunGenerateSources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.RunGenerateSources }).(pulumi.BoolPtrOutput)
}

// Custom cron expression for schedule
func (o JobOutput) ScheduleCron() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.ScheduleCron }).(pulumi.StringPtrOutput)
}

// List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule
func (o JobOutput) ScheduleDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Job) pulumi.IntArrayOutput { return v.ScheduleDays }).(pulumi.IntArrayOutput)
}

// List of hours to execute the job at if running on a schedule
func (o JobOutput) ScheduleHours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Job) pulumi.IntArrayOutput { return v.ScheduleHours }).(pulumi.IntArrayOutput)
}

// Number of hours between job executions if running on a schedule
func (o JobOutput) ScheduleInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.ScheduleInterval }).(pulumi.IntPtrOutput)
}

// Type of schedule to use, one of every*day/ days*of*week/ custom*cron
func (o JobOutput) ScheduleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.ScheduleType }).(pulumi.StringPtrOutput)
}

// Whether this job defers on a previous run of itself
func (o JobOutput) SelfDeferring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.SelfDeferring }).(pulumi.BoolPtrOutput)
}

// Target name for the dbt profile
func (o JobOutput) TargetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.TargetName }).(pulumi.StringPtrOutput)
}

// Number of seconds to allow the job to run before timing out
func (o JobOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.IntPtrOutput { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

// Flags for which types of triggers to use, possible values are `githubWebhook`, `gitProviderWebhook`, `schedule` and `customBranchOnly`. \n\n`customBranchOnly` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment. To create a job in a 'deactivated' state, set all to `false`.
func (o JobOutput) Triggers() pulumi.BoolMapOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolMapOutput { return v.Triggers }).(pulumi.BoolMapOutput)
}

// Whether the CI job should be automatically triggered on draft PRs
func (o JobOutput) TriggersOnDraftPr() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.TriggersOnDraftPr }).(pulumi.BoolPtrOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Job {
		return vs[0].([]*Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Job {
		return vs[0].(map[string]*Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMapInput)(nil)).Elem(), JobMap{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}

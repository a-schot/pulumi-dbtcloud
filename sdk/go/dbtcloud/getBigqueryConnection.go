// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupBigqueryConnection(ctx *pulumi.Context, args *LookupBigqueryConnectionArgs, opts ...pulumi.InvokeOption) (*LookupBigqueryConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBigqueryConnectionResult
	err := ctx.Invoke("dbtcloud:index/getBigqueryConnection:getBigqueryConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBigqueryConnection.
type LookupBigqueryConnectionArgs struct {
	// Connection Identifier
	ConnectionId int `pulumi:"connectionId"`
	// Project ID to create the connection in
	ProjectId int `pulumi:"projectId"`
}

// A collection of values returned by getBigqueryConnection.
type LookupBigqueryConnectionResult struct {
	// Auth Provider X509 Cert URL for the Service Account
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth URI for the Service Account
	AuthUri string `pulumi:"authUri"`
	// Service Account email
	ClientEmail string `pulumi:"clientEmail"`
	// Client ID of the Service Account
	ClientId string `pulumi:"clientId"`
	// Client X509 Cert URL for the Service Account
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// Connection Identifier
	ConnectionId int `pulumi:"connectionId"`
	// Dataproc cluster name for PySpark workloads
	DataprocClusterName string `pulumi:"dataprocClusterName"`
	// Google Cloud region for PySpark workloads on Dataproc
	DataprocRegion string `pulumi:"dataprocRegion"`
	// Project to bill for query execution
	ExecutionProject string `pulumi:"executionProject"`
	// GCP project ID
	GcpProjectId string `pulumi:"gcpProjectId"`
	// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
	GcsBucket string `pulumi:"gcsBucket"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the connection is active
	IsActive bool `pulumi:"isActive"`
	// Whether the connection is configured for OAuth or not
	IsConfiguredForOauth bool `pulumi:"isConfiguredForOauth"`
	// Location to create new Datasets in
	Location string `pulumi:"location"`
	// Max number of bytes that can be billed for a given BigQuery query
	MaximumBytesBilled int `pulumi:"maximumBytesBilled"`
	// Connection name
	Name string `pulumi:"name"`
	// The priority with which to execute BigQuery queries
	Priority string `pulumi:"priority"`
	// Private key of the Service Account
	PrivateKey string `pulumi:"privateKey"`
	// Private key ID of the Service Account
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Project ID to create the connection in
	ProjectId int `pulumi:"projectId"`
	// Number of retries for queries
	Retries int `pulumi:"retries"`
	// Timeout in seconds for queries
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
	// Token URI for the Service Account
	TokenUri string `pulumi:"tokenUri"`
	// The type of connection
	Type string `pulumi:"type"`
}

func LookupBigqueryConnectionOutput(ctx *pulumi.Context, args LookupBigqueryConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupBigqueryConnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBigqueryConnectionResult, error) {
			args := v.(LookupBigqueryConnectionArgs)
			r, err := LookupBigqueryConnection(ctx, &args, opts...)
			var s LookupBigqueryConnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBigqueryConnectionResultOutput)
}

// A collection of arguments for invoking getBigqueryConnection.
type LookupBigqueryConnectionOutputArgs struct {
	// Connection Identifier
	ConnectionId pulumi.IntInput `pulumi:"connectionId"`
	// Project ID to create the connection in
	ProjectId pulumi.IntInput `pulumi:"projectId"`
}

func (LookupBigqueryConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBigqueryConnectionArgs)(nil)).Elem()
}

// A collection of values returned by getBigqueryConnection.
type LookupBigqueryConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupBigqueryConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBigqueryConnectionResult)(nil)).Elem()
}

func (o LookupBigqueryConnectionResultOutput) ToLookupBigqueryConnectionResultOutput() LookupBigqueryConnectionResultOutput {
	return o
}

func (o LookupBigqueryConnectionResultOutput) ToLookupBigqueryConnectionResultOutputWithContext(ctx context.Context) LookupBigqueryConnectionResultOutput {
	return o
}

// Auth Provider X509 Cert URL for the Service Account
func (o LookupBigqueryConnectionResultOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Auth URI for the Service Account
func (o LookupBigqueryConnectionResultOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.AuthUri }).(pulumi.StringOutput)
}

// Service Account email
func (o LookupBigqueryConnectionResultOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client ID of the Service Account
func (o LookupBigqueryConnectionResultOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client X509 Cert URL for the Service Account
func (o LookupBigqueryConnectionResultOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// Connection Identifier
func (o LookupBigqueryConnectionResultOutput) ConnectionId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) int { return v.ConnectionId }).(pulumi.IntOutput)
}

// Dataproc cluster name for PySpark workloads
func (o LookupBigqueryConnectionResultOutput) DataprocClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.DataprocClusterName }).(pulumi.StringOutput)
}

// Google Cloud region for PySpark workloads on Dataproc
func (o LookupBigqueryConnectionResultOutput) DataprocRegion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.DataprocRegion }).(pulumi.StringOutput)
}

// Project to bill for query execution
func (o LookupBigqueryConnectionResultOutput) ExecutionProject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.ExecutionProject }).(pulumi.StringOutput)
}

// GCP project ID
func (o LookupBigqueryConnectionResultOutput) GcpProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.GcpProjectId }).(pulumi.StringOutput)
}

// URI for a Google Cloud Storage bucket to host Python code executed via Datapro
func (o LookupBigqueryConnectionResultOutput) GcsBucket() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.GcsBucket }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBigqueryConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the connection is active
func (o LookupBigqueryConnectionResultOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) bool { return v.IsActive }).(pulumi.BoolOutput)
}

// Whether the connection is configured for OAuth or not
func (o LookupBigqueryConnectionResultOutput) IsConfiguredForOauth() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) bool { return v.IsConfiguredForOauth }).(pulumi.BoolOutput)
}

// Location to create new Datasets in
func (o LookupBigqueryConnectionResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.Location }).(pulumi.StringOutput)
}

// Max number of bytes that can be billed for a given BigQuery query
func (o LookupBigqueryConnectionResultOutput) MaximumBytesBilled() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) int { return v.MaximumBytesBilled }).(pulumi.IntOutput)
}

// Connection name
func (o LookupBigqueryConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The priority with which to execute BigQuery queries
func (o LookupBigqueryConnectionResultOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.Priority }).(pulumi.StringOutput)
}

// Private key of the Service Account
func (o LookupBigqueryConnectionResultOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private key ID of the Service Account
func (o LookupBigqueryConnectionResultOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Project ID to create the connection in
func (o LookupBigqueryConnectionResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

// Number of retries for queries
func (o LookupBigqueryConnectionResultOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) int { return v.Retries }).(pulumi.IntOutput)
}

// Timeout in seconds for queries
func (o LookupBigqueryConnectionResultOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

// Token URI for the Service Account
func (o LookupBigqueryConnectionResultOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.TokenUri }).(pulumi.StringOutput)
}

// The type of connection
func (o LookupBigqueryConnectionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBigqueryConnectionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBigqueryConnectionResultOutput{})
}

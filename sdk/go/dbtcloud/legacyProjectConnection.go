// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource
type LegacyProjectConnection struct {
	pulumi.CustomResourceState

	// Connection ID
	ConnectionId pulumi.IntOutput `pulumi:"connectionId"`
	// Project ID
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
}

// NewLegacyProjectConnection registers a new resource with the given unique name, arguments, and options.
func NewLegacyProjectConnection(ctx *pulumi.Context,
	name string, args *LegacyProjectConnectionArgs, opts ...pulumi.ResourceOption) (*LegacyProjectConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyProjectConnection
	err := ctx.RegisterResource("dbtcloud:index/legacyProjectConnection:LegacyProjectConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyProjectConnection gets an existing LegacyProjectConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyProjectConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyProjectConnectionState, opts ...pulumi.ResourceOption) (*LegacyProjectConnection, error) {
	var resource LegacyProjectConnection
	err := ctx.ReadResource("dbtcloud:index/legacyProjectConnection:LegacyProjectConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyProjectConnection resources.
type legacyProjectConnectionState struct {
	// Connection ID
	ConnectionId *int `pulumi:"connectionId"`
	// Project ID
	ProjectId *int `pulumi:"projectId"`
}

type LegacyProjectConnectionState struct {
	// Connection ID
	ConnectionId pulumi.IntPtrInput
	// Project ID
	ProjectId pulumi.IntPtrInput
}

func (LegacyProjectConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyProjectConnectionState)(nil)).Elem()
}

type legacyProjectConnectionArgs struct {
	// Connection ID
	ConnectionId int `pulumi:"connectionId"`
	// Project ID
	ProjectId int `pulumi:"projectId"`
}

// The set of arguments for constructing a LegacyProjectConnection resource.
type LegacyProjectConnectionArgs struct {
	// Connection ID
	ConnectionId pulumi.IntInput
	// Project ID
	ProjectId pulumi.IntInput
}

func (LegacyProjectConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyProjectConnectionArgs)(nil)).Elem()
}

type LegacyProjectConnectionInput interface {
	pulumi.Input

	ToLegacyProjectConnectionOutput() LegacyProjectConnectionOutput
	ToLegacyProjectConnectionOutputWithContext(ctx context.Context) LegacyProjectConnectionOutput
}

func (*LegacyProjectConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyProjectConnection)(nil)).Elem()
}

func (i *LegacyProjectConnection) ToLegacyProjectConnectionOutput() LegacyProjectConnectionOutput {
	return i.ToLegacyProjectConnectionOutputWithContext(context.Background())
}

func (i *LegacyProjectConnection) ToLegacyProjectConnectionOutputWithContext(ctx context.Context) LegacyProjectConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectConnectionOutput)
}

// LegacyProjectConnectionArrayInput is an input type that accepts LegacyProjectConnectionArray and LegacyProjectConnectionArrayOutput values.
// You can construct a concrete instance of `LegacyProjectConnectionArrayInput` via:
//
//	LegacyProjectConnectionArray{ LegacyProjectConnectionArgs{...} }
type LegacyProjectConnectionArrayInput interface {
	pulumi.Input

	ToLegacyProjectConnectionArrayOutput() LegacyProjectConnectionArrayOutput
	ToLegacyProjectConnectionArrayOutputWithContext(context.Context) LegacyProjectConnectionArrayOutput
}

type LegacyProjectConnectionArray []LegacyProjectConnectionInput

func (LegacyProjectConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyProjectConnection)(nil)).Elem()
}

func (i LegacyProjectConnectionArray) ToLegacyProjectConnectionArrayOutput() LegacyProjectConnectionArrayOutput {
	return i.ToLegacyProjectConnectionArrayOutputWithContext(context.Background())
}

func (i LegacyProjectConnectionArray) ToLegacyProjectConnectionArrayOutputWithContext(ctx context.Context) LegacyProjectConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectConnectionArrayOutput)
}

// LegacyProjectConnectionMapInput is an input type that accepts LegacyProjectConnectionMap and LegacyProjectConnectionMapOutput values.
// You can construct a concrete instance of `LegacyProjectConnectionMapInput` via:
//
//	LegacyProjectConnectionMap{ "key": LegacyProjectConnectionArgs{...} }
type LegacyProjectConnectionMapInput interface {
	pulumi.Input

	ToLegacyProjectConnectionMapOutput() LegacyProjectConnectionMapOutput
	ToLegacyProjectConnectionMapOutputWithContext(context.Context) LegacyProjectConnectionMapOutput
}

type LegacyProjectConnectionMap map[string]LegacyProjectConnectionInput

func (LegacyProjectConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyProjectConnection)(nil)).Elem()
}

func (i LegacyProjectConnectionMap) ToLegacyProjectConnectionMapOutput() LegacyProjectConnectionMapOutput {
	return i.ToLegacyProjectConnectionMapOutputWithContext(context.Background())
}

func (i LegacyProjectConnectionMap) ToLegacyProjectConnectionMapOutputWithContext(ctx context.Context) LegacyProjectConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyProjectConnectionMapOutput)
}

type LegacyProjectConnectionOutput struct{ *pulumi.OutputState }

func (LegacyProjectConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyProjectConnection)(nil)).Elem()
}

func (o LegacyProjectConnectionOutput) ToLegacyProjectConnectionOutput() LegacyProjectConnectionOutput {
	return o
}

func (o LegacyProjectConnectionOutput) ToLegacyProjectConnectionOutputWithContext(ctx context.Context) LegacyProjectConnectionOutput {
	return o
}

// Connection ID
func (o LegacyProjectConnectionOutput) ConnectionId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyProjectConnection) pulumi.IntOutput { return v.ConnectionId }).(pulumi.IntOutput)
}

// Project ID
func (o LegacyProjectConnectionOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyProjectConnection) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

type LegacyProjectConnectionArrayOutput struct{ *pulumi.OutputState }

func (LegacyProjectConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyProjectConnection)(nil)).Elem()
}

func (o LegacyProjectConnectionArrayOutput) ToLegacyProjectConnectionArrayOutput() LegacyProjectConnectionArrayOutput {
	return o
}

func (o LegacyProjectConnectionArrayOutput) ToLegacyProjectConnectionArrayOutputWithContext(ctx context.Context) LegacyProjectConnectionArrayOutput {
	return o
}

func (o LegacyProjectConnectionArrayOutput) Index(i pulumi.IntInput) LegacyProjectConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyProjectConnection {
		return vs[0].([]*LegacyProjectConnection)[vs[1].(int)]
	}).(LegacyProjectConnectionOutput)
}

type LegacyProjectConnectionMapOutput struct{ *pulumi.OutputState }

func (LegacyProjectConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyProjectConnection)(nil)).Elem()
}

func (o LegacyProjectConnectionMapOutput) ToLegacyProjectConnectionMapOutput() LegacyProjectConnectionMapOutput {
	return o
}

func (o LegacyProjectConnectionMapOutput) ToLegacyProjectConnectionMapOutputWithContext(ctx context.Context) LegacyProjectConnectionMapOutput {
	return o
}

func (o LegacyProjectConnectionMapOutput) MapIndex(k pulumi.StringInput) LegacyProjectConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyProjectConnection {
		return vs[0].(map[string]*LegacyProjectConnection)[vs[1].(string)]
	}).(LegacyProjectConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectConnectionInput)(nil)).Elem(), &LegacyProjectConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectConnectionArrayInput)(nil)).Elem(), LegacyProjectConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyProjectConnectionMapInput)(nil)).Elem(), LegacyProjectConnectionMap{})
	pulumi.RegisterOutputType(LegacyProjectConnectionOutput{})
	pulumi.RegisterOutputType(LegacyProjectConnectionArrayOutput{})
	pulumi.RegisterOutputType(LegacyProjectConnectionMapOutput{})
}

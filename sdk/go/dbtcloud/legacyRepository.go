// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource
type LegacyRepository struct {
	pulumi.CustomResourceState

	// The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_project` and the project name - (for ADO native integration only)
	AzureActiveDirectoryProjectId pulumi.StringPtrOutput `pulumi:"azureActiveDirectoryProjectId"`
	// The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_repository` along with the ADO Project ID and the repository name - (for ADO native integration
	// only)
	AzureActiveDirectoryRepositoryId pulumi.StringPtrOutput `pulumi:"azureActiveDirectoryRepositoryId"`
	// If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks
	// (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will
	// be triggered - (for ADO native integration only)
	AzureBypassWebhookRegistrationFailure pulumi.BoolPtrOutput `pulumi:"azureBypassWebhookRegistrationFailure"`
	// Public key generated by dbt when using `deploy_key` clone strategy
	DeployKey pulumi.StringOutput `pulumi:"deployKey"`
	// Whether we should return the public deploy key - (for the `deploy_key` strategy)
	FetchDeployKey pulumi.BoolPtrOutput `pulumi:"fetchDeployKey"`
	// Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for
	// GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO
	// native integration
	GitCloneStrategy pulumi.StringPtrOutput `pulumi:"gitCloneStrategy"`
	// Identifier for the GitHub App - (for GitHub native integration only)
	GithubInstallationId pulumi.IntPtrOutput `pulumi:"githubInstallationId"`
	// Identifier for the Gitlab project - (for GitLab native integration only)
	GitlabProjectId pulumi.IntPtrOutput `pulumi:"gitlabProjectId"`
	// Whether the repository is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Project ID to create the repository in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Git URL for the repository or \<Group>/\<Project> for Gitlab
	RemoteUrl pulumi.StringOutput `pulumi:"remoteUrl"`
	// Credentials ID for the repository (From the repository side not the dbt Cloud ID)
	RepositoryCredentialsId pulumi.IntOutput `pulumi:"repositoryCredentialsId"`
	// Repository Identifier
	RepositoryId pulumi.IntOutput `pulumi:"repositoryId"`
}

// NewLegacyRepository registers a new resource with the given unique name, arguments, and options.
func NewLegacyRepository(ctx *pulumi.Context,
	name string, args *LegacyRepositoryArgs, opts ...pulumi.ResourceOption) (*LegacyRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RemoteUrl == nil {
		return nil, errors.New("invalid value for required argument 'RemoteUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LegacyRepository
	err := ctx.RegisterResource("dbtcloud:index/legacyRepository:LegacyRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLegacyRepository gets an existing LegacyRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLegacyRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LegacyRepositoryState, opts ...pulumi.ResourceOption) (*LegacyRepository, error) {
	var resource LegacyRepository
	err := ctx.ReadResource("dbtcloud:index/legacyRepository:LegacyRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LegacyRepository resources.
type legacyRepositoryState struct {
	// The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_project` and the project name - (for ADO native integration only)
	AzureActiveDirectoryProjectId *string `pulumi:"azureActiveDirectoryProjectId"`
	// The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_repository` along with the ADO Project ID and the repository name - (for ADO native integration
	// only)
	AzureActiveDirectoryRepositoryId *string `pulumi:"azureActiveDirectoryRepositoryId"`
	// If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks
	// (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will
	// be triggered - (for ADO native integration only)
	AzureBypassWebhookRegistrationFailure *bool `pulumi:"azureBypassWebhookRegistrationFailure"`
	// Public key generated by dbt when using `deploy_key` clone strategy
	DeployKey *string `pulumi:"deployKey"`
	// Whether we should return the public deploy key - (for the `deploy_key` strategy)
	FetchDeployKey *bool `pulumi:"fetchDeployKey"`
	// Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for
	// GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO
	// native integration
	GitCloneStrategy *string `pulumi:"gitCloneStrategy"`
	// Identifier for the GitHub App - (for GitHub native integration only)
	GithubInstallationId *int `pulumi:"githubInstallationId"`
	// Identifier for the Gitlab project - (for GitLab native integration only)
	GitlabProjectId *int `pulumi:"gitlabProjectId"`
	// Whether the repository is active
	IsActive *bool `pulumi:"isActive"`
	// Project ID to create the repository in
	ProjectId *int `pulumi:"projectId"`
	// Git URL for the repository or \<Group>/\<Project> for Gitlab
	RemoteUrl *string `pulumi:"remoteUrl"`
	// Credentials ID for the repository (From the repository side not the dbt Cloud ID)
	RepositoryCredentialsId *int `pulumi:"repositoryCredentialsId"`
	// Repository Identifier
	RepositoryId *int `pulumi:"repositoryId"`
}

type LegacyRepositoryState struct {
	// The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_project` and the project name - (for ADO native integration only)
	AzureActiveDirectoryProjectId pulumi.StringPtrInput
	// The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_repository` along with the ADO Project ID and the repository name - (for ADO native integration
	// only)
	AzureActiveDirectoryRepositoryId pulumi.StringPtrInput
	// If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks
	// (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will
	// be triggered - (for ADO native integration only)
	AzureBypassWebhookRegistrationFailure pulumi.BoolPtrInput
	// Public key generated by dbt when using `deploy_key` clone strategy
	DeployKey pulumi.StringPtrInput
	// Whether we should return the public deploy key - (for the `deploy_key` strategy)
	FetchDeployKey pulumi.BoolPtrInput
	// Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for
	// GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO
	// native integration
	GitCloneStrategy pulumi.StringPtrInput
	// Identifier for the GitHub App - (for GitHub native integration only)
	GithubInstallationId pulumi.IntPtrInput
	// Identifier for the Gitlab project - (for GitLab native integration only)
	GitlabProjectId pulumi.IntPtrInput
	// Whether the repository is active
	IsActive pulumi.BoolPtrInput
	// Project ID to create the repository in
	ProjectId pulumi.IntPtrInput
	// Git URL for the repository or \<Group>/\<Project> for Gitlab
	RemoteUrl pulumi.StringPtrInput
	// Credentials ID for the repository (From the repository side not the dbt Cloud ID)
	RepositoryCredentialsId pulumi.IntPtrInput
	// Repository Identifier
	RepositoryId pulumi.IntPtrInput
}

func (LegacyRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyRepositoryState)(nil)).Elem()
}

type legacyRepositoryArgs struct {
	// The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_project` and the project name - (for ADO native integration only)
	AzureActiveDirectoryProjectId *string `pulumi:"azureActiveDirectoryProjectId"`
	// The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_repository` along with the ADO Project ID and the repository name - (for ADO native integration
	// only)
	AzureActiveDirectoryRepositoryId *string `pulumi:"azureActiveDirectoryRepositoryId"`
	// If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks
	// (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will
	// be triggered - (for ADO native integration only)
	AzureBypassWebhookRegistrationFailure *bool `pulumi:"azureBypassWebhookRegistrationFailure"`
	// Whether we should return the public deploy key - (for the `deploy_key` strategy)
	FetchDeployKey *bool `pulumi:"fetchDeployKey"`
	// Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for
	// GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO
	// native integration
	GitCloneStrategy *string `pulumi:"gitCloneStrategy"`
	// Identifier for the GitHub App - (for GitHub native integration only)
	GithubInstallationId *int `pulumi:"githubInstallationId"`
	// Identifier for the Gitlab project - (for GitLab native integration only)
	GitlabProjectId *int `pulumi:"gitlabProjectId"`
	// Whether the repository is active
	IsActive *bool `pulumi:"isActive"`
	// Project ID to create the repository in
	ProjectId int `pulumi:"projectId"`
	// Git URL for the repository or \<Group>/\<Project> for Gitlab
	RemoteUrl string `pulumi:"remoteUrl"`
}

// The set of arguments for constructing a LegacyRepository resource.
type LegacyRepositoryArgs struct {
	// The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_project` and the project name - (for ADO native integration only)
	AzureActiveDirectoryProjectId pulumi.StringPtrInput
	// The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source
	// `dbtcloud_azure_dev_ops_repository` along with the ADO Project ID and the repository name - (for ADO native integration
	// only)
	AzureActiveDirectoryRepositoryId pulumi.StringPtrInput
	// If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks
	// (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will
	// be triggered - (for ADO native integration only)
	AzureBypassWebhookRegistrationFailure pulumi.BoolPtrInput
	// Whether we should return the public deploy key - (for the `deploy_key` strategy)
	FetchDeployKey pulumi.BoolPtrInput
	// Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for
	// GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO
	// native integration
	GitCloneStrategy pulumi.StringPtrInput
	// Identifier for the GitHub App - (for GitHub native integration only)
	GithubInstallationId pulumi.IntPtrInput
	// Identifier for the Gitlab project - (for GitLab native integration only)
	GitlabProjectId pulumi.IntPtrInput
	// Whether the repository is active
	IsActive pulumi.BoolPtrInput
	// Project ID to create the repository in
	ProjectId pulumi.IntInput
	// Git URL for the repository or \<Group>/\<Project> for Gitlab
	RemoteUrl pulumi.StringInput
}

func (LegacyRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*legacyRepositoryArgs)(nil)).Elem()
}

type LegacyRepositoryInput interface {
	pulumi.Input

	ToLegacyRepositoryOutput() LegacyRepositoryOutput
	ToLegacyRepositoryOutputWithContext(ctx context.Context) LegacyRepositoryOutput
}

func (*LegacyRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyRepository)(nil)).Elem()
}

func (i *LegacyRepository) ToLegacyRepositoryOutput() LegacyRepositoryOutput {
	return i.ToLegacyRepositoryOutputWithContext(context.Background())
}

func (i *LegacyRepository) ToLegacyRepositoryOutputWithContext(ctx context.Context) LegacyRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyRepositoryOutput)
}

// LegacyRepositoryArrayInput is an input type that accepts LegacyRepositoryArray and LegacyRepositoryArrayOutput values.
// You can construct a concrete instance of `LegacyRepositoryArrayInput` via:
//
//	LegacyRepositoryArray{ LegacyRepositoryArgs{...} }
type LegacyRepositoryArrayInput interface {
	pulumi.Input

	ToLegacyRepositoryArrayOutput() LegacyRepositoryArrayOutput
	ToLegacyRepositoryArrayOutputWithContext(context.Context) LegacyRepositoryArrayOutput
}

type LegacyRepositoryArray []LegacyRepositoryInput

func (LegacyRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyRepository)(nil)).Elem()
}

func (i LegacyRepositoryArray) ToLegacyRepositoryArrayOutput() LegacyRepositoryArrayOutput {
	return i.ToLegacyRepositoryArrayOutputWithContext(context.Background())
}

func (i LegacyRepositoryArray) ToLegacyRepositoryArrayOutputWithContext(ctx context.Context) LegacyRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyRepositoryArrayOutput)
}

// LegacyRepositoryMapInput is an input type that accepts LegacyRepositoryMap and LegacyRepositoryMapOutput values.
// You can construct a concrete instance of `LegacyRepositoryMapInput` via:
//
//	LegacyRepositoryMap{ "key": LegacyRepositoryArgs{...} }
type LegacyRepositoryMapInput interface {
	pulumi.Input

	ToLegacyRepositoryMapOutput() LegacyRepositoryMapOutput
	ToLegacyRepositoryMapOutputWithContext(context.Context) LegacyRepositoryMapOutput
}

type LegacyRepositoryMap map[string]LegacyRepositoryInput

func (LegacyRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyRepository)(nil)).Elem()
}

func (i LegacyRepositoryMap) ToLegacyRepositoryMapOutput() LegacyRepositoryMapOutput {
	return i.ToLegacyRepositoryMapOutputWithContext(context.Background())
}

func (i LegacyRepositoryMap) ToLegacyRepositoryMapOutputWithContext(ctx context.Context) LegacyRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyRepositoryMapOutput)
}

type LegacyRepositoryOutput struct{ *pulumi.OutputState }

func (LegacyRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyRepository)(nil)).Elem()
}

func (o LegacyRepositoryOutput) ToLegacyRepositoryOutput() LegacyRepositoryOutput {
	return o
}

func (o LegacyRepositoryOutput) ToLegacyRepositoryOutputWithContext(ctx context.Context) LegacyRepositoryOutput {
	return o
}

// The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source
// `dbtcloud_azure_dev_ops_project` and the project name - (for ADO native integration only)
func (o LegacyRepositoryOutput) AzureActiveDirectoryProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.StringPtrOutput { return v.AzureActiveDirectoryProjectId }).(pulumi.StringPtrOutput)
}

// The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source
// `dbtcloud_azure_dev_ops_repository` along with the ADO Project ID and the repository name - (for ADO native integration
// only)
func (o LegacyRepositoryOutput) AzureActiveDirectoryRepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.StringPtrOutput { return v.AzureActiveDirectoryRepositoryId }).(pulumi.StringPtrOutput)
}

// If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks
// (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will
// be triggered - (for ADO native integration only)
func (o LegacyRepositoryOutput) AzureBypassWebhookRegistrationFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.BoolPtrOutput { return v.AzureBypassWebhookRegistrationFailure }).(pulumi.BoolPtrOutput)
}

// Public key generated by dbt when using `deploy_key` clone strategy
func (o LegacyRepositoryOutput) DeployKey() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.StringOutput { return v.DeployKey }).(pulumi.StringOutput)
}

// Whether we should return the public deploy key - (for the `deploy_key` strategy)
func (o LegacyRepositoryOutput) FetchDeployKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.BoolPtrOutput { return v.FetchDeployKey }).(pulumi.BoolPtrOutput)
}

// Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for
// GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO
// native integration
func (o LegacyRepositoryOutput) GitCloneStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.StringPtrOutput { return v.GitCloneStrategy }).(pulumi.StringPtrOutput)
}

// Identifier for the GitHub App - (for GitHub native integration only)
func (o LegacyRepositoryOutput) GithubInstallationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.IntPtrOutput { return v.GithubInstallationId }).(pulumi.IntPtrOutput)
}

// Identifier for the Gitlab project - (for GitLab native integration only)
func (o LegacyRepositoryOutput) GitlabProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.IntPtrOutput { return v.GitlabProjectId }).(pulumi.IntPtrOutput)
}

// Whether the repository is active
func (o LegacyRepositoryOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Project ID to create the repository in
func (o LegacyRepositoryOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Git URL for the repository or \<Group>/\<Project> for Gitlab
func (o LegacyRepositoryOutput) RemoteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.StringOutput { return v.RemoteUrl }).(pulumi.StringOutput)
}

// Credentials ID for the repository (From the repository side not the dbt Cloud ID)
func (o LegacyRepositoryOutput) RepositoryCredentialsId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.IntOutput { return v.RepositoryCredentialsId }).(pulumi.IntOutput)
}

// Repository Identifier
func (o LegacyRepositoryOutput) RepositoryId() pulumi.IntOutput {
	return o.ApplyT(func(v *LegacyRepository) pulumi.IntOutput { return v.RepositoryId }).(pulumi.IntOutput)
}

type LegacyRepositoryArrayOutput struct{ *pulumi.OutputState }

func (LegacyRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LegacyRepository)(nil)).Elem()
}

func (o LegacyRepositoryArrayOutput) ToLegacyRepositoryArrayOutput() LegacyRepositoryArrayOutput {
	return o
}

func (o LegacyRepositoryArrayOutput) ToLegacyRepositoryArrayOutputWithContext(ctx context.Context) LegacyRepositoryArrayOutput {
	return o
}

func (o LegacyRepositoryArrayOutput) Index(i pulumi.IntInput) LegacyRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LegacyRepository {
		return vs[0].([]*LegacyRepository)[vs[1].(int)]
	}).(LegacyRepositoryOutput)
}

type LegacyRepositoryMapOutput struct{ *pulumi.OutputState }

func (LegacyRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LegacyRepository)(nil)).Elem()
}

func (o LegacyRepositoryMapOutput) ToLegacyRepositoryMapOutput() LegacyRepositoryMapOutput {
	return o
}

func (o LegacyRepositoryMapOutput) ToLegacyRepositoryMapOutputWithContext(ctx context.Context) LegacyRepositoryMapOutput {
	return o
}

func (o LegacyRepositoryMapOutput) MapIndex(k pulumi.StringInput) LegacyRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LegacyRepository {
		return vs[0].(map[string]*LegacyRepository)[vs[1].(string)]
	}).(LegacyRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyRepositoryInput)(nil)).Elem(), &LegacyRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyRepositoryArrayInput)(nil)).Elem(), LegacyRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyRepositoryMapInput)(nil)).Elem(), LegacyRepositoryMap{})
	pulumi.RegisterOutputType(LegacyRepositoryOutput{})
	pulumi.RegisterOutputType(LegacyRepositoryArrayOutput{})
	pulumi.RegisterOutputType(LegacyRepositoryMapOutput{})
}

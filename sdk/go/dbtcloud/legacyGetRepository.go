// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource
func LegacyGetRepository(ctx *pulumi.Context, args *LegacyGetRepositoryArgs, opts ...pulumi.InvokeOption) (*LegacyGetRepositoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LegacyGetRepositoryResult
	err := ctx.Invoke("dbtcloud:index/legacyGetRepository:LegacyGetRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking LegacyGetRepository.
type LegacyGetRepositoryArgs struct {
	FetchDeployKey *bool `pulumi:"fetchDeployKey"`
	ProjectId      int   `pulumi:"projectId"`
	RepositoryId   int   `pulumi:"repositoryId"`
}

// A collection of values returned by LegacyGetRepository.
type LegacyGetRepositoryResult struct {
	DeployKey            string `pulumi:"deployKey"`
	FetchDeployKey       *bool  `pulumi:"fetchDeployKey"`
	GitCloneStrategy     string `pulumi:"gitCloneStrategy"`
	GithubInstallationId int    `pulumi:"githubInstallationId"`
	GitlabProjectId      int    `pulumi:"gitlabProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id                      string `pulumi:"id"`
	IsActive                bool   `pulumi:"isActive"`
	ProjectId               int    `pulumi:"projectId"`
	RemoteUrl               string `pulumi:"remoteUrl"`
	RepositoryCredentialsId int    `pulumi:"repositoryCredentialsId"`
	RepositoryId            int    `pulumi:"repositoryId"`
}

func LegacyGetRepositoryOutput(ctx *pulumi.Context, args LegacyGetRepositoryOutputArgs, opts ...pulumi.InvokeOption) LegacyGetRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LegacyGetRepositoryResult, error) {
			args := v.(LegacyGetRepositoryArgs)
			r, err := LegacyGetRepository(ctx, &args, opts...)
			var s LegacyGetRepositoryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LegacyGetRepositoryResultOutput)
}

// A collection of arguments for invoking LegacyGetRepository.
type LegacyGetRepositoryOutputArgs struct {
	FetchDeployKey pulumi.BoolPtrInput `pulumi:"fetchDeployKey"`
	ProjectId      pulumi.IntInput     `pulumi:"projectId"`
	RepositoryId   pulumi.IntInput     `pulumi:"repositoryId"`
}

func (LegacyGetRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyGetRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by LegacyGetRepository.
type LegacyGetRepositoryResultOutput struct{ *pulumi.OutputState }

func (LegacyGetRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyGetRepositoryResult)(nil)).Elem()
}

func (o LegacyGetRepositoryResultOutput) ToLegacyGetRepositoryResultOutput() LegacyGetRepositoryResultOutput {
	return o
}

func (o LegacyGetRepositoryResultOutput) ToLegacyGetRepositoryResultOutputWithContext(ctx context.Context) LegacyGetRepositoryResultOutput {
	return o
}

func (o LegacyGetRepositoryResultOutput) DeployKey() pulumi.StringOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) string { return v.DeployKey }).(pulumi.StringOutput)
}

func (o LegacyGetRepositoryResultOutput) FetchDeployKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) *bool { return v.FetchDeployKey }).(pulumi.BoolPtrOutput)
}

func (o LegacyGetRepositoryResultOutput) GitCloneStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) string { return v.GitCloneStrategy }).(pulumi.StringOutput)
}

func (o LegacyGetRepositoryResultOutput) GithubInstallationId() pulumi.IntOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) int { return v.GithubInstallationId }).(pulumi.IntOutput)
}

func (o LegacyGetRepositoryResultOutput) GitlabProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) int { return v.GitlabProjectId }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LegacyGetRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LegacyGetRepositoryResultOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) bool { return v.IsActive }).(pulumi.BoolOutput)
}

func (o LegacyGetRepositoryResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

func (o LegacyGetRepositoryResultOutput) RemoteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) string { return v.RemoteUrl }).(pulumi.StringOutput)
}

func (o LegacyGetRepositoryResultOutput) RepositoryCredentialsId() pulumi.IntOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) int { return v.RepositoryCredentialsId }).(pulumi.IntOutput)
}

func (o LegacyGetRepositoryResultOutput) RepositoryId() pulumi.IntOutput {
	return o.ApplyT(func(v LegacyGetRepositoryResult) int { return v.RepositoryId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LegacyGetRepositoryResultOutput{})
}

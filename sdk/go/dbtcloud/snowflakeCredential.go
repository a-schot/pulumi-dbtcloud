// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// NOTE for customers using the LEGACY dbt_cloud provider:
//			_, err := dbtcloud.NewSnowflakeCredential(ctx, "prodCredential", &dbtcloud.SnowflakeCredentialArgs{
//				ProjectId:  pulumi.Any(data.Dbtcloud_project.Dbt_project.Id),
//				AuthType:   pulumi.String("password"),
//				NumThreads: pulumi.Int(16),
//				Schema:     pulumi.String("SCHEMA"),
//				User:       pulumi.String("user"),
//				Password:   pulumi.String("password"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import using a project ID and credential ID found in the URL or via the API.
//
// ```sh
// $ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential "project_id:credential_id"
// ```
//
// ```sh
// $ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential 12345:6789
// ```
type SnowflakeCredential struct {
	pulumi.CustomResourceState

	// The type of Snowflake credential ('password' or 'keypair')
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// The system Snowflake credential ID
	CredentialId pulumi.IntOutput `pulumi:"credentialId"`
	// Database to connect to
	Database pulumi.StringPtrOutput `pulumi:"database"`
	// Whether the Snowflake credential is active
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// Number of threads to use
	NumThreads pulumi.IntOutput `pulumi:"numThreads"`
	// Password for Snowflake
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Private key for Snowflake
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase pulumi.StringPtrOutput `pulumi:"privateKeyPassphrase"`
	// Project ID to create the Snowflake credential in
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Role to assume
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Default schema name
	Schema pulumi.StringOutput `pulumi:"schema"`
	// Username for Snowflake
	User pulumi.StringOutput `pulumi:"user"`
	// Warehouse to use
	Warehouse pulumi.StringPtrOutput `pulumi:"warehouse"`
}

// NewSnowflakeCredential registers a new resource with the given unique name, arguments, and options.
func NewSnowflakeCredential(ctx *pulumi.Context,
	name string, args *SnowflakeCredentialArgs, opts ...pulumi.ResourceOption) (*SnowflakeCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthType == nil {
		return nil, errors.New("invalid value for required argument 'AuthType'")
	}
	if args.NumThreads == nil {
		return nil, errors.New("invalid value for required argument 'NumThreads'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	if args.PrivateKeyPassphrase != nil {
		args.PrivateKeyPassphrase = pulumi.ToSecret(args.PrivateKeyPassphrase).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"privateKey",
		"privateKeyPassphrase",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnowflakeCredential
	err := ctx.RegisterResource("dbtcloud:index/snowflakeCredential:SnowflakeCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnowflakeCredential gets an existing SnowflakeCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnowflakeCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnowflakeCredentialState, opts ...pulumi.ResourceOption) (*SnowflakeCredential, error) {
	var resource SnowflakeCredential
	err := ctx.ReadResource("dbtcloud:index/snowflakeCredential:SnowflakeCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnowflakeCredential resources.
type snowflakeCredentialState struct {
	// The type of Snowflake credential ('password' or 'keypair')
	AuthType *string `pulumi:"authType"`
	// The system Snowflake credential ID
	CredentialId *int `pulumi:"credentialId"`
	// Database to connect to
	Database *string `pulumi:"database"`
	// Whether the Snowflake credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads *int `pulumi:"numThreads"`
	// Password for Snowflake
	Password *string `pulumi:"password"`
	// Private key for Snowflake
	PrivateKey *string `pulumi:"privateKey"`
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase *string `pulumi:"privateKeyPassphrase"`
	// Project ID to create the Snowflake credential in
	ProjectId *int `pulumi:"projectId"`
	// Role to assume
	Role *string `pulumi:"role"`
	// Default schema name
	Schema *string `pulumi:"schema"`
	// Username for Snowflake
	User *string `pulumi:"user"`
	// Warehouse to use
	Warehouse *string `pulumi:"warehouse"`
}

type SnowflakeCredentialState struct {
	// The type of Snowflake credential ('password' or 'keypair')
	AuthType pulumi.StringPtrInput
	// The system Snowflake credential ID
	CredentialId pulumi.IntPtrInput
	// Database to connect to
	Database pulumi.StringPtrInput
	// Whether the Snowflake credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntPtrInput
	// Password for Snowflake
	Password pulumi.StringPtrInput
	// Private key for Snowflake
	PrivateKey pulumi.StringPtrInput
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase pulumi.StringPtrInput
	// Project ID to create the Snowflake credential in
	ProjectId pulumi.IntPtrInput
	// Role to assume
	Role pulumi.StringPtrInput
	// Default schema name
	Schema pulumi.StringPtrInput
	// Username for Snowflake
	User pulumi.StringPtrInput
	// Warehouse to use
	Warehouse pulumi.StringPtrInput
}

func (SnowflakeCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*snowflakeCredentialState)(nil)).Elem()
}

type snowflakeCredentialArgs struct {
	// The type of Snowflake credential ('password' or 'keypair')
	AuthType string `pulumi:"authType"`
	// Database to connect to
	Database *string `pulumi:"database"`
	// Whether the Snowflake credential is active
	IsActive *bool `pulumi:"isActive"`
	// Number of threads to use
	NumThreads int `pulumi:"numThreads"`
	// Password for Snowflake
	Password *string `pulumi:"password"`
	// Private key for Snowflake
	PrivateKey *string `pulumi:"privateKey"`
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase *string `pulumi:"privateKeyPassphrase"`
	// Project ID to create the Snowflake credential in
	ProjectId int `pulumi:"projectId"`
	// Role to assume
	Role *string `pulumi:"role"`
	// Default schema name
	Schema string `pulumi:"schema"`
	// Username for Snowflake
	User string `pulumi:"user"`
	// Warehouse to use
	Warehouse *string `pulumi:"warehouse"`
}

// The set of arguments for constructing a SnowflakeCredential resource.
type SnowflakeCredentialArgs struct {
	// The type of Snowflake credential ('password' or 'keypair')
	AuthType pulumi.StringInput
	// Database to connect to
	Database pulumi.StringPtrInput
	// Whether the Snowflake credential is active
	IsActive pulumi.BoolPtrInput
	// Number of threads to use
	NumThreads pulumi.IntInput
	// Password for Snowflake
	Password pulumi.StringPtrInput
	// Private key for Snowflake
	PrivateKey pulumi.StringPtrInput
	// Private key passphrase for Snowflake
	PrivateKeyPassphrase pulumi.StringPtrInput
	// Project ID to create the Snowflake credential in
	ProjectId pulumi.IntInput
	// Role to assume
	Role pulumi.StringPtrInput
	// Default schema name
	Schema pulumi.StringInput
	// Username for Snowflake
	User pulumi.StringInput
	// Warehouse to use
	Warehouse pulumi.StringPtrInput
}

func (SnowflakeCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snowflakeCredentialArgs)(nil)).Elem()
}

type SnowflakeCredentialInput interface {
	pulumi.Input

	ToSnowflakeCredentialOutput() SnowflakeCredentialOutput
	ToSnowflakeCredentialOutputWithContext(ctx context.Context) SnowflakeCredentialOutput
}

func (*SnowflakeCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**SnowflakeCredential)(nil)).Elem()
}

func (i *SnowflakeCredential) ToSnowflakeCredentialOutput() SnowflakeCredentialOutput {
	return i.ToSnowflakeCredentialOutputWithContext(context.Background())
}

func (i *SnowflakeCredential) ToSnowflakeCredentialOutputWithContext(ctx context.Context) SnowflakeCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeCredentialOutput)
}

// SnowflakeCredentialArrayInput is an input type that accepts SnowflakeCredentialArray and SnowflakeCredentialArrayOutput values.
// You can construct a concrete instance of `SnowflakeCredentialArrayInput` via:
//
//	SnowflakeCredentialArray{ SnowflakeCredentialArgs{...} }
type SnowflakeCredentialArrayInput interface {
	pulumi.Input

	ToSnowflakeCredentialArrayOutput() SnowflakeCredentialArrayOutput
	ToSnowflakeCredentialArrayOutputWithContext(context.Context) SnowflakeCredentialArrayOutput
}

type SnowflakeCredentialArray []SnowflakeCredentialInput

func (SnowflakeCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnowflakeCredential)(nil)).Elem()
}

func (i SnowflakeCredentialArray) ToSnowflakeCredentialArrayOutput() SnowflakeCredentialArrayOutput {
	return i.ToSnowflakeCredentialArrayOutputWithContext(context.Background())
}

func (i SnowflakeCredentialArray) ToSnowflakeCredentialArrayOutputWithContext(ctx context.Context) SnowflakeCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeCredentialArrayOutput)
}

// SnowflakeCredentialMapInput is an input type that accepts SnowflakeCredentialMap and SnowflakeCredentialMapOutput values.
// You can construct a concrete instance of `SnowflakeCredentialMapInput` via:
//
//	SnowflakeCredentialMap{ "key": SnowflakeCredentialArgs{...} }
type SnowflakeCredentialMapInput interface {
	pulumi.Input

	ToSnowflakeCredentialMapOutput() SnowflakeCredentialMapOutput
	ToSnowflakeCredentialMapOutputWithContext(context.Context) SnowflakeCredentialMapOutput
}

type SnowflakeCredentialMap map[string]SnowflakeCredentialInput

func (SnowflakeCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnowflakeCredential)(nil)).Elem()
}

func (i SnowflakeCredentialMap) ToSnowflakeCredentialMapOutput() SnowflakeCredentialMapOutput {
	return i.ToSnowflakeCredentialMapOutputWithContext(context.Background())
}

func (i SnowflakeCredentialMap) ToSnowflakeCredentialMapOutputWithContext(ctx context.Context) SnowflakeCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeCredentialMapOutput)
}

type SnowflakeCredentialOutput struct{ *pulumi.OutputState }

func (SnowflakeCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnowflakeCredential)(nil)).Elem()
}

func (o SnowflakeCredentialOutput) ToSnowflakeCredentialOutput() SnowflakeCredentialOutput {
	return o
}

func (o SnowflakeCredentialOutput) ToSnowflakeCredentialOutputWithContext(ctx context.Context) SnowflakeCredentialOutput {
	return o
}

// The type of Snowflake credential ('password' or 'keypair')
func (o SnowflakeCredentialOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// The system Snowflake credential ID
func (o SnowflakeCredentialOutput) CredentialId() pulumi.IntOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.IntOutput { return v.CredentialId }).(pulumi.IntOutput)
}

// Database to connect to
func (o SnowflakeCredentialOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.StringPtrOutput { return v.Database }).(pulumi.StringPtrOutput)
}

// Whether the Snowflake credential is active
func (o SnowflakeCredentialOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Number of threads to use
func (o SnowflakeCredentialOutput) NumThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.IntOutput { return v.NumThreads }).(pulumi.IntOutput)
}

// Password for Snowflake
func (o SnowflakeCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Private key for Snowflake
func (o SnowflakeCredentialOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Private key passphrase for Snowflake
func (o SnowflakeCredentialOutput) PrivateKeyPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.StringPtrOutput { return v.PrivateKeyPassphrase }).(pulumi.StringPtrOutput)
}

// Project ID to create the Snowflake credential in
func (o SnowflakeCredentialOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Role to assume
func (o SnowflakeCredentialOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Default schema name
func (o SnowflakeCredentialOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

// Username for Snowflake
func (o SnowflakeCredentialOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// Warehouse to use
func (o SnowflakeCredentialOutput) Warehouse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnowflakeCredential) pulumi.StringPtrOutput { return v.Warehouse }).(pulumi.StringPtrOutput)
}

type SnowflakeCredentialArrayOutput struct{ *pulumi.OutputState }

func (SnowflakeCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnowflakeCredential)(nil)).Elem()
}

func (o SnowflakeCredentialArrayOutput) ToSnowflakeCredentialArrayOutput() SnowflakeCredentialArrayOutput {
	return o
}

func (o SnowflakeCredentialArrayOutput) ToSnowflakeCredentialArrayOutputWithContext(ctx context.Context) SnowflakeCredentialArrayOutput {
	return o
}

func (o SnowflakeCredentialArrayOutput) Index(i pulumi.IntInput) SnowflakeCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnowflakeCredential {
		return vs[0].([]*SnowflakeCredential)[vs[1].(int)]
	}).(SnowflakeCredentialOutput)
}

type SnowflakeCredentialMapOutput struct{ *pulumi.OutputState }

func (SnowflakeCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnowflakeCredential)(nil)).Elem()
}

func (o SnowflakeCredentialMapOutput) ToSnowflakeCredentialMapOutput() SnowflakeCredentialMapOutput {
	return o
}

func (o SnowflakeCredentialMapOutput) ToSnowflakeCredentialMapOutputWithContext(ctx context.Context) SnowflakeCredentialMapOutput {
	return o
}

func (o SnowflakeCredentialMapOutput) MapIndex(k pulumi.StringInput) SnowflakeCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnowflakeCredential {
		return vs[0].(map[string]*SnowflakeCredential)[vs[1].(string)]
	}).(SnowflakeCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnowflakeCredentialInput)(nil)).Elem(), &SnowflakeCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnowflakeCredentialArrayInput)(nil)).Elem(), SnowflakeCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnowflakeCredentialMapInput)(nil)).Elem(), SnowflakeCredentialMap{})
	pulumi.RegisterOutputType(SnowflakeCredentialOutput{})
	pulumi.RegisterOutputType(SnowflakeCredentialArrayOutput{})
	pulumi.RegisterOutputType(SnowflakeCredentialMapOutput{})
}

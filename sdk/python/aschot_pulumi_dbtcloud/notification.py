# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NotificationArgs', 'Notification']

@pulumi.input_type
class NotificationArgs:
    def __init__(__self__, *,
                 user_id: pulumi.Input[int],
                 external_email: Optional[pulumi.Input[str]] = None,
                 notification_type: Optional[pulumi.Input[int]] = None,
                 on_cancels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 on_failures: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 on_successes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 slack_channel_id: Optional[pulumi.Input[str]] = None,
                 slack_channel_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Notification resource.
        :param pulumi.Input[int] user_id: Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
        :param pulumi.Input[str] external_email: The external email to receive the notification
        :param pulumi.Input[int] notification_type: Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_cancels: List of job IDs to trigger the webhook on cancel
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_failures: List of job IDs to trigger the webhook on failure
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_successes: List of job IDs to trigger the webhook on success
        :param pulumi.Input[str] slack_channel_id: The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
        :param pulumi.Input[str] slack_channel_name: The name of the slack channel
        :param pulumi.Input[int] state: State of the notification (1 = active (default), 2 = inactive)
        """
        pulumi.set(__self__, "user_id", user_id)
        if external_email is not None:
            pulumi.set(__self__, "external_email", external_email)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if on_cancels is not None:
            pulumi.set(__self__, "on_cancels", on_cancels)
        if on_failures is not None:
            pulumi.set(__self__, "on_failures", on_failures)
        if on_successes is not None:
            pulumi.set(__self__, "on_successes", on_successes)
        if slack_channel_id is not None:
            pulumi.set(__self__, "slack_channel_id", slack_channel_id)
        if slack_channel_name is not None:
            pulumi.set(__self__, "slack_channel_name", slack_channel_name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[int]:
        """
        Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="externalEmail")
    def external_email(self) -> Optional[pulumi.Input[str]]:
        """
        The external email to receive the notification
        """
        return pulumi.get(self, "external_email")

    @external_email.setter
    def external_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_email", value)

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[pulumi.Input[int]]:
        """
        Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
        """
        return pulumi.get(self, "notification_type")

    @notification_type.setter
    def notification_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notification_type", value)

    @property
    @pulumi.getter(name="onCancels")
    def on_cancels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of job IDs to trigger the webhook on cancel
        """
        return pulumi.get(self, "on_cancels")

    @on_cancels.setter
    def on_cancels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "on_cancels", value)

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of job IDs to trigger the webhook on failure
        """
        return pulumi.get(self, "on_failures")

    @on_failures.setter
    def on_failures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "on_failures", value)

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of job IDs to trigger the webhook on success
        """
        return pulumi.get(self, "on_successes")

    @on_successes.setter
    def on_successes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "on_successes", value)

    @property
    @pulumi.getter(name="slackChannelId")
    def slack_channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
        """
        return pulumi.get(self, "slack_channel_id")

    @slack_channel_id.setter
    def slack_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_channel_id", value)

    @property
    @pulumi.getter(name="slackChannelName")
    def slack_channel_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the slack channel
        """
        return pulumi.get(self, "slack_channel_name")

    @slack_channel_name.setter
    def slack_channel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_channel_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[int]]:
        """
        State of the notification (1 = active (default), 2 = inactive)
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class _NotificationState:
    def __init__(__self__, *,
                 external_email: Optional[pulumi.Input[str]] = None,
                 notification_type: Optional[pulumi.Input[int]] = None,
                 on_cancels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 on_failures: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 on_successes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 slack_channel_id: Optional[pulumi.Input[str]] = None,
                 slack_channel_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[int]] = None,
                 user_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Notification resources.
        :param pulumi.Input[str] external_email: The external email to receive the notification
        :param pulumi.Input[int] notification_type: Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_cancels: List of job IDs to trigger the webhook on cancel
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_failures: List of job IDs to trigger the webhook on failure
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_successes: List of job IDs to trigger the webhook on success
        :param pulumi.Input[str] slack_channel_id: The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
        :param pulumi.Input[str] slack_channel_name: The name of the slack channel
        :param pulumi.Input[int] state: State of the notification (1 = active (default), 2 = inactive)
        :param pulumi.Input[int] user_id: Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
        """
        if external_email is not None:
            pulumi.set(__self__, "external_email", external_email)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if on_cancels is not None:
            pulumi.set(__self__, "on_cancels", on_cancels)
        if on_failures is not None:
            pulumi.set(__self__, "on_failures", on_failures)
        if on_successes is not None:
            pulumi.set(__self__, "on_successes", on_successes)
        if slack_channel_id is not None:
            pulumi.set(__self__, "slack_channel_id", slack_channel_id)
        if slack_channel_name is not None:
            pulumi.set(__self__, "slack_channel_name", slack_channel_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="externalEmail")
    def external_email(self) -> Optional[pulumi.Input[str]]:
        """
        The external email to receive the notification
        """
        return pulumi.get(self, "external_email")

    @external_email.setter
    def external_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_email", value)

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[pulumi.Input[int]]:
        """
        Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
        """
        return pulumi.get(self, "notification_type")

    @notification_type.setter
    def notification_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notification_type", value)

    @property
    @pulumi.getter(name="onCancels")
    def on_cancels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of job IDs to trigger the webhook on cancel
        """
        return pulumi.get(self, "on_cancels")

    @on_cancels.setter
    def on_cancels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "on_cancels", value)

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of job IDs to trigger the webhook on failure
        """
        return pulumi.get(self, "on_failures")

    @on_failures.setter
    def on_failures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "on_failures", value)

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of job IDs to trigger the webhook on success
        """
        return pulumi.get(self, "on_successes")

    @on_successes.setter
    def on_successes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "on_successes", value)

    @property
    @pulumi.getter(name="slackChannelId")
    def slack_channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
        """
        return pulumi.get(self, "slack_channel_id")

    @slack_channel_id.setter
    def slack_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_channel_id", value)

    @property
    @pulumi.getter(name="slackChannelName")
    def slack_channel_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the slack channel
        """
        return pulumi.get(self, "slack_channel_name")

    @slack_channel_name.setter
    def slack_channel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_channel_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[int]]:
        """
        State of the notification (1 = active (default), 2 = inactive)
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[int]]:
        """
        Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_id", value)


class Notification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 external_email: Optional[pulumi.Input[str]] = None,
                 notification_type: Optional[pulumi.Input[int]] = None,
                 on_cancels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 on_failures: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 on_successes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 slack_channel_id: Optional[pulumi.Input[str]] = None,
                 slack_channel_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[int]] = None,
                 user_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # dbt Cloud allows us to create internal and external notifications
        # an internal notification will send emails to the user mentioned in `user_id`
        #
        # NOTE: If internal notification settings already exist for a user, currently you MUST import
        # those first into the state file before you can create a new internal notification for that user.
        # Failure to do so, will result in the user losing access to existing notifications and dbt
        # support will need to be contacted to restore access.
        # cmd: terraform import dbtcloud_notification.prod_job_internal_notification <user_id>
        prod_job_internal_notification = dbtcloud.Notification("prodJobInternalNotification",
            user_id=100,
            on_successes=[dbtcloud_job["prod_job"]["id"]],
            on_failures=[12345],
            notification_type=1)
        # we can also send "external" email notifications to emails to related to dbt Cloud users
        prod_job_external_notification = dbtcloud.Notification("prodJobExternalNotification",
            user_id=100,
            on_failures=[
                23456,
                56788,
            ],
            on_cancels=[dbtcloud_job["prod_job"]["id"]],
            notification_type=4,
            external_email="my_email@mail.com")
        # and finally, we can set up Slack notifications
        prod_job_slack_notifications = dbtcloud.Notification("prodJobSlackNotifications",
            user_id=100,
            on_failures=[
                23456,
                56788,
            ],
            on_cancels=[dbtcloud_job["prod_job"]["id"]],
            notification_type=2,
            slack_channel_id="C12345ABCDE",
            slack_channel_name="#my-awesome-channel")
        ```

        ## Import

        Import using a notification ID

        ```sh
        $ pulumi import dbtcloud:index/notification:Notification my_notification "notification_id"
        ```

        ```sh
        $ pulumi import dbtcloud:index/notification:Notification my_notification 12345
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] external_email: The external email to receive the notification
        :param pulumi.Input[int] notification_type: Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_cancels: List of job IDs to trigger the webhook on cancel
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_failures: List of job IDs to trigger the webhook on failure
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_successes: List of job IDs to trigger the webhook on success
        :param pulumi.Input[str] slack_channel_id: The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
        :param pulumi.Input[str] slack_channel_name: The name of the slack channel
        :param pulumi.Input[int] state: State of the notification (1 = active (default), 2 = inactive)
        :param pulumi.Input[int] user_id: Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # dbt Cloud allows us to create internal and external notifications
        # an internal notification will send emails to the user mentioned in `user_id`
        #
        # NOTE: If internal notification settings already exist for a user, currently you MUST import
        # those first into the state file before you can create a new internal notification for that user.
        # Failure to do so, will result in the user losing access to existing notifications and dbt
        # support will need to be contacted to restore access.
        # cmd: terraform import dbtcloud_notification.prod_job_internal_notification <user_id>
        prod_job_internal_notification = dbtcloud.Notification("prodJobInternalNotification",
            user_id=100,
            on_successes=[dbtcloud_job["prod_job"]["id"]],
            on_failures=[12345],
            notification_type=1)
        # we can also send "external" email notifications to emails to related to dbt Cloud users
        prod_job_external_notification = dbtcloud.Notification("prodJobExternalNotification",
            user_id=100,
            on_failures=[
                23456,
                56788,
            ],
            on_cancels=[dbtcloud_job["prod_job"]["id"]],
            notification_type=4,
            external_email="my_email@mail.com")
        # and finally, we can set up Slack notifications
        prod_job_slack_notifications = dbtcloud.Notification("prodJobSlackNotifications",
            user_id=100,
            on_failures=[
                23456,
                56788,
            ],
            on_cancels=[dbtcloud_job["prod_job"]["id"]],
            notification_type=2,
            slack_channel_id="C12345ABCDE",
            slack_channel_name="#my-awesome-channel")
        ```

        ## Import

        Import using a notification ID

        ```sh
        $ pulumi import dbtcloud:index/notification:Notification my_notification "notification_id"
        ```

        ```sh
        $ pulumi import dbtcloud:index/notification:Notification my_notification 12345
        ```

        :param str resource_name: The name of the resource.
        :param NotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 external_email: Optional[pulumi.Input[str]] = None,
                 notification_type: Optional[pulumi.Input[int]] = None,
                 on_cancels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 on_failures: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 on_successes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 slack_channel_id: Optional[pulumi.Input[str]] = None,
                 slack_channel_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[int]] = None,
                 user_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotificationArgs.__new__(NotificationArgs)

            __props__.__dict__["external_email"] = external_email
            __props__.__dict__["notification_type"] = notification_type
            __props__.__dict__["on_cancels"] = on_cancels
            __props__.__dict__["on_failures"] = on_failures
            __props__.__dict__["on_successes"] = on_successes
            __props__.__dict__["slack_channel_id"] = slack_channel_id
            __props__.__dict__["slack_channel_name"] = slack_channel_name
            __props__.__dict__["state"] = state
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
        super(Notification, __self__).__init__(
            'dbtcloud:index/notification:Notification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            external_email: Optional[pulumi.Input[str]] = None,
            notification_type: Optional[pulumi.Input[int]] = None,
            on_cancels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            on_failures: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            on_successes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            slack_channel_id: Optional[pulumi.Input[str]] = None,
            slack_channel_name: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[int]] = None,
            user_id: Optional[pulumi.Input[int]] = None) -> 'Notification':
        """
        Get an existing Notification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] external_email: The external email to receive the notification
        :param pulumi.Input[int] notification_type: Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_cancels: List of job IDs to trigger the webhook on cancel
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_failures: List of job IDs to trigger the webhook on failure
        :param pulumi.Input[Sequence[pulumi.Input[int]]] on_successes: List of job IDs to trigger the webhook on success
        :param pulumi.Input[str] slack_channel_id: The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
        :param pulumi.Input[str] slack_channel_name: The name of the slack channel
        :param pulumi.Input[int] state: State of the notification (1 = active (default), 2 = inactive)
        :param pulumi.Input[int] user_id: Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotificationState.__new__(_NotificationState)

        __props__.__dict__["external_email"] = external_email
        __props__.__dict__["notification_type"] = notification_type
        __props__.__dict__["on_cancels"] = on_cancels
        __props__.__dict__["on_failures"] = on_failures
        __props__.__dict__["on_successes"] = on_successes
        __props__.__dict__["slack_channel_id"] = slack_channel_id
        __props__.__dict__["slack_channel_name"] = slack_channel_name
        __props__.__dict__["state"] = state
        __props__.__dict__["user_id"] = user_id
        return Notification(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="externalEmail")
    def external_email(self) -> pulumi.Output[Optional[str]]:
        """
        The external email to receive the notification
        """
        return pulumi.get(self, "external_email")

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> pulumi.Output[Optional[int]]:
        """
        Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)
        """
        return pulumi.get(self, "notification_type")

    @property
    @pulumi.getter(name="onCancels")
    def on_cancels(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of job IDs to trigger the webhook on cancel
        """
        return pulumi.get(self, "on_cancels")

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of job IDs to trigger the webhook on failure
        """
        return pulumi.get(self, "on_failures")

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of job IDs to trigger the webhook on success
        """
        return pulumi.get(self, "on_successes")

    @property
    @pulumi.getter(name="slackChannelId")
    def slack_channel_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings
        """
        return pulumi.get(self, "slack_channel_id")

    @property
    @pulumi.getter(name="slackChannelName")
    def slack_channel_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the slack channel
        """
        return pulumi.get(self, "slack_channel_name")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[int]]:
        """
        State of the notification (1 = active (default), 2 = inactive)
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[int]:
        """
        Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
        """
        return pulumi.get(self, "user_id")


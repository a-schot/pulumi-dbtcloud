# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'LegacyGetDatabricksCredentialResult',
    'AwaitableLegacyGetDatabricksCredentialResult',
    'legacy_get_databricks_credential',
    'legacy_get_databricks_credential_output',
]

warnings.warn("""Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource""", DeprecationWarning)

@pulumi.output_type
class LegacyGetDatabricksCredentialResult:
    """
    A collection of values returned by LegacyGetDatabricksCredential.
    """
    def __init__(__self__, adapter_id=None, catalog=None, credential_id=None, id=None, num_threads=None, project_id=None, schema=None, target_name=None):
        if adapter_id and not isinstance(adapter_id, int):
            raise TypeError("Expected argument 'adapter_id' to be a int")
        pulumi.set(__self__, "adapter_id", adapter_id)
        if catalog and not isinstance(catalog, str):
            raise TypeError("Expected argument 'catalog' to be a str")
        pulumi.set(__self__, "catalog", catalog)
        if credential_id and not isinstance(credential_id, int):
            raise TypeError("Expected argument 'credential_id' to be a int")
        pulumi.set(__self__, "credential_id", credential_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if num_threads and not isinstance(num_threads, int):
            raise TypeError("Expected argument 'num_threads' to be a int")
        pulumi.set(__self__, "num_threads", num_threads)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if target_name and not isinstance(target_name, str):
            raise TypeError("Expected argument 'target_name' to be a str")
        pulumi.set(__self__, "target_name", target_name)

    @property
    @pulumi.getter(name="adapterId")
    def adapter_id(self) -> int:
        return pulumi.get(self, "adapter_id")

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> int:
        return pulumi.get(self, "credential_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="numThreads")
    def num_threads(self) -> int:
        return pulumi.get(self, "num_threads")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> str:
        return pulumi.get(self, "target_name")


class AwaitableLegacyGetDatabricksCredentialResult(LegacyGetDatabricksCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return LegacyGetDatabricksCredentialResult(
            adapter_id=self.adapter_id,
            catalog=self.catalog,
            credential_id=self.credential_id,
            id=self.id,
            num_threads=self.num_threads,
            project_id=self.project_id,
            schema=self.schema,
            target_name=self.target_name)


def legacy_get_databricks_credential(credential_id: Optional[int] = None,
                                     project_id: Optional[int] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableLegacyGetDatabricksCredentialResult:
    """
    Use this data source to access information about an existing resource.
    """
    pulumi.log.warn("""legacy_get_databricks_credential is deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource""")
    __args__ = dict()
    __args__['credentialId'] = credential_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dbtcloud:index/legacyGetDatabricksCredential:LegacyGetDatabricksCredential', __args__, opts=opts, typ=LegacyGetDatabricksCredentialResult).value

    return AwaitableLegacyGetDatabricksCredentialResult(
        adapter_id=pulumi.get(__ret__, 'adapter_id'),
        catalog=pulumi.get(__ret__, 'catalog'),
        credential_id=pulumi.get(__ret__, 'credential_id'),
        id=pulumi.get(__ret__, 'id'),
        num_threads=pulumi.get(__ret__, 'num_threads'),
        project_id=pulumi.get(__ret__, 'project_id'),
        schema=pulumi.get(__ret__, 'schema'),
        target_name=pulumi.get(__ret__, 'target_name'))


@_utilities.lift_output_func(legacy_get_databricks_credential)
def legacy_get_databricks_credential_output(credential_id: Optional[pulumi.Input[int]] = None,
                                            project_id: Optional[pulumi.Input[int]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[LegacyGetDatabricksCredentialResult]:
    """
    Use this data source to access information about an existing resource.
    """
    pulumi.log.warn("""legacy_get_databricks_credential is deprecated: Do not use! This resource is mapped from the legacy Terraform `dbt_cloud_`-prefixed resource/datasource""")
    ...

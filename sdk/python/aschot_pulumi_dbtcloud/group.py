# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 assign_by_default: Optional[pulumi.Input[bool]] = None,
                 group_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['GroupGroupPermissionArgs']]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sso_mapping_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Group resource.
        :param pulumi.Input[bool] assign_by_default: Whether or not to assign this group to users by default
        :param pulumi.Input[bool] is_active: Whether the group is active
        :param pulumi.Input[str] name: Group name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sso_mapping_groups: SSO mapping group names for this group
        """
        if assign_by_default is not None:
            pulumi.set(__self__, "assign_by_default", assign_by_default)
        if group_permissions is not None:
            pulumi.set(__self__, "group_permissions", group_permissions)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sso_mapping_groups is not None:
            pulumi.set(__self__, "sso_mapping_groups", sso_mapping_groups)

    @property
    @pulumi.getter(name="assignByDefault")
    def assign_by_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to assign this group to users by default
        """
        return pulumi.get(self, "assign_by_default")

    @assign_by_default.setter
    def assign_by_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assign_by_default", value)

    @property
    @pulumi.getter(name="groupPermissions")
    def group_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupGroupPermissionArgs']]]]:
        return pulumi.get(self, "group_permissions")

    @group_permissions.setter
    def group_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupGroupPermissionArgs']]]]):
        pulumi.set(self, "group_permissions", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the group is active
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ssoMappingGroups")
    def sso_mapping_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SSO mapping group names for this group
        """
        return pulumi.get(self, "sso_mapping_groups")

    @sso_mapping_groups.setter
    def sso_mapping_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sso_mapping_groups", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 assign_by_default: Optional[pulumi.Input[bool]] = None,
                 group_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['GroupGroupPermissionArgs']]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sso_mapping_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Group resources.
        :param pulumi.Input[bool] assign_by_default: Whether or not to assign this group to users by default
        :param pulumi.Input[bool] is_active: Whether the group is active
        :param pulumi.Input[str] name: Group name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sso_mapping_groups: SSO mapping group names for this group
        """
        if assign_by_default is not None:
            pulumi.set(__self__, "assign_by_default", assign_by_default)
        if group_permissions is not None:
            pulumi.set(__self__, "group_permissions", group_permissions)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sso_mapping_groups is not None:
            pulumi.set(__self__, "sso_mapping_groups", sso_mapping_groups)

    @property
    @pulumi.getter(name="assignByDefault")
    def assign_by_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to assign this group to users by default
        """
        return pulumi.get(self, "assign_by_default")

    @assign_by_default.setter
    def assign_by_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assign_by_default", value)

    @property
    @pulumi.getter(name="groupPermissions")
    def group_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupGroupPermissionArgs']]]]:
        return pulumi.get(self, "group_permissions")

    @group_permissions.setter
    def group_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupGroupPermissionArgs']]]]):
        pulumi.set(self, "group_permissions", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the group is active
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ssoMappingGroups")
    def sso_mapping_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SSO mapping group names for this group
        """
        return pulumi.get(self, "sso_mapping_groups")

    @sso_mapping_groups.setter
    def sso_mapping_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sso_mapping_groups", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assign_by_default: Optional[pulumi.Input[bool]] = None,
                 group_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupGroupPermissionArgs']]]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sso_mapping_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        *Note*: Groups currently do not support updates, as per both the API and the UI.

        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # NOTE for customers using the LEGACY dbt_cloud provider:
        tf_group1 = dbtcloud.Group("tfGroup1", group_permissions=[
            dbtcloud.GroupGroupPermissionArgs(
                permission_set="member",
                all_projects=True,
            ),
            dbtcloud.GroupGroupPermissionArgs(
                permission_set="developer",
                all_projects=False,
                project_id=dbtcloud_project["dbt_project"]["id"],
            ),
        ])
        ```

        ## Import

        Import using a group ID found in the URL or via the API.

        ```sh
        $ pulumi import dbtcloud:index/group:Group test_group "group_id"
        ```

        ```sh
        $ pulumi import dbtcloud:index/group:Group test_group 12345
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] assign_by_default: Whether or not to assign this group to users by default
        :param pulumi.Input[bool] is_active: Whether the group is active
        :param pulumi.Input[str] name: Group name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sso_mapping_groups: SSO mapping group names for this group
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        *Note*: Groups currently do not support updates, as per both the API and the UI.

        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # NOTE for customers using the LEGACY dbt_cloud provider:
        tf_group1 = dbtcloud.Group("tfGroup1", group_permissions=[
            dbtcloud.GroupGroupPermissionArgs(
                permission_set="member",
                all_projects=True,
            ),
            dbtcloud.GroupGroupPermissionArgs(
                permission_set="developer",
                all_projects=False,
                project_id=dbtcloud_project["dbt_project"]["id"],
            ),
        ])
        ```

        ## Import

        Import using a group ID found in the URL or via the API.

        ```sh
        $ pulumi import dbtcloud:index/group:Group test_group "group_id"
        ```

        ```sh
        $ pulumi import dbtcloud:index/group:Group test_group 12345
        ```

        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assign_by_default: Optional[pulumi.Input[bool]] = None,
                 group_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupGroupPermissionArgs']]]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sso_mapping_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            __props__.__dict__["assign_by_default"] = assign_by_default
            __props__.__dict__["group_permissions"] = group_permissions
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["name"] = name
            __props__.__dict__["sso_mapping_groups"] = sso_mapping_groups
        super(Group, __self__).__init__(
            'dbtcloud:index/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assign_by_default: Optional[pulumi.Input[bool]] = None,
            group_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupGroupPermissionArgs']]]]] = None,
            is_active: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            sso_mapping_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] assign_by_default: Whether or not to assign this group to users by default
        :param pulumi.Input[bool] is_active: Whether the group is active
        :param pulumi.Input[str] name: Group name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sso_mapping_groups: SSO mapping group names for this group
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["assign_by_default"] = assign_by_default
        __props__.__dict__["group_permissions"] = group_permissions
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["name"] = name
        __props__.__dict__["sso_mapping_groups"] = sso_mapping_groups
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignByDefault")
    def assign_by_default(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not to assign this group to users by default
        """
        return pulumi.get(self, "assign_by_default")

    @property
    @pulumi.getter(name="groupPermissions")
    def group_permissions(self) -> pulumi.Output[Optional[Sequence['outputs.GroupGroupPermission']]]:
        return pulumi.get(self, "group_permissions")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the group is active
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Group name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ssoMappingGroups")
    def sso_mapping_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        SSO mapping group names for this group
        """
        return pulumi.get(self, "sso_mapping_groups")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ConnectionArgs', 'Connection']

@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 project_id: pulumi.Input[int],
                 type: pulumi.Input[str],
                 account: Optional[pulumi.Input[str]] = None,
                 allow_keep_alive: Optional[pulumi.Input[bool]] = None,
                 allow_sso: Optional[pulumi.Input[bool]] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 http_path: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_client_secret: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tunnel_enabled: Optional[pulumi.Input[bool]] = None,
                 warehouse: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Connection resource.
        :param pulumi.Input[str] database: Database name for the connection
        :param pulumi.Input[int] project_id: Project ID to create the connection in
        :param pulumi.Input[str] type: The type of connection
        :param pulumi.Input[str] account: Account name for the connection
        :param pulumi.Input[bool] allow_keep_alive: Whether or not the connection should allow client session keep alive
        :param pulumi.Input[bool] allow_sso: Whether or not the connection should allow SSO
        :param pulumi.Input[str] catalog: Catalog name if Unity Catalog is enabled in your Databricks workspace
        :param pulumi.Input[str] host_name: Host name for the connection, including Databricks cluster
        :param pulumi.Input[str] http_path: The HTTP path of the Databricks cluster or SQL warehouse
        :param pulumi.Input[bool] is_active: Whether the connection is active
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] oauth_client_id: OAuth client identifier
        :param pulumi.Input[str] oauth_client_secret: OAuth client secret
        :param pulumi.Input[int] port: Port number to connect via
        :param pulumi.Input[str] private_link_endpoint_id: The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
        :param pulumi.Input[str] role: Role name for the connection
        :param pulumi.Input[bool] tunnel_enabled: Whether or not tunneling should be enabled on your database connection
        :param pulumi.Input[str] warehouse: Warehouse name for the connection
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "type", type)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if allow_keep_alive is not None:
            pulumi.set(__self__, "allow_keep_alive", allow_keep_alive)
        if allow_sso is not None:
            pulumi.set(__self__, "allow_sso", allow_sso)
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if http_path is not None:
            pulumi.set(__self__, "http_path", http_path)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_client_id is not None:
            pulumi.set(__self__, "oauth_client_id", oauth_client_id)
        if oauth_client_secret is not None:
            pulumi.set(__self__, "oauth_client_secret", oauth_client_secret)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_link_endpoint_id is not None:
            pulumi.set(__self__, "private_link_endpoint_id", private_link_endpoint_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if tunnel_enabled is not None:
            pulumi.set(__self__, "tunnel_enabled", tunnel_enabled)
        if warehouse is not None:
            pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        Database name for the connection
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[int]:
        """
        Project ID to create the connection in
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of connection
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        """
        Account name for the connection
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="allowKeepAlive")
    def allow_keep_alive(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the connection should allow client session keep alive
        """
        return pulumi.get(self, "allow_keep_alive")

    @allow_keep_alive.setter
    def allow_keep_alive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_keep_alive", value)

    @property
    @pulumi.getter(name="allowSso")
    def allow_sso(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the connection should allow SSO
        """
        return pulumi.get(self, "allow_sso")

    @allow_sso.setter
    def allow_sso(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_sso", value)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog name if Unity Catalog is enabled in your Databricks workspace
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        Host name for the connection, including Databricks cluster
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="httpPath")
    def http_path(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP path of the Databricks cluster or SQL warehouse
        """
        return pulumi.get(self, "http_path")

    @http_path.setter
    def http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_path", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection is active
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthClientId")
    def oauth_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth client identifier
        """
        return pulumi.get(self, "oauth_client_id")

    @oauth_client_id.setter
    def oauth_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_client_id", value)

    @property
    @pulumi.getter(name="oauthClientSecret")
    def oauth_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth client secret
        """
        return pulumi.get(self, "oauth_client_secret")

    @oauth_client_secret.setter
    def oauth_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_client_secret", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number to connect via
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateLinkEndpointId")
    def private_link_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
        """
        return pulumi.get(self, "private_link_endpoint_id")

    @private_link_endpoint_id.setter
    def private_link_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_endpoint_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role name for the connection
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="tunnelEnabled")
    def tunnel_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not tunneling should be enabled on your database connection
        """
        return pulumi.get(self, "tunnel_enabled")

    @tunnel_enabled.setter
    def tunnel_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tunnel_enabled", value)

    @property
    @pulumi.getter
    def warehouse(self) -> Optional[pulumi.Input[str]]:
        """
        Warehouse name for the connection
        """
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warehouse", value)


@pulumi.input_type
class _ConnectionState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input[str]] = None,
                 adapter_id: Optional[pulumi.Input[int]] = None,
                 allow_keep_alive: Optional[pulumi.Input[bool]] = None,
                 allow_sso: Optional[pulumi.Input[bool]] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[int]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 http_path: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_client_secret: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tunnel_enabled: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 warehouse: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Connection resources.
        :param pulumi.Input[str] account: Account name for the connection
        :param pulumi.Input[int] adapter_id: Adapter id created for the Databricks connection
        :param pulumi.Input[bool] allow_keep_alive: Whether or not the connection should allow client session keep alive
        :param pulumi.Input[bool] allow_sso: Whether or not the connection should allow SSO
        :param pulumi.Input[str] catalog: Catalog name if Unity Catalog is enabled in your Databricks workspace
        :param pulumi.Input[int] connection_id: Connection Identifier
        :param pulumi.Input[str] database: Database name for the connection
        :param pulumi.Input[str] host_name: Host name for the connection, including Databricks cluster
        :param pulumi.Input[str] http_path: The HTTP path of the Databricks cluster or SQL warehouse
        :param pulumi.Input[bool] is_active: Whether the connection is active
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] oauth_client_id: OAuth client identifier
        :param pulumi.Input[str] oauth_client_secret: OAuth client secret
        :param pulumi.Input[int] port: Port number to connect via
        :param pulumi.Input[str] private_link_endpoint_id: The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
        :param pulumi.Input[int] project_id: Project ID to create the connection in
        :param pulumi.Input[str] role: Role name for the connection
        :param pulumi.Input[bool] tunnel_enabled: Whether or not tunneling should be enabled on your database connection
        :param pulumi.Input[str] type: The type of connection
        :param pulumi.Input[str] warehouse: Warehouse name for the connection
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if adapter_id is not None:
            pulumi.set(__self__, "adapter_id", adapter_id)
        if allow_keep_alive is not None:
            pulumi.set(__self__, "allow_keep_alive", allow_keep_alive)
        if allow_sso is not None:
            pulumi.set(__self__, "allow_sso", allow_sso)
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if http_path is not None:
            pulumi.set(__self__, "http_path", http_path)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_client_id is not None:
            pulumi.set(__self__, "oauth_client_id", oauth_client_id)
        if oauth_client_secret is not None:
            pulumi.set(__self__, "oauth_client_secret", oauth_client_secret)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_link_endpoint_id is not None:
            pulumi.set(__self__, "private_link_endpoint_id", private_link_endpoint_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if tunnel_enabled is not None:
            pulumi.set(__self__, "tunnel_enabled", tunnel_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if warehouse is not None:
            pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        """
        Account name for the connection
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="adapterId")
    def adapter_id(self) -> Optional[pulumi.Input[int]]:
        """
        Adapter id created for the Databricks connection
        """
        return pulumi.get(self, "adapter_id")

    @adapter_id.setter
    def adapter_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adapter_id", value)

    @property
    @pulumi.getter(name="allowKeepAlive")
    def allow_keep_alive(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the connection should allow client session keep alive
        """
        return pulumi.get(self, "allow_keep_alive")

    @allow_keep_alive.setter
    def allow_keep_alive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_keep_alive", value)

    @property
    @pulumi.getter(name="allowSso")
    def allow_sso(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the connection should allow SSO
        """
        return pulumi.get(self, "allow_sso")

    @allow_sso.setter
    def allow_sso(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_sso", value)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog name if Unity Catalog is enabled in your Databricks workspace
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[int]]:
        """
        Connection Identifier
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Database name for the connection
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        Host name for the connection, including Databricks cluster
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="httpPath")
    def http_path(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP path of the Databricks cluster or SQL warehouse
        """
        return pulumi.get(self, "http_path")

    @http_path.setter
    def http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_path", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection is active
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthClientId")
    def oauth_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth client identifier
        """
        return pulumi.get(self, "oauth_client_id")

    @oauth_client_id.setter
    def oauth_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_client_id", value)

    @property
    @pulumi.getter(name="oauthClientSecret")
    def oauth_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth client secret
        """
        return pulumi.get(self, "oauth_client_secret")

    @oauth_client_secret.setter
    def oauth_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_client_secret", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number to connect via
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateLinkEndpointId")
    def private_link_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
        """
        return pulumi.get(self, "private_link_endpoint_id")

    @private_link_endpoint_id.setter
    def private_link_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_endpoint_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to create the connection in
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role name for the connection
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="tunnelEnabled")
    def tunnel_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not tunneling should be enabled on your database connection
        """
        return pulumi.get(self, "tunnel_enabled")

    @tunnel_enabled.setter
    def tunnel_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tunnel_enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of connection
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def warehouse(self) -> Optional[pulumi.Input[str]]:
        """
        Warehouse name for the connection
        """
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warehouse", value)


class Connection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 allow_keep_alive: Optional[pulumi.Input[bool]] = None,
                 allow_sso: Optional[pulumi.Input[bool]] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 http_path: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_client_secret: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tunnel_enabled: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 warehouse: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Data Warehouse connection for your project in dbt Cloud. The connection will need to be linked to the dbt Cloud project via a `ProjectConnection` resource.

        This resource can be used for Databricks, Postgres, Redshift, Snowflake and AlloyDB connections.
        For BigQuery, due to the list of fields being very different, you can use the `BigqueryConnection` resource.

        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # NOTE for customers using the LEGACY dbt_cloud provider:
        # use dbt_cloud_connection instead of dbtcloud_connection for the legacy resource names
        # legacy names will be removed from 0.3 onwards
        databricks = dbtcloud.Connection("databricks",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="adapter",
            database="",
            host_name="my-databricks-host.cloud.databricks.com",
            http_path="/my/path",
            catalog="moo")
        redshift = dbtcloud.Connection("redshift",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="redshift",
            database="my-database",
            port=5439,
            host_name="my-redshift-hostname")
        snowflake = dbtcloud.Connection("snowflake",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="snowflake",
            account="my-snowflake-account",
            database="MY_DATABASE",
            role="MY_ROLE",
            warehouse="MY_WAREHOUSE")
        ```

        ## Import

        Import using a project ID and connection ID found in the URL or via the API.

        ```sh
         $ pulumi import dbtcloud:index/connection:Connection test_connection "project_id:connection_id"
        ```

        ```sh
         $ pulumi import dbtcloud:index/connection:Connection test_connection 12345:6789
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account: Account name for the connection
        :param pulumi.Input[bool] allow_keep_alive: Whether or not the connection should allow client session keep alive
        :param pulumi.Input[bool] allow_sso: Whether or not the connection should allow SSO
        :param pulumi.Input[str] catalog: Catalog name if Unity Catalog is enabled in your Databricks workspace
        :param pulumi.Input[str] database: Database name for the connection
        :param pulumi.Input[str] host_name: Host name for the connection, including Databricks cluster
        :param pulumi.Input[str] http_path: The HTTP path of the Databricks cluster or SQL warehouse
        :param pulumi.Input[bool] is_active: Whether the connection is active
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] oauth_client_id: OAuth client identifier
        :param pulumi.Input[str] oauth_client_secret: OAuth client secret
        :param pulumi.Input[int] port: Port number to connect via
        :param pulumi.Input[str] private_link_endpoint_id: The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
        :param pulumi.Input[int] project_id: Project ID to create the connection in
        :param pulumi.Input[str] role: Role name for the connection
        :param pulumi.Input[bool] tunnel_enabled: Whether or not tunneling should be enabled on your database connection
        :param pulumi.Input[str] type: The type of connection
        :param pulumi.Input[str] warehouse: Warehouse name for the connection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Data Warehouse connection for your project in dbt Cloud. The connection will need to be linked to the dbt Cloud project via a `ProjectConnection` resource.

        This resource can be used for Databricks, Postgres, Redshift, Snowflake and AlloyDB connections.
        For BigQuery, due to the list of fields being very different, you can use the `BigqueryConnection` resource.

        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # NOTE for customers using the LEGACY dbt_cloud provider:
        # use dbt_cloud_connection instead of dbtcloud_connection for the legacy resource names
        # legacy names will be removed from 0.3 onwards
        databricks = dbtcloud.Connection("databricks",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="adapter",
            database="",
            host_name="my-databricks-host.cloud.databricks.com",
            http_path="/my/path",
            catalog="moo")
        redshift = dbtcloud.Connection("redshift",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="redshift",
            database="my-database",
            port=5439,
            host_name="my-redshift-hostname")
        snowflake = dbtcloud.Connection("snowflake",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="snowflake",
            account="my-snowflake-account",
            database="MY_DATABASE",
            role="MY_ROLE",
            warehouse="MY_WAREHOUSE")
        ```

        ## Import

        Import using a project ID and connection ID found in the URL or via the API.

        ```sh
         $ pulumi import dbtcloud:index/connection:Connection test_connection "project_id:connection_id"
        ```

        ```sh
         $ pulumi import dbtcloud:index/connection:Connection test_connection 12345:6789
        ```

        :param str resource_name: The name of the resource.
        :param ConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 allow_keep_alive: Optional[pulumi.Input[bool]] = None,
                 allow_sso: Optional[pulumi.Input[bool]] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 http_path: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_client_secret: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tunnel_enabled: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 warehouse: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionArgs.__new__(ConnectionArgs)

            __props__.__dict__["account"] = account
            __props__.__dict__["allow_keep_alive"] = allow_keep_alive
            __props__.__dict__["allow_sso"] = allow_sso
            __props__.__dict__["catalog"] = catalog
            if database is None and not opts.urn:
                raise TypeError("Missing required property 'database'")
            __props__.__dict__["database"] = database
            __props__.__dict__["host_name"] = host_name
            __props__.__dict__["http_path"] = http_path
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["name"] = name
            __props__.__dict__["oauth_client_id"] = oauth_client_id
            __props__.__dict__["oauth_client_secret"] = oauth_client_secret
            __props__.__dict__["port"] = port
            __props__.__dict__["private_link_endpoint_id"] = private_link_endpoint_id
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["role"] = role
            __props__.__dict__["tunnel_enabled"] = tunnel_enabled
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["warehouse"] = warehouse
            __props__.__dict__["adapter_id"] = None
            __props__.__dict__["connection_id"] = None
        super(Connection, __self__).__init__(
            'dbtcloud:index/connection:Connection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[str]] = None,
            adapter_id: Optional[pulumi.Input[int]] = None,
            allow_keep_alive: Optional[pulumi.Input[bool]] = None,
            allow_sso: Optional[pulumi.Input[bool]] = None,
            catalog: Optional[pulumi.Input[str]] = None,
            connection_id: Optional[pulumi.Input[int]] = None,
            database: Optional[pulumi.Input[str]] = None,
            host_name: Optional[pulumi.Input[str]] = None,
            http_path: Optional[pulumi.Input[str]] = None,
            is_active: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            oauth_client_id: Optional[pulumi.Input[str]] = None,
            oauth_client_secret: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            private_link_endpoint_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            role: Optional[pulumi.Input[str]] = None,
            tunnel_enabled: Optional[pulumi.Input[bool]] = None,
            type: Optional[pulumi.Input[str]] = None,
            warehouse: Optional[pulumi.Input[str]] = None) -> 'Connection':
        """
        Get an existing Connection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account: Account name for the connection
        :param pulumi.Input[int] adapter_id: Adapter id created for the Databricks connection
        :param pulumi.Input[bool] allow_keep_alive: Whether or not the connection should allow client session keep alive
        :param pulumi.Input[bool] allow_sso: Whether or not the connection should allow SSO
        :param pulumi.Input[str] catalog: Catalog name if Unity Catalog is enabled in your Databricks workspace
        :param pulumi.Input[int] connection_id: Connection Identifier
        :param pulumi.Input[str] database: Database name for the connection
        :param pulumi.Input[str] host_name: Host name for the connection, including Databricks cluster
        :param pulumi.Input[str] http_path: The HTTP path of the Databricks cluster or SQL warehouse
        :param pulumi.Input[bool] is_active: Whether the connection is active
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] oauth_client_id: OAuth client identifier
        :param pulumi.Input[str] oauth_client_secret: OAuth client secret
        :param pulumi.Input[int] port: Port number to connect via
        :param pulumi.Input[str] private_link_endpoint_id: The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
        :param pulumi.Input[int] project_id: Project ID to create the connection in
        :param pulumi.Input[str] role: Role name for the connection
        :param pulumi.Input[bool] tunnel_enabled: Whether or not tunneling should be enabled on your database connection
        :param pulumi.Input[str] type: The type of connection
        :param pulumi.Input[str] warehouse: Warehouse name for the connection
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionState.__new__(_ConnectionState)

        __props__.__dict__["account"] = account
        __props__.__dict__["adapter_id"] = adapter_id
        __props__.__dict__["allow_keep_alive"] = allow_keep_alive
        __props__.__dict__["allow_sso"] = allow_sso
        __props__.__dict__["catalog"] = catalog
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["database"] = database
        __props__.__dict__["host_name"] = host_name
        __props__.__dict__["http_path"] = http_path
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["name"] = name
        __props__.__dict__["oauth_client_id"] = oauth_client_id
        __props__.__dict__["oauth_client_secret"] = oauth_client_secret
        __props__.__dict__["port"] = port
        __props__.__dict__["private_link_endpoint_id"] = private_link_endpoint_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["role"] = role
        __props__.__dict__["tunnel_enabled"] = tunnel_enabled
        __props__.__dict__["type"] = type
        __props__.__dict__["warehouse"] = warehouse
        return Connection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output[Optional[str]]:
        """
        Account name for the connection
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="adapterId")
    def adapter_id(self) -> pulumi.Output[int]:
        """
        Adapter id created for the Databricks connection
        """
        return pulumi.get(self, "adapter_id")

    @property
    @pulumi.getter(name="allowKeepAlive")
    def allow_keep_alive(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not the connection should allow client session keep alive
        """
        return pulumi.get(self, "allow_keep_alive")

    @property
    @pulumi.getter(name="allowSso")
    def allow_sso(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not the connection should allow SSO
        """
        return pulumi.get(self, "allow_sso")

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Output[Optional[str]]:
        """
        Catalog name if Unity Catalog is enabled in your Databricks workspace
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[int]:
        """
        Connection Identifier
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[str]:
        """
        Database name for the connection
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[Optional[str]]:
        """
        Host name for the connection, including Databricks cluster
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="httpPath")
    def http_path(self) -> pulumi.Output[Optional[str]]:
        """
        The HTTP path of the Databricks cluster or SQL warehouse
        """
        return pulumi.get(self, "http_path")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the connection is active
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthClientId")
    def oauth_client_id(self) -> pulumi.Output[Optional[str]]:
        """
        OAuth client identifier
        """
        return pulumi.get(self, "oauth_client_id")

    @property
    @pulumi.getter(name="oauthClientSecret")
    def oauth_client_secret(self) -> pulumi.Output[Optional[str]]:
        """
        OAuth client secret
        """
        return pulumi.get(self, "oauth_client_secret")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        """
        Port number to connect via
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateLinkEndpointId")
    def private_link_endpoint_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source
        """
        return pulumi.get(self, "private_link_endpoint_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        Project ID to create the connection in
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        """
        Role name for the connection
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="tunnelEnabled")
    def tunnel_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not tunneling should be enabled on your database connection
        """
        return pulumi.get(self, "tunnel_enabled")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of connection
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Output[Optional[str]]:
        """
        Warehouse name for the connection
        """
        return pulumi.get(self, "warehouse")


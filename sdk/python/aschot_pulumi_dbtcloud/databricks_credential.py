# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DatabricksCredentialArgs', 'DatabricksCredential']

@pulumi.input_type
class DatabricksCredentialArgs:
    def __init__(__self__, *,
                 adapter_id: pulumi.Input[int],
                 adapter_type: pulumi.Input[str],
                 project_id: pulumi.Input[int],
                 schema: pulumi.Input[str],
                 token: pulumi.Input[str],
                 catalog: Optional[pulumi.Input[str]] = None,
                 target_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DatabricksCredential resource.
        :param pulumi.Input[int] adapter_id: Databricks adapter ID for the credential
        :param pulumi.Input[str] adapter_type: The type of the adapter (databricks or spark)
        :param pulumi.Input[int] project_id: Project ID to create the Databricks credential in
        :param pulumi.Input[str] schema: The schema where to create models
        :param pulumi.Input[str] token: Token for Databricks user
        :param pulumi.Input[str] catalog: The catalog where to create models (only for the databricks adapter)
        :param pulumi.Input[str] target_name: Target name
        """
        pulumi.set(__self__, "adapter_id", adapter_id)
        pulumi.set(__self__, "adapter_type", adapter_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "token", token)
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)

    @property
    @pulumi.getter(name="adapterId")
    def adapter_id(self) -> pulumi.Input[int]:
        """
        Databricks adapter ID for the credential
        """
        return pulumi.get(self, "adapter_id")

    @adapter_id.setter
    def adapter_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "adapter_id", value)

    @property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> pulumi.Input[str]:
        """
        The type of the adapter (databricks or spark)
        """
        return pulumi.get(self, "adapter_type")

    @adapter_type.setter
    def adapter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "adapter_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[int]:
        """
        Project ID to create the Databricks credential in
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input[str]:
        """
        The schema where to create models
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        Token for Databricks user
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        The catalog where to create models (only for the databricks adapter)
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[pulumi.Input[str]]:
        """
        Target name
        """
        return pulumi.get(self, "target_name")

    @target_name.setter
    def target_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_name", value)


@pulumi.input_type
class _DatabricksCredentialState:
    def __init__(__self__, *,
                 adapter_id: Optional[pulumi.Input[int]] = None,
                 adapter_type: Optional[pulumi.Input[str]] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 credential_id: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DatabricksCredential resources.
        :param pulumi.Input[int] adapter_id: Databricks adapter ID for the credential
        :param pulumi.Input[str] adapter_type: The type of the adapter (databricks or spark)
        :param pulumi.Input[str] catalog: The catalog where to create models (only for the databricks adapter)
        :param pulumi.Input[int] credential_id: The system Databricks credential ID
        :param pulumi.Input[int] project_id: Project ID to create the Databricks credential in
        :param pulumi.Input[str] schema: The schema where to create models
        :param pulumi.Input[str] target_name: Target name
        :param pulumi.Input[str] token: Token for Databricks user
        """
        if adapter_id is not None:
            pulumi.set(__self__, "adapter_id", adapter_id)
        if adapter_type is not None:
            pulumi.set(__self__, "adapter_type", adapter_type)
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if credential_id is not None:
            pulumi.set(__self__, "credential_id", credential_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="adapterId")
    def adapter_id(self) -> Optional[pulumi.Input[int]]:
        """
        Databricks adapter ID for the credential
        """
        return pulumi.get(self, "adapter_id")

    @adapter_id.setter
    def adapter_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adapter_id", value)

    @property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the adapter (databricks or spark)
        """
        return pulumi.get(self, "adapter_type")

    @adapter_type.setter
    def adapter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adapter_type", value)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        The catalog where to create models (only for the databricks adapter)
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> Optional[pulumi.Input[int]]:
        """
        The system Databricks credential ID
        """
        return pulumi.get(self, "credential_id")

    @credential_id.setter
    def credential_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "credential_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to create the Databricks credential in
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        """
        The schema where to create models
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[pulumi.Input[str]]:
        """
        Target name
        """
        return pulumi.get(self, "target_name")

    @target_name.setter
    def target_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_name", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Token for Databricks user
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


class DatabricksCredential(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adapter_id: Optional[pulumi.Input[int]] = None,
                 adapter_type: Optional[pulumi.Input[str]] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # NOTE for customers using the LEGACY dbt_cloud provider:
        # when using the Databricks adapter
        my_databricks_cred = dbtcloud.DatabricksCredential("myDatabricksCred",
            project_id=dbtcloud_project["dbt_project"]["id"],
            adapter_id=dbtcloud_connection["my_databricks_connection"]["adapter_id"],
            target_name="prod",
            token="abcdefgh",
            schema="my_schema",
            adapter_type="databricks")
        # when using the Spark adapter
        my_spark_cred = dbtcloud.DatabricksCredential("mySparkCred",
            project_id=dbtcloud_project["dbt_project"]["id"],
            adapter_id=dbtcloud_connection["my_databricks_connection"]["adapter_id"],
            target_name="prod",
            token="abcdefgh",
            schema="my_schema",
            adapter_type="spark")
        ```

        ## Import

        Import using a project ID and credential ID found in the URL or via the API.

        ```sh
         $ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential "project_id:credential_id"
        ```

        ```sh
         $ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential 12345:6789
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] adapter_id: Databricks adapter ID for the credential
        :param pulumi.Input[str] adapter_type: The type of the adapter (databricks or spark)
        :param pulumi.Input[str] catalog: The catalog where to create models (only for the databricks adapter)
        :param pulumi.Input[int] project_id: Project ID to create the Databricks credential in
        :param pulumi.Input[str] schema: The schema where to create models
        :param pulumi.Input[str] target_name: Target name
        :param pulumi.Input[str] token: Token for Databricks user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabricksCredentialArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # NOTE for customers using the LEGACY dbt_cloud provider:
        # when using the Databricks adapter
        my_databricks_cred = dbtcloud.DatabricksCredential("myDatabricksCred",
            project_id=dbtcloud_project["dbt_project"]["id"],
            adapter_id=dbtcloud_connection["my_databricks_connection"]["adapter_id"],
            target_name="prod",
            token="abcdefgh",
            schema="my_schema",
            adapter_type="databricks")
        # when using the Spark adapter
        my_spark_cred = dbtcloud.DatabricksCredential("mySparkCred",
            project_id=dbtcloud_project["dbt_project"]["id"],
            adapter_id=dbtcloud_connection["my_databricks_connection"]["adapter_id"],
            target_name="prod",
            token="abcdefgh",
            schema="my_schema",
            adapter_type="spark")
        ```

        ## Import

        Import using a project ID and credential ID found in the URL or via the API.

        ```sh
         $ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential "project_id:credential_id"
        ```

        ```sh
         $ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential 12345:6789
        ```

        :param str resource_name: The name of the resource.
        :param DatabricksCredentialArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabricksCredentialArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adapter_id: Optional[pulumi.Input[int]] = None,
                 adapter_type: Optional[pulumi.Input[str]] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabricksCredentialArgs.__new__(DatabricksCredentialArgs)

            if adapter_id is None and not opts.urn:
                raise TypeError("Missing required property 'adapter_id'")
            __props__.__dict__["adapter_id"] = adapter_id
            if adapter_type is None and not opts.urn:
                raise TypeError("Missing required property 'adapter_type'")
            __props__.__dict__["adapter_type"] = adapter_type
            __props__.__dict__["catalog"] = catalog
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if schema is None and not opts.urn:
                raise TypeError("Missing required property 'schema'")
            __props__.__dict__["schema"] = schema
            __props__.__dict__["target_name"] = target_name
            if token is None and not opts.urn:
                raise TypeError("Missing required property 'token'")
            __props__.__dict__["token"] = None if token is None else pulumi.Output.secret(token)
            __props__.__dict__["credential_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["token"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DatabricksCredential, __self__).__init__(
            'dbtcloud:index/databricksCredential:DatabricksCredential',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adapter_id: Optional[pulumi.Input[int]] = None,
            adapter_type: Optional[pulumi.Input[str]] = None,
            catalog: Optional[pulumi.Input[str]] = None,
            credential_id: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            schema: Optional[pulumi.Input[str]] = None,
            target_name: Optional[pulumi.Input[str]] = None,
            token: Optional[pulumi.Input[str]] = None) -> 'DatabricksCredential':
        """
        Get an existing DatabricksCredential resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] adapter_id: Databricks adapter ID for the credential
        :param pulumi.Input[str] adapter_type: The type of the adapter (databricks or spark)
        :param pulumi.Input[str] catalog: The catalog where to create models (only for the databricks adapter)
        :param pulumi.Input[int] credential_id: The system Databricks credential ID
        :param pulumi.Input[int] project_id: Project ID to create the Databricks credential in
        :param pulumi.Input[str] schema: The schema where to create models
        :param pulumi.Input[str] target_name: Target name
        :param pulumi.Input[str] token: Token for Databricks user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatabricksCredentialState.__new__(_DatabricksCredentialState)

        __props__.__dict__["adapter_id"] = adapter_id
        __props__.__dict__["adapter_type"] = adapter_type
        __props__.__dict__["catalog"] = catalog
        __props__.__dict__["credential_id"] = credential_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["schema"] = schema
        __props__.__dict__["target_name"] = target_name
        __props__.__dict__["token"] = token
        return DatabricksCredential(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adapterId")
    def adapter_id(self) -> pulumi.Output[int]:
        """
        Databricks adapter ID for the credential
        """
        return pulumi.get(self, "adapter_id")

    @property
    @pulumi.getter(name="adapterType")
    def adapter_type(self) -> pulumi.Output[str]:
        """
        The type of the adapter (databricks or spark)
        """
        return pulumi.get(self, "adapter_type")

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Output[Optional[str]]:
        """
        The catalog where to create models (only for the databricks adapter)
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> pulumi.Output[int]:
        """
        The system Databricks credential ID
        """
        return pulumi.get(self, "credential_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        Project ID to create the Databricks credential in
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Output[str]:
        """
        The schema where to create models
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> pulumi.Output[Optional[str]]:
        """
        Target name
        """
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        Token for Databricks user
        """
        return pulumi.get(self, "token")


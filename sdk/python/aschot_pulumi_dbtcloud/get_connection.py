# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetConnectionResult',
    'AwaitableGetConnectionResult',
    'get_connection',
    'get_connection_output',
]

@pulumi.output_type
class GetConnectionResult:
    """
    A collection of values returned by getConnection.
    """
    def __init__(__self__, account=None, allow_keep_alive=None, allow_sso=None, connection_id=None, database=None, id=None, is_active=None, name=None, private_link_endpoint_id=None, project_id=None, role=None, type=None, warehouse=None):
        if account and not isinstance(account, str):
            raise TypeError("Expected argument 'account' to be a str")
        pulumi.set(__self__, "account", account)
        if allow_keep_alive and not isinstance(allow_keep_alive, bool):
            raise TypeError("Expected argument 'allow_keep_alive' to be a bool")
        pulumi.set(__self__, "allow_keep_alive", allow_keep_alive)
        if allow_sso and not isinstance(allow_sso, bool):
            raise TypeError("Expected argument 'allow_sso' to be a bool")
        pulumi.set(__self__, "allow_sso", allow_sso)
        if connection_id and not isinstance(connection_id, int):
            raise TypeError("Expected argument 'connection_id' to be a int")
        pulumi.set(__self__, "connection_id", connection_id)
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if private_link_endpoint_id and not isinstance(private_link_endpoint_id, str):
            raise TypeError("Expected argument 'private_link_endpoint_id' to be a str")
        pulumi.set(__self__, "private_link_endpoint_id", private_link_endpoint_id)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if warehouse and not isinstance(warehouse, str):
            raise TypeError("Expected argument 'warehouse' to be a str")
        pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter
    def account(self) -> str:
        """
        Account for the connection
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="allowKeepAlive")
    def allow_keep_alive(self) -> bool:
        """
        Flag for whether or not to use the keep session alive parameter in the connection
        """
        return pulumi.get(self, "allow_keep_alive")

    @property
    @pulumi.getter(name="allowSso")
    def allow_sso(self) -> bool:
        """
        Flag for whether or not to use SSO for the connection
        """
        return pulumi.get(self, "allow_sso")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> int:
        """
        ID for the connection
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name for the connection
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether the connection is active
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateLinkEndpointId")
    def private_link_endpoint_id(self) -> str:
        """
        The ID of the PrivateLink connection
        """
        return pulumi.get(self, "private_link_endpoint_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID to create the connection in
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role name for the connection
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Connection type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        """
        Warehouse name for the connection
        """
        return pulumi.get(self, "warehouse")


class AwaitableGetConnectionResult(GetConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionResult(
            account=self.account,
            allow_keep_alive=self.allow_keep_alive,
            allow_sso=self.allow_sso,
            connection_id=self.connection_id,
            database=self.database,
            id=self.id,
            is_active=self.is_active,
            name=self.name,
            private_link_endpoint_id=self.private_link_endpoint_id,
            project_id=self.project_id,
            role=self.role,
            type=self.type,
            warehouse=self.warehouse)


def get_connection(connection_id: Optional[int] = None,
                   project_id: Optional[int] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionResult:
    """
    Use this data source to access information about an existing resource.

    :param int connection_id: ID for the connection
    :param int project_id: Project ID to create the connection in
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dbtcloud:index/getConnection:getConnection', __args__, opts=opts, typ=GetConnectionResult).value

    return AwaitableGetConnectionResult(
        account=pulumi.get(__ret__, 'account'),
        allow_keep_alive=pulumi.get(__ret__, 'allow_keep_alive'),
        allow_sso=pulumi.get(__ret__, 'allow_sso'),
        connection_id=pulumi.get(__ret__, 'connection_id'),
        database=pulumi.get(__ret__, 'database'),
        id=pulumi.get(__ret__, 'id'),
        is_active=pulumi.get(__ret__, 'is_active'),
        name=pulumi.get(__ret__, 'name'),
        private_link_endpoint_id=pulumi.get(__ret__, 'private_link_endpoint_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        role=pulumi.get(__ret__, 'role'),
        type=pulumi.get(__ret__, 'type'),
        warehouse=pulumi.get(__ret__, 'warehouse'))


@_utilities.lift_output_func(get_connection)
def get_connection_output(connection_id: Optional[pulumi.Input[int]] = None,
                          project_id: Optional[pulumi.Input[int]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectionResult]:
    """
    Use this data source to access information about an existing resource.

    :param int connection_id: ID for the connection
    :param int project_id: Project ID to create the connection in
    """
    ...

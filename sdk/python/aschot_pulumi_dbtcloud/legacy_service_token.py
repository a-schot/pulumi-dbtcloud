# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LegacyServiceTokenArgs', 'LegacyServiceToken']

@pulumi.input_type
class LegacyServiceTokenArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 service_token_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceTokenServiceTokenPermissionArgs']]]] = None,
                 state: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a LegacyServiceToken resource.
        :param pulumi.Input[str] name: Service token name
        :param pulumi.Input[Sequence[pulumi.Input['LegacyServiceTokenServiceTokenPermissionArgs']]] service_token_permissions: Permissions set for the service token
        :param pulumi.Input[int] state: Service token state (1 is active, 2 is inactive)
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_token_permissions is not None:
            pulumi.set(__self__, "service_token_permissions", service_token_permissions)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service token name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceTokenPermissions")
    def service_token_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceTokenServiceTokenPermissionArgs']]]]:
        """
        Permissions set for the service token
        """
        return pulumi.get(self, "service_token_permissions")

    @service_token_permissions.setter
    def service_token_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceTokenServiceTokenPermissionArgs']]]]):
        pulumi.set(self, "service_token_permissions", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[int]]:
        """
        Service token state (1 is active, 2 is inactive)
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class _LegacyServiceTokenState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 service_token_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceTokenServiceTokenPermissionArgs']]]] = None,
                 state: Optional[pulumi.Input[int]] = None,
                 token_string: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LegacyServiceToken resources.
        :param pulumi.Input[str] name: Service token name
        :param pulumi.Input[Sequence[pulumi.Input['LegacyServiceTokenServiceTokenPermissionArgs']]] service_token_permissions: Permissions set for the service token
        :param pulumi.Input[int] state: Service token state (1 is active, 2 is inactive)
        :param pulumi.Input[str] token_string: Service token secret value (only accessible on creation))
        :param pulumi.Input[str] uid: Service token UID (part of the token)
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_token_permissions is not None:
            pulumi.set(__self__, "service_token_permissions", service_token_permissions)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if token_string is not None:
            pulumi.set(__self__, "token_string", token_string)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service token name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceTokenPermissions")
    def service_token_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceTokenServiceTokenPermissionArgs']]]]:
        """
        Permissions set for the service token
        """
        return pulumi.get(self, "service_token_permissions")

    @service_token_permissions.setter
    def service_token_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LegacyServiceTokenServiceTokenPermissionArgs']]]]):
        pulumi.set(self, "service_token_permissions", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[int]]:
        """
        Service token state (1 is active, 2 is inactive)
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="tokenString")
    def token_string(self) -> Optional[pulumi.Input[str]]:
        """
        Service token secret value (only accessible on creation))
        """
        return pulumi.get(self, "token_string")

    @token_string.setter
    def token_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_string", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        Service token UID (part of the token)
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


class LegacyServiceToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_token_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LegacyServiceTokenServiceTokenPermissionArgs']]]]] = None,
                 state: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a LegacyServiceToken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Service token name
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LegacyServiceTokenServiceTokenPermissionArgs']]]] service_token_permissions: Permissions set for the service token
        :param pulumi.Input[int] state: Service token state (1 is active, 2 is inactive)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LegacyServiceTokenArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LegacyServiceToken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LegacyServiceTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LegacyServiceTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_token_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LegacyServiceTokenServiceTokenPermissionArgs']]]]] = None,
                 state: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LegacyServiceTokenArgs.__new__(LegacyServiceTokenArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["service_token_permissions"] = service_token_permissions
            __props__.__dict__["state"] = state
            __props__.__dict__["token_string"] = None
            __props__.__dict__["uid"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["tokenString"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(LegacyServiceToken, __self__).__init__(
            'dbtcloud:index/legacyServiceToken:LegacyServiceToken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            service_token_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LegacyServiceTokenServiceTokenPermissionArgs']]]]] = None,
            state: Optional[pulumi.Input[int]] = None,
            token_string: Optional[pulumi.Input[str]] = None,
            uid: Optional[pulumi.Input[str]] = None) -> 'LegacyServiceToken':
        """
        Get an existing LegacyServiceToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Service token name
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LegacyServiceTokenServiceTokenPermissionArgs']]]] service_token_permissions: Permissions set for the service token
        :param pulumi.Input[int] state: Service token state (1 is active, 2 is inactive)
        :param pulumi.Input[str] token_string: Service token secret value (only accessible on creation))
        :param pulumi.Input[str] uid: Service token UID (part of the token)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LegacyServiceTokenState.__new__(_LegacyServiceTokenState)

        __props__.__dict__["name"] = name
        __props__.__dict__["service_token_permissions"] = service_token_permissions
        __props__.__dict__["state"] = state
        __props__.__dict__["token_string"] = token_string
        __props__.__dict__["uid"] = uid
        return LegacyServiceToken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Service token name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceTokenPermissions")
    def service_token_permissions(self) -> pulumi.Output[Optional[Sequence['outputs.LegacyServiceTokenServiceTokenPermission']]]:
        """
        Permissions set for the service token
        """
        return pulumi.get(self, "service_token_permissions")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[int]]:
        """
        Service token state (1 is active, 2 is inactive)
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tokenString")
    def token_string(self) -> pulumi.Output[str]:
        """
        Service token secret value (only accessible on creation))
        """
        return pulumi.get(self, "token_string")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        Service token UID (part of the token)
        """
        return pulumi.get(self, "uid")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BigQueryConnectionArgs', 'BigQueryConnection']

@pulumi.input_type
class BigQueryConnectionArgs:
    def __init__(__self__, *,
                 auth_provider_x509_cert_url: pulumi.Input[str],
                 auth_uri: pulumi.Input[str],
                 client_email: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_x509_cert_url: pulumi.Input[str],
                 gcp_project_id: pulumi.Input[str],
                 private_key: pulumi.Input[str],
                 private_key_id: pulumi.Input[str],
                 project_id: pulumi.Input[int],
                 timeout_seconds: pulumi.Input[int],
                 token_uri: pulumi.Input[str],
                 type: pulumi.Input[str],
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_secret: Optional[pulumi.Input[str]] = None,
                 dataproc_cluster_name: Optional[pulumi.Input[str]] = None,
                 dataproc_region: Optional[pulumi.Input[str]] = None,
                 execution_project: Optional[pulumi.Input[str]] = None,
                 gcs_bucket: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_bytes_billed: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a BigQueryConnection resource.
        :param pulumi.Input[str] auth_provider_x509_cert_url: Auth Provider X509 Cert URL for the Service Account
        :param pulumi.Input[str] auth_uri: Auth URI for the Service Account
        :param pulumi.Input[str] client_email: Service Account email
        :param pulumi.Input[str] client_id: Client ID of the Service Account
        :param pulumi.Input[str] client_x509_cert_url: Client X509 Cert URL for the Service Account
        :param pulumi.Input[str] gcp_project_id: GCP project ID
        :param pulumi.Input[str] private_key: Private key of the Service Account
        :param pulumi.Input[str] private_key_id: Private key ID of the Service Account
        :param pulumi.Input[int] project_id: Project ID to create the connection in
        :param pulumi.Input[int] timeout_seconds: Timeout in seconds for queries
        :param pulumi.Input[str] token_uri: Token URI for the Service Account
        :param pulumi.Input[str] type: The type of connection
        :param pulumi.Input[str] application_id: The Application ID for BQ OAuth
        :param pulumi.Input[str] application_secret: The Application Secret for BQ OAuth
        :param pulumi.Input[str] dataproc_cluster_name: Dataproc cluster name for PySpark workloads
        :param pulumi.Input[str] dataproc_region: Google Cloud region for PySpark workloads on Dataproc
        :param pulumi.Input[str] execution_project: Project to bill for query execution
        :param pulumi.Input[str] gcs_bucket: URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        :param pulumi.Input[bool] is_active: Whether the connection is active
        :param pulumi.Input[str] location: Location to create new Datasets in
        :param pulumi.Input[int] maximum_bytes_billed: Max number of bytes that can be billed for a given BigQuery query
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] priority: The priority with which to execute BigQuery queries (batch or interactive)
        :param pulumi.Input[int] retries: Number of retries for queries
        """
        pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        pulumi.set(__self__, "auth_uri", auth_uri)
        pulumi.set(__self__, "client_email", client_email)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        pulumi.set(__self__, "gcp_project_id", gcp_project_id)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "private_key_id", private_key_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        pulumi.set(__self__, "token_uri", token_uri)
        pulumi.set(__self__, "type", type)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_secret is not None:
            pulumi.set(__self__, "application_secret", application_secret)
        if dataproc_cluster_name is not None:
            pulumi.set(__self__, "dataproc_cluster_name", dataproc_cluster_name)
        if dataproc_region is not None:
            pulumi.set(__self__, "dataproc_region", dataproc_region)
        if execution_project is not None:
            pulumi.set(__self__, "execution_project", execution_project)
        if gcs_bucket is not None:
            pulumi.set(__self__, "gcs_bucket", gcs_bucket)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum_bytes_billed is not None:
            pulumi.set(__self__, "maximum_bytes_billed", maximum_bytes_billed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> pulumi.Input[str]:
        """
        Auth Provider X509 Cert URL for the Service Account
        """
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @auth_provider_x509_cert_url.setter
    def auth_provider_x509_cert_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_provider_x509_cert_url", value)

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> pulumi.Input[str]:
        """
        Auth URI for the Service Account
        """
        return pulumi.get(self, "auth_uri")

    @auth_uri.setter
    def auth_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_uri", value)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> pulumi.Input[str]:
        """
        Service Account email
        """
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_email", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Client ID of the Service Account
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> pulumi.Input[str]:
        """
        Client X509 Cert URL for the Service Account
        """
        return pulumi.get(self, "client_x509_cert_url")

    @client_x509_cert_url.setter
    def client_x509_cert_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_x509_cert_url", value)

    @property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> pulumi.Input[str]:
        """
        GCP project ID
        """
        return pulumi.get(self, "gcp_project_id")

    @gcp_project_id.setter
    def gcp_project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcp_project_id", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        """
        Private key of the Service Account
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> pulumi.Input[str]:
        """
        Private key ID of the Service Account
        """
        return pulumi.get(self, "private_key_id")

    @private_key_id.setter
    def private_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[int]:
        """
        Project ID to create the connection in
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> pulumi.Input[int]:
        """
        Timeout in seconds for queries
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> pulumi.Input[str]:
        """
        Token URI for the Service Account
        """
        return pulumi.get(self, "token_uri")

    @token_uri.setter
    def token_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_uri", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of connection
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Application ID for BQ OAuth
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationSecret")
    def application_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The Application Secret for BQ OAuth
        """
        return pulumi.get(self, "application_secret")

    @application_secret.setter
    def application_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_secret", value)

    @property
    @pulumi.getter(name="dataprocClusterName")
    def dataproc_cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Dataproc cluster name for PySpark workloads
        """
        return pulumi.get(self, "dataproc_cluster_name")

    @dataproc_cluster_name.setter
    def dataproc_cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproc_cluster_name", value)

    @property
    @pulumi.getter(name="dataprocRegion")
    def dataproc_region(self) -> Optional[pulumi.Input[str]]:
        """
        Google Cloud region for PySpark workloads on Dataproc
        """
        return pulumi.get(self, "dataproc_region")

    @dataproc_region.setter
    def dataproc_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproc_region", value)

    @property
    @pulumi.getter(name="executionProject")
    def execution_project(self) -> Optional[pulumi.Input[str]]:
        """
        Project to bill for query execution
        """
        return pulumi.get(self, "execution_project")

    @execution_project.setter
    def execution_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_project", value)

    @property
    @pulumi.getter(name="gcsBucket")
    def gcs_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        """
        return pulumi.get(self, "gcs_bucket")

    @gcs_bucket.setter
    def gcs_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcs_bucket", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection is active
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location to create new Datasets in
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maximumBytesBilled")
    def maximum_bytes_billed(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of bytes that can be billed for a given BigQuery query
        """
        return pulumi.get(self, "maximum_bytes_billed")

    @maximum_bytes_billed.setter
    def maximum_bytes_billed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bytes_billed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The priority with which to execute BigQuery queries (batch or interactive)
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retries for queries
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)


@pulumi.input_type
class _BigQueryConnectionState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_secret: Optional[pulumi.Input[str]] = None,
                 auth_provider_x509_cert_url: Optional[pulumi.Input[str]] = None,
                 auth_uri: Optional[pulumi.Input[str]] = None,
                 client_email: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_x509_cert_url: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[int]] = None,
                 dataproc_cluster_name: Optional[pulumi.Input[str]] = None,
                 dataproc_region: Optional[pulumi.Input[str]] = None,
                 execution_project: Optional[pulumi.Input[str]] = None,
                 gcp_project_id: Optional[pulumi.Input[str]] = None,
                 gcs_bucket: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 is_configured_for_oauth: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_bytes_billed: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 token_uri: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BigQueryConnection resources.
        :param pulumi.Input[str] application_id: The Application ID for BQ OAuth
        :param pulumi.Input[str] application_secret: The Application Secret for BQ OAuth
        :param pulumi.Input[str] auth_provider_x509_cert_url: Auth Provider X509 Cert URL for the Service Account
        :param pulumi.Input[str] auth_uri: Auth URI for the Service Account
        :param pulumi.Input[str] client_email: Service Account email
        :param pulumi.Input[str] client_id: Client ID of the Service Account
        :param pulumi.Input[str] client_x509_cert_url: Client X509 Cert URL for the Service Account
        :param pulumi.Input[int] connection_id: Connection Identifier
        :param pulumi.Input[str] dataproc_cluster_name: Dataproc cluster name for PySpark workloads
        :param pulumi.Input[str] dataproc_region: Google Cloud region for PySpark workloads on Dataproc
        :param pulumi.Input[str] execution_project: Project to bill for query execution
        :param pulumi.Input[str] gcp_project_id: GCP project ID
        :param pulumi.Input[str] gcs_bucket: URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        :param pulumi.Input[bool] is_active: Whether the connection is active
        :param pulumi.Input[bool] is_configured_for_oauth: Whether the connection is configured for OAuth or not
        :param pulumi.Input[str] location: Location to create new Datasets in
        :param pulumi.Input[int] maximum_bytes_billed: Max number of bytes that can be billed for a given BigQuery query
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] priority: The priority with which to execute BigQuery queries (batch or interactive)
        :param pulumi.Input[str] private_key: Private key of the Service Account
        :param pulumi.Input[str] private_key_id: Private key ID of the Service Account
        :param pulumi.Input[int] project_id: Project ID to create the connection in
        :param pulumi.Input[int] retries: Number of retries for queries
        :param pulumi.Input[int] timeout_seconds: Timeout in seconds for queries
        :param pulumi.Input[str] token_uri: Token URI for the Service Account
        :param pulumi.Input[str] type: The type of connection
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_secret is not None:
            pulumi.set(__self__, "application_secret", application_secret)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if dataproc_cluster_name is not None:
            pulumi.set(__self__, "dataproc_cluster_name", dataproc_cluster_name)
        if dataproc_region is not None:
            pulumi.set(__self__, "dataproc_region", dataproc_region)
        if execution_project is not None:
            pulumi.set(__self__, "execution_project", execution_project)
        if gcp_project_id is not None:
            pulumi.set(__self__, "gcp_project_id", gcp_project_id)
        if gcs_bucket is not None:
            pulumi.set(__self__, "gcs_bucket", gcs_bucket)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if is_configured_for_oauth is not None:
            pulumi.set(__self__, "is_configured_for_oauth", is_configured_for_oauth)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum_bytes_billed is not None:
            pulumi.set(__self__, "maximum_bytes_billed", maximum_bytes_billed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Application ID for BQ OAuth
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationSecret")
    def application_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The Application Secret for BQ OAuth
        """
        return pulumi.get(self, "application_secret")

    @application_secret.setter
    def application_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_secret", value)

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[pulumi.Input[str]]:
        """
        Auth Provider X509 Cert URL for the Service Account
        """
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @auth_provider_x509_cert_url.setter
    def auth_provider_x509_cert_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_provider_x509_cert_url", value)

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Auth URI for the Service Account
        """
        return pulumi.get(self, "auth_uri")

    @auth_uri.setter
    def auth_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_uri", value)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[pulumi.Input[str]]:
        """
        Service Account email
        """
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_email", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID of the Service Account
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[pulumi.Input[str]]:
        """
        Client X509 Cert URL for the Service Account
        """
        return pulumi.get(self, "client_x509_cert_url")

    @client_x509_cert_url.setter
    def client_x509_cert_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_x509_cert_url", value)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[int]]:
        """
        Connection Identifier
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="dataprocClusterName")
    def dataproc_cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Dataproc cluster name for PySpark workloads
        """
        return pulumi.get(self, "dataproc_cluster_name")

    @dataproc_cluster_name.setter
    def dataproc_cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproc_cluster_name", value)

    @property
    @pulumi.getter(name="dataprocRegion")
    def dataproc_region(self) -> Optional[pulumi.Input[str]]:
        """
        Google Cloud region for PySpark workloads on Dataproc
        """
        return pulumi.get(self, "dataproc_region")

    @dataproc_region.setter
    def dataproc_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataproc_region", value)

    @property
    @pulumi.getter(name="executionProject")
    def execution_project(self) -> Optional[pulumi.Input[str]]:
        """
        Project to bill for query execution
        """
        return pulumi.get(self, "execution_project")

    @execution_project.setter
    def execution_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_project", value)

    @property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        GCP project ID
        """
        return pulumi.get(self, "gcp_project_id")

    @gcp_project_id.setter
    def gcp_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_project_id", value)

    @property
    @pulumi.getter(name="gcsBucket")
    def gcs_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        """
        return pulumi.get(self, "gcs_bucket")

    @gcs_bucket.setter
    def gcs_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcs_bucket", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection is active
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="isConfiguredForOauth")
    def is_configured_for_oauth(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection is configured for OAuth or not
        """
        return pulumi.get(self, "is_configured_for_oauth")

    @is_configured_for_oauth.setter
    def is_configured_for_oauth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_configured_for_oauth", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location to create new Datasets in
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maximumBytesBilled")
    def maximum_bytes_billed(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of bytes that can be billed for a given BigQuery query
        """
        return pulumi.get(self, "maximum_bytes_billed")

    @maximum_bytes_billed.setter
    def maximum_bytes_billed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bytes_billed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The priority with which to execute BigQuery queries (batch or interactive)
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key of the Service Account
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private key ID of the Service Account
        """
        return pulumi.get(self, "private_key_id")

    @private_key_id.setter
    def private_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to create the connection in
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retries for queries
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in seconds for queries
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Token URI for the Service Account
        """
        return pulumi.get(self, "token_uri")

    @token_uri.setter
    def token_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_uri", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of connection
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class BigQueryConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_secret: Optional[pulumi.Input[str]] = None,
                 auth_provider_x509_cert_url: Optional[pulumi.Input[str]] = None,
                 auth_uri: Optional[pulumi.Input[str]] = None,
                 client_email: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_x509_cert_url: Optional[pulumi.Input[str]] = None,
                 dataproc_cluster_name: Optional[pulumi.Input[str]] = None,
                 dataproc_region: Optional[pulumi.Input[str]] = None,
                 execution_project: Optional[pulumi.Input[str]] = None,
                 gcp_project_id: Optional[pulumi.Input[str]] = None,
                 gcs_bucket: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_bytes_billed: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 token_uri: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource to create BigQuery connections in dbt Cloud. Can be set to use OAuth for developers.

        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # NOTE for customers using the LEGACY dbt_cloud provider:
        my_connection = dbtcloud.BigQueryConnection("myConnection",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="bigquery",
            is_active=True,
            gcp_project_id="my-gcp-project-id",
            timeout_seconds=100,
            private_key_id="my-private-key-id",
            private_key="ABCDEFGHIJKL",
            client_email="my_client_email",
            client_id="my_client_di",
            auth_uri="my_auth_uri",
            token_uri="my_token_uri",
            auth_provider_x509_cert_url="my_auth_provider_x509_cert_url",
            client_x509_cert_url="my_client_x509_cert_url",
            retries=3)
        # it is also possible to set the connection to use OAuth by filling in `application_id` and `application_secret`
        my_connection_with_oauth = dbtcloud.BigQueryConnection("myConnectionWithOauth",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="bigquery",
            is_active=True,
            gcp_project_id="my-gcp-project-id",
            timeout_seconds=100,
            private_key_id="my-private-key-id",
            private_key="ABCDEFGHIJKL",
            client_email="my_client_email",
            client_id="my_client_di",
            auth_uri="my_auth_uri",
            token_uri="my_token_uri",
            auth_provider_x509_cert_url="my_auth_provider_x509_cert_url",
            client_x509_cert_url="my_client_x509_cert_url",
            retries=3,
            application_id="oauth_application_id",
            application_secret="oauth_secret_id")
        ```

        ## Import

        ```sh
         $ pulumi import dbtcloud:index/bigQueryConnection:BigQueryConnection my_connection "project_id:connection_id"
        ```

        ```sh
         $ pulumi import dbtcloud:index/bigQueryConnection:BigQueryConnection my_connection 12345:6789
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: The Application ID for BQ OAuth
        :param pulumi.Input[str] application_secret: The Application Secret for BQ OAuth
        :param pulumi.Input[str] auth_provider_x509_cert_url: Auth Provider X509 Cert URL for the Service Account
        :param pulumi.Input[str] auth_uri: Auth URI for the Service Account
        :param pulumi.Input[str] client_email: Service Account email
        :param pulumi.Input[str] client_id: Client ID of the Service Account
        :param pulumi.Input[str] client_x509_cert_url: Client X509 Cert URL for the Service Account
        :param pulumi.Input[str] dataproc_cluster_name: Dataproc cluster name for PySpark workloads
        :param pulumi.Input[str] dataproc_region: Google Cloud region for PySpark workloads on Dataproc
        :param pulumi.Input[str] execution_project: Project to bill for query execution
        :param pulumi.Input[str] gcp_project_id: GCP project ID
        :param pulumi.Input[str] gcs_bucket: URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        :param pulumi.Input[bool] is_active: Whether the connection is active
        :param pulumi.Input[str] location: Location to create new Datasets in
        :param pulumi.Input[int] maximum_bytes_billed: Max number of bytes that can be billed for a given BigQuery query
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] priority: The priority with which to execute BigQuery queries (batch or interactive)
        :param pulumi.Input[str] private_key: Private key of the Service Account
        :param pulumi.Input[str] private_key_id: Private key ID of the Service Account
        :param pulumi.Input[int] project_id: Project ID to create the connection in
        :param pulumi.Input[int] retries: Number of retries for queries
        :param pulumi.Input[int] timeout_seconds: Timeout in seconds for queries
        :param pulumi.Input[str] token_uri: Token URI for the Service Account
        :param pulumi.Input[str] type: The type of connection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BigQueryConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource to create BigQuery connections in dbt Cloud. Can be set to use OAuth for developers.

        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud

        # NOTE for customers using the LEGACY dbt_cloud provider:
        my_connection = dbtcloud.BigQueryConnection("myConnection",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="bigquery",
            is_active=True,
            gcp_project_id="my-gcp-project-id",
            timeout_seconds=100,
            private_key_id="my-private-key-id",
            private_key="ABCDEFGHIJKL",
            client_email="my_client_email",
            client_id="my_client_di",
            auth_uri="my_auth_uri",
            token_uri="my_token_uri",
            auth_provider_x509_cert_url="my_auth_provider_x509_cert_url",
            client_x509_cert_url="my_client_x509_cert_url",
            retries=3)
        # it is also possible to set the connection to use OAuth by filling in `application_id` and `application_secret`
        my_connection_with_oauth = dbtcloud.BigQueryConnection("myConnectionWithOauth",
            project_id=dbtcloud_project["dbt_project"]["id"],
            type="bigquery",
            is_active=True,
            gcp_project_id="my-gcp-project-id",
            timeout_seconds=100,
            private_key_id="my-private-key-id",
            private_key="ABCDEFGHIJKL",
            client_email="my_client_email",
            client_id="my_client_di",
            auth_uri="my_auth_uri",
            token_uri="my_token_uri",
            auth_provider_x509_cert_url="my_auth_provider_x509_cert_url",
            client_x509_cert_url="my_client_x509_cert_url",
            retries=3,
            application_id="oauth_application_id",
            application_secret="oauth_secret_id")
        ```

        ## Import

        ```sh
         $ pulumi import dbtcloud:index/bigQueryConnection:BigQueryConnection my_connection "project_id:connection_id"
        ```

        ```sh
         $ pulumi import dbtcloud:index/bigQueryConnection:BigQueryConnection my_connection 12345:6789
        ```

        :param str resource_name: The name of the resource.
        :param BigQueryConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BigQueryConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_secret: Optional[pulumi.Input[str]] = None,
                 auth_provider_x509_cert_url: Optional[pulumi.Input[str]] = None,
                 auth_uri: Optional[pulumi.Input[str]] = None,
                 client_email: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_x509_cert_url: Optional[pulumi.Input[str]] = None,
                 dataproc_cluster_name: Optional[pulumi.Input[str]] = None,
                 dataproc_region: Optional[pulumi.Input[str]] = None,
                 execution_project: Optional[pulumi.Input[str]] = None,
                 gcp_project_id: Optional[pulumi.Input[str]] = None,
                 gcs_bucket: Optional[pulumi.Input[str]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_bytes_billed: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 token_uri: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BigQueryConnectionArgs.__new__(BigQueryConnectionArgs)

            __props__.__dict__["application_id"] = None if application_id is None else pulumi.Output.secret(application_id)
            __props__.__dict__["application_secret"] = None if application_secret is None else pulumi.Output.secret(application_secret)
            if auth_provider_x509_cert_url is None and not opts.urn:
                raise TypeError("Missing required property 'auth_provider_x509_cert_url'")
            __props__.__dict__["auth_provider_x509_cert_url"] = auth_provider_x509_cert_url
            if auth_uri is None and not opts.urn:
                raise TypeError("Missing required property 'auth_uri'")
            __props__.__dict__["auth_uri"] = auth_uri
            if client_email is None and not opts.urn:
                raise TypeError("Missing required property 'client_email'")
            __props__.__dict__["client_email"] = client_email
            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = client_id
            if client_x509_cert_url is None and not opts.urn:
                raise TypeError("Missing required property 'client_x509_cert_url'")
            __props__.__dict__["client_x509_cert_url"] = client_x509_cert_url
            __props__.__dict__["dataproc_cluster_name"] = dataproc_cluster_name
            __props__.__dict__["dataproc_region"] = dataproc_region
            __props__.__dict__["execution_project"] = execution_project
            if gcp_project_id is None and not opts.urn:
                raise TypeError("Missing required property 'gcp_project_id'")
            __props__.__dict__["gcp_project_id"] = gcp_project_id
            __props__.__dict__["gcs_bucket"] = gcs_bucket
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["location"] = location
            __props__.__dict__["maximum_bytes_billed"] = maximum_bytes_billed
            __props__.__dict__["name"] = name
            __props__.__dict__["priority"] = priority
            if private_key is None and not opts.urn:
                raise TypeError("Missing required property 'private_key'")
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            if private_key_id is None and not opts.urn:
                raise TypeError("Missing required property 'private_key_id'")
            __props__.__dict__["private_key_id"] = private_key_id
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["retries"] = retries
            if timeout_seconds is None and not opts.urn:
                raise TypeError("Missing required property 'timeout_seconds'")
            __props__.__dict__["timeout_seconds"] = timeout_seconds
            if token_uri is None and not opts.urn:
                raise TypeError("Missing required property 'token_uri'")
            __props__.__dict__["token_uri"] = token_uri
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["connection_id"] = None
            __props__.__dict__["is_configured_for_oauth"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["applicationId", "applicationSecret", "privateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(BigQueryConnection, __self__).__init__(
            'dbtcloud:index/bigQueryConnection:BigQueryConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            application_secret: Optional[pulumi.Input[str]] = None,
            auth_provider_x509_cert_url: Optional[pulumi.Input[str]] = None,
            auth_uri: Optional[pulumi.Input[str]] = None,
            client_email: Optional[pulumi.Input[str]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_x509_cert_url: Optional[pulumi.Input[str]] = None,
            connection_id: Optional[pulumi.Input[int]] = None,
            dataproc_cluster_name: Optional[pulumi.Input[str]] = None,
            dataproc_region: Optional[pulumi.Input[str]] = None,
            execution_project: Optional[pulumi.Input[str]] = None,
            gcp_project_id: Optional[pulumi.Input[str]] = None,
            gcs_bucket: Optional[pulumi.Input[str]] = None,
            is_active: Optional[pulumi.Input[bool]] = None,
            is_configured_for_oauth: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maximum_bytes_billed: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            private_key_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            retries: Optional[pulumi.Input[int]] = None,
            timeout_seconds: Optional[pulumi.Input[int]] = None,
            token_uri: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'BigQueryConnection':
        """
        Get an existing BigQueryConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: The Application ID for BQ OAuth
        :param pulumi.Input[str] application_secret: The Application Secret for BQ OAuth
        :param pulumi.Input[str] auth_provider_x509_cert_url: Auth Provider X509 Cert URL for the Service Account
        :param pulumi.Input[str] auth_uri: Auth URI for the Service Account
        :param pulumi.Input[str] client_email: Service Account email
        :param pulumi.Input[str] client_id: Client ID of the Service Account
        :param pulumi.Input[str] client_x509_cert_url: Client X509 Cert URL for the Service Account
        :param pulumi.Input[int] connection_id: Connection Identifier
        :param pulumi.Input[str] dataproc_cluster_name: Dataproc cluster name for PySpark workloads
        :param pulumi.Input[str] dataproc_region: Google Cloud region for PySpark workloads on Dataproc
        :param pulumi.Input[str] execution_project: Project to bill for query execution
        :param pulumi.Input[str] gcp_project_id: GCP project ID
        :param pulumi.Input[str] gcs_bucket: URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        :param pulumi.Input[bool] is_active: Whether the connection is active
        :param pulumi.Input[bool] is_configured_for_oauth: Whether the connection is configured for OAuth or not
        :param pulumi.Input[str] location: Location to create new Datasets in
        :param pulumi.Input[int] maximum_bytes_billed: Max number of bytes that can be billed for a given BigQuery query
        :param pulumi.Input[str] name: Connection name
        :param pulumi.Input[str] priority: The priority with which to execute BigQuery queries (batch or interactive)
        :param pulumi.Input[str] private_key: Private key of the Service Account
        :param pulumi.Input[str] private_key_id: Private key ID of the Service Account
        :param pulumi.Input[int] project_id: Project ID to create the connection in
        :param pulumi.Input[int] retries: Number of retries for queries
        :param pulumi.Input[int] timeout_seconds: Timeout in seconds for queries
        :param pulumi.Input[str] token_uri: Token URI for the Service Account
        :param pulumi.Input[str] type: The type of connection
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BigQueryConnectionState.__new__(_BigQueryConnectionState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["application_secret"] = application_secret
        __props__.__dict__["auth_provider_x509_cert_url"] = auth_provider_x509_cert_url
        __props__.__dict__["auth_uri"] = auth_uri
        __props__.__dict__["client_email"] = client_email
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_x509_cert_url"] = client_x509_cert_url
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["dataproc_cluster_name"] = dataproc_cluster_name
        __props__.__dict__["dataproc_region"] = dataproc_region
        __props__.__dict__["execution_project"] = execution_project
        __props__.__dict__["gcp_project_id"] = gcp_project_id
        __props__.__dict__["gcs_bucket"] = gcs_bucket
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["is_configured_for_oauth"] = is_configured_for_oauth
        __props__.__dict__["location"] = location
        __props__.__dict__["maximum_bytes_billed"] = maximum_bytes_billed
        __props__.__dict__["name"] = name
        __props__.__dict__["priority"] = priority
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["private_key_id"] = private_key_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["retries"] = retries
        __props__.__dict__["timeout_seconds"] = timeout_seconds
        __props__.__dict__["token_uri"] = token_uri
        __props__.__dict__["type"] = type
        return BigQueryConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[Optional[str]]:
        """
        The Application ID for BQ OAuth
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationSecret")
    def application_secret(self) -> pulumi.Output[Optional[str]]:
        """
        The Application Secret for BQ OAuth
        """
        return pulumi.get(self, "application_secret")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> pulumi.Output[str]:
        """
        Auth Provider X509 Cert URL for the Service Account
        """
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> pulumi.Output[str]:
        """
        Auth URI for the Service Account
        """
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> pulumi.Output[str]:
        """
        Service Account email
        """
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        Client ID of the Service Account
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> pulumi.Output[str]:
        """
        Client X509 Cert URL for the Service Account
        """
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[int]:
        """
        Connection Identifier
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="dataprocClusterName")
    def dataproc_cluster_name(self) -> pulumi.Output[Optional[str]]:
        """
        Dataproc cluster name for PySpark workloads
        """
        return pulumi.get(self, "dataproc_cluster_name")

    @property
    @pulumi.getter(name="dataprocRegion")
    def dataproc_region(self) -> pulumi.Output[Optional[str]]:
        """
        Google Cloud region for PySpark workloads on Dataproc
        """
        return pulumi.get(self, "dataproc_region")

    @property
    @pulumi.getter(name="executionProject")
    def execution_project(self) -> pulumi.Output[Optional[str]]:
        """
        Project to bill for query execution
        """
        return pulumi.get(self, "execution_project")

    @property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> pulumi.Output[str]:
        """
        GCP project ID
        """
        return pulumi.get(self, "gcp_project_id")

    @property
    @pulumi.getter(name="gcsBucket")
    def gcs_bucket(self) -> pulumi.Output[Optional[str]]:
        """
        URI for a Google Cloud Storage bucket to host Python code executed via Datapro
        """
        return pulumi.get(self, "gcs_bucket")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the connection is active
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isConfiguredForOauth")
    def is_configured_for_oauth(self) -> pulumi.Output[bool]:
        """
        Whether the connection is configured for OAuth or not
        """
        return pulumi.get(self, "is_configured_for_oauth")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        Location to create new Datasets in
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maximumBytesBilled")
    def maximum_bytes_billed(self) -> pulumi.Output[Optional[int]]:
        """
        Max number of bytes that can be billed for a given BigQuery query
        """
        return pulumi.get(self, "maximum_bytes_billed")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[str]]:
        """
        The priority with which to execute BigQuery queries (batch or interactive)
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[str]:
        """
        Private key of the Service Account
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> pulumi.Output[str]:
        """
        Private key ID of the Service Account
        """
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        Project ID to create the connection in
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Output[Optional[int]]:
        """
        Number of retries for queries
        """
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> pulumi.Output[int]:
        """
        Timeout in seconds for queries
        """
        return pulumi.get(self, "timeout_seconds")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> pulumi.Output[str]:
        """
        Token URI for the Service Account
        """
        return pulumi.get(self, "token_uri")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of connection
        """
        return pulumi.get(self, "type")


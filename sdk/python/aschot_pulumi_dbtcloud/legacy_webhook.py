# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['LegacyWebhookArgs', 'LegacyWebhook']

@pulumi.input_type
class LegacyWebhookArgs:
    def __init__(__self__, *,
                 client_url: pulumi.Input[str],
                 event_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 active: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 job_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LegacyWebhook resource.
        :param pulumi.Input[str] client_url: Webhooks Client URL
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_types: Webhooks Event Types
        :param pulumi.Input[bool] active: Webhooks active flag
        :param pulumi.Input[str] description: Webhooks Description
        :param pulumi.Input[Sequence[pulumi.Input[int]]] job_ids: List of job IDs to trigger the webhook, An empty list will trigger on all jobs
        :param pulumi.Input[str] name: Webhooks Name
        """
        pulumi.set(__self__, "client_url", client_url)
        pulumi.set(__self__, "event_types", event_types)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if job_ids is not None:
            pulumi.set(__self__, "job_ids", job_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clientUrl")
    def client_url(self) -> pulumi.Input[str]:
        """
        Webhooks Client URL
        """
        return pulumi.get(self, "client_url")

    @client_url.setter
    def client_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_url", value)

    @property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Webhooks Event Types
        """
        return pulumi.get(self, "event_types")

    @event_types.setter
    def event_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "event_types", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Webhooks active flag
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Webhooks Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="jobIds")
    def job_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of job IDs to trigger the webhook, An empty list will trigger on all jobs
        """
        return pulumi.get(self, "job_ids")

    @job_ids.setter
    def job_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "job_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Webhooks Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _LegacyWebhookState:
    def __init__(__self__, *,
                 account_identifier: Optional[pulumi.Input[str]] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 client_url: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 hmac_secret: Optional[pulumi.Input[str]] = None,
                 http_status_code: Optional[pulumi.Input[str]] = None,
                 job_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 webhook_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LegacyWebhook resources.
        :param pulumi.Input[str] account_identifier: Webhooks Account Identifier
        :param pulumi.Input[bool] active: Webhooks active flag
        :param pulumi.Input[str] client_url: Webhooks Client URL
        :param pulumi.Input[str] description: Webhooks Description
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_types: Webhooks Event Types
        :param pulumi.Input[str] hmac_secret: Secret key for the webhook. Can be used to validate the authenticity of the webhook.
        :param pulumi.Input[str] http_status_code: Latest HTTP status of the webhook
        :param pulumi.Input[Sequence[pulumi.Input[int]]] job_ids: List of job IDs to trigger the webhook, An empty list will trigger on all jobs
        :param pulumi.Input[str] name: Webhooks Name
        :param pulumi.Input[str] webhook_id: Webhooks ID
        """
        if account_identifier is not None:
            pulumi.set(__self__, "account_identifier", account_identifier)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if client_url is not None:
            pulumi.set(__self__, "client_url", client_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if event_types is not None:
            pulumi.set(__self__, "event_types", event_types)
        if hmac_secret is not None:
            pulumi.set(__self__, "hmac_secret", hmac_secret)
        if http_status_code is not None:
            pulumi.set(__self__, "http_status_code", http_status_code)
        if job_ids is not None:
            pulumi.set(__self__, "job_ids", job_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if webhook_id is not None:
            pulumi.set(__self__, "webhook_id", webhook_id)

    @property
    @pulumi.getter(name="accountIdentifier")
    def account_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Webhooks Account Identifier
        """
        return pulumi.get(self, "account_identifier")

    @account_identifier.setter
    def account_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_identifier", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Webhooks active flag
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="clientUrl")
    def client_url(self) -> Optional[pulumi.Input[str]]:
        """
        Webhooks Client URL
        """
        return pulumi.get(self, "client_url")

    @client_url.setter
    def client_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_url", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Webhooks Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Webhooks Event Types
        """
        return pulumi.get(self, "event_types")

    @event_types.setter
    def event_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "event_types", value)

    @property
    @pulumi.getter(name="hmacSecret")
    def hmac_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Secret key for the webhook. Can be used to validate the authenticity of the webhook.
        """
        return pulumi.get(self, "hmac_secret")

    @hmac_secret.setter
    def hmac_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hmac_secret", value)

    @property
    @pulumi.getter(name="httpStatusCode")
    def http_status_code(self) -> Optional[pulumi.Input[str]]:
        """
        Latest HTTP status of the webhook
        """
        return pulumi.get(self, "http_status_code")

    @http_status_code.setter
    def http_status_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_status_code", value)

    @property
    @pulumi.getter(name="jobIds")
    def job_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of job IDs to trigger the webhook, An empty list will trigger on all jobs
        """
        return pulumi.get(self, "job_ids")

    @job_ids.setter
    def job_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "job_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Webhooks Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> Optional[pulumi.Input[str]]:
        """
        Webhooks ID
        """
        return pulumi.get(self, "webhook_id")

    @webhook_id.setter
    def webhook_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_id", value)


class LegacyWebhook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 client_url: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 job_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LegacyWebhook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Webhooks active flag
        :param pulumi.Input[str] client_url: Webhooks Client URL
        :param pulumi.Input[str] description: Webhooks Description
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_types: Webhooks Event Types
        :param pulumi.Input[Sequence[pulumi.Input[int]]] job_ids: List of job IDs to trigger the webhook, An empty list will trigger on all jobs
        :param pulumi.Input[str] name: Webhooks Name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LegacyWebhookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LegacyWebhook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LegacyWebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LegacyWebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 client_url: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 job_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LegacyWebhookArgs.__new__(LegacyWebhookArgs)

            __props__.__dict__["active"] = active
            if client_url is None and not opts.urn:
                raise TypeError("Missing required property 'client_url'")
            __props__.__dict__["client_url"] = client_url
            __props__.__dict__["description"] = description
            if event_types is None and not opts.urn:
                raise TypeError("Missing required property 'event_types'")
            __props__.__dict__["event_types"] = event_types
            __props__.__dict__["job_ids"] = job_ids
            __props__.__dict__["name"] = name
            __props__.__dict__["account_identifier"] = None
            __props__.__dict__["hmac_secret"] = None
            __props__.__dict__["http_status_code"] = None
            __props__.__dict__["webhook_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["hmacSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(LegacyWebhook, __self__).__init__(
            'dbtcloud:index/legacyWebhook:LegacyWebhook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_identifier: Optional[pulumi.Input[str]] = None,
            active: Optional[pulumi.Input[bool]] = None,
            client_url: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            hmac_secret: Optional[pulumi.Input[str]] = None,
            http_status_code: Optional[pulumi.Input[str]] = None,
            job_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            webhook_id: Optional[pulumi.Input[str]] = None) -> 'LegacyWebhook':
        """
        Get an existing LegacyWebhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_identifier: Webhooks Account Identifier
        :param pulumi.Input[bool] active: Webhooks active flag
        :param pulumi.Input[str] client_url: Webhooks Client URL
        :param pulumi.Input[str] description: Webhooks Description
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_types: Webhooks Event Types
        :param pulumi.Input[str] hmac_secret: Secret key for the webhook. Can be used to validate the authenticity of the webhook.
        :param pulumi.Input[str] http_status_code: Latest HTTP status of the webhook
        :param pulumi.Input[Sequence[pulumi.Input[int]]] job_ids: List of job IDs to trigger the webhook, An empty list will trigger on all jobs
        :param pulumi.Input[str] name: Webhooks Name
        :param pulumi.Input[str] webhook_id: Webhooks ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LegacyWebhookState.__new__(_LegacyWebhookState)

        __props__.__dict__["account_identifier"] = account_identifier
        __props__.__dict__["active"] = active
        __props__.__dict__["client_url"] = client_url
        __props__.__dict__["description"] = description
        __props__.__dict__["event_types"] = event_types
        __props__.__dict__["hmac_secret"] = hmac_secret
        __props__.__dict__["http_status_code"] = http_status_code
        __props__.__dict__["job_ids"] = job_ids
        __props__.__dict__["name"] = name
        __props__.__dict__["webhook_id"] = webhook_id
        return LegacyWebhook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountIdentifier")
    def account_identifier(self) -> pulumi.Output[str]:
        """
        Webhooks Account Identifier
        """
        return pulumi.get(self, "account_identifier")

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Webhooks active flag
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="clientUrl")
    def client_url(self) -> pulumi.Output[str]:
        """
        Webhooks Client URL
        """
        return pulumi.get(self, "client_url")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Webhooks Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> pulumi.Output[Sequence[str]]:
        """
        Webhooks Event Types
        """
        return pulumi.get(self, "event_types")

    @property
    @pulumi.getter(name="hmacSecret")
    def hmac_secret(self) -> pulumi.Output[str]:
        """
        Secret key for the webhook. Can be used to validate the authenticity of the webhook.
        """
        return pulumi.get(self, "hmac_secret")

    @property
    @pulumi.getter(name="httpStatusCode")
    def http_status_code(self) -> pulumi.Output[str]:
        """
        Latest HTTP status of the webhook
        """
        return pulumi.get(self, "http_status_code")

    @property
    @pulumi.getter(name="jobIds")
    def job_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of job IDs to trigger the webhook, An empty list will trigger on all jobs
        """
        return pulumi.get(self, "job_ids")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Webhooks Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> pulumi.Output[str]:
        """
        Webhooks ID
        """
        return pulumi.get(self, "webhook_id")


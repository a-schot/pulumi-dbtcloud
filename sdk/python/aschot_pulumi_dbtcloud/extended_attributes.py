# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ExtendedAttributesArgs', 'ExtendedAttributes']

@pulumi.input_type
class ExtendedAttributesArgs:
    def __init__(__self__, *,
                 extended_attributes: pulumi.Input[str],
                 project_id: pulumi.Input[int],
                 state: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ExtendedAttributes resource.
        :param pulumi.Input[str] extended_attributes: A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
               `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
               environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
               in your Terraform code. (see example)
        :param pulumi.Input[int] project_id: Project ID to create the extended attributes in
        :param pulumi.Input[int] state: Extended Attributes state (1 is active, 2 is inactive)
        """
        pulumi.set(__self__, "extended_attributes", extended_attributes)
        pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="extendedAttributes")
    def extended_attributes(self) -> pulumi.Input[str]:
        """
        A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
        `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
        environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
        in your Terraform code. (see example)
        """
        return pulumi.get(self, "extended_attributes")

    @extended_attributes.setter
    def extended_attributes(self, value: pulumi.Input[str]):
        pulumi.set(self, "extended_attributes", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[int]:
        """
        Project ID to create the extended attributes in
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[int]]:
        """
        Extended Attributes state (1 is active, 2 is inactive)
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class _ExtendedAttributesState:
    def __init__(__self__, *,
                 extended_attributes: Optional[pulumi.Input[str]] = None,
                 extended_attributes_id: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ExtendedAttributes resources.
        :param pulumi.Input[str] extended_attributes: A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
               `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
               environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
               in your Terraform code. (see example)
        :param pulumi.Input[int] extended_attributes_id: Extended Attributes ID
        :param pulumi.Input[int] project_id: Project ID to create the extended attributes in
        :param pulumi.Input[int] state: Extended Attributes state (1 is active, 2 is inactive)
        """
        if extended_attributes is not None:
            pulumi.set(__self__, "extended_attributes", extended_attributes)
        if extended_attributes_id is not None:
            pulumi.set(__self__, "extended_attributes_id", extended_attributes_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="extendedAttributes")
    def extended_attributes(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
        `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
        environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
        in your Terraform code. (see example)
        """
        return pulumi.get(self, "extended_attributes")

    @extended_attributes.setter
    def extended_attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_attributes", value)

    @property
    @pulumi.getter(name="extendedAttributesId")
    def extended_attributes_id(self) -> Optional[pulumi.Input[int]]:
        """
        Extended Attributes ID
        """
        return pulumi.get(self, "extended_attributes_id")

    @extended_attributes_id.setter
    def extended_attributes_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "extended_attributes_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID to create the extended attributes in
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[int]]:
        """
        Extended Attributes state (1 is active, 2 is inactive)
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state", value)


class ExtendedAttributes(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 extended_attributes: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource allows setting extended attributes which can be assigned to a given environment ([see docs](https://docs.getdbt.com/docs/dbt-cloud-environments#extended-attributes-beta)).<br/><br/>In dbt Cloud those values are provided as YML but in the provider they need to be provided as JSON (see example below).

        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud
        import json

        # extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function
        # we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering
        my_attributes = dbtcloud.ExtendedAttributes("myAttributes",
            extended_attributes=json.dumps({
                "type": "databricks",
                "catalog": "dbt_catalog",
                "http_path": "/sql/your/http/path",
                "my_nested_field": {
                    "subfield": "my_value",
                },
            }),
            project_id=var["dbt_project"]["id"])
        issue_depl = dbtcloud.Environment("issueDepl",
            dbt_version="1.6.0-latest",
            project_id=var["dbt_project"]["id"],
            type="deployment",
            use_custom_branch=False,
            credential_id=var["dbt_credential_id"],
            deployment_type="production",
            extended_attributes_id=my_attributes.extended_attributes_id)
        ```

        ## Import

        Import using a project ID and extended attribute ID found in the URL or via the API.

        ```sh
        $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes "project_id_id:extended_attributes_id"
        ```

        ```sh
        $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes 12345:6789
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] extended_attributes: A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
               `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
               environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
               in your Terraform code. (see example)
        :param pulumi.Input[int] project_id: Project ID to create the extended attributes in
        :param pulumi.Input[int] state: Extended Attributes state (1 is active, 2 is inactive)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExtendedAttributesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows setting extended attributes which can be assigned to a given environment ([see docs](https://docs.getdbt.com/docs/dbt-cloud-environments#extended-attributes-beta)).<br/><br/>In dbt Cloud those values are provided as YML but in the provider they need to be provided as JSON (see example below).

        ## Example Usage

        ```python
        import pulumi
        import aschot_pulumi_dbtcloud as dbtcloud
        import json

        # extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function
        # we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering
        my_attributes = dbtcloud.ExtendedAttributes("myAttributes",
            extended_attributes=json.dumps({
                "type": "databricks",
                "catalog": "dbt_catalog",
                "http_path": "/sql/your/http/path",
                "my_nested_field": {
                    "subfield": "my_value",
                },
            }),
            project_id=var["dbt_project"]["id"])
        issue_depl = dbtcloud.Environment("issueDepl",
            dbt_version="1.6.0-latest",
            project_id=var["dbt_project"]["id"],
            type="deployment",
            use_custom_branch=False,
            credential_id=var["dbt_credential_id"],
            deployment_type="production",
            extended_attributes_id=my_attributes.extended_attributes_id)
        ```

        ## Import

        Import using a project ID and extended attribute ID found in the URL or via the API.

        ```sh
        $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes "project_id_id:extended_attributes_id"
        ```

        ```sh
        $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes 12345:6789
        ```

        :param str resource_name: The name of the resource.
        :param ExtendedAttributesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExtendedAttributesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 extended_attributes: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExtendedAttributesArgs.__new__(ExtendedAttributesArgs)

            if extended_attributes is None and not opts.urn:
                raise TypeError("Missing required property 'extended_attributes'")
            __props__.__dict__["extended_attributes"] = extended_attributes
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["state"] = state
            __props__.__dict__["extended_attributes_id"] = None
        super(ExtendedAttributes, __self__).__init__(
            'dbtcloud:index/extendedAttributes:ExtendedAttributes',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            extended_attributes: Optional[pulumi.Input[str]] = None,
            extended_attributes_id: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            state: Optional[pulumi.Input[int]] = None) -> 'ExtendedAttributes':
        """
        Get an existing ExtendedAttributes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] extended_attributes: A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
               `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
               environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
               in your Terraform code. (see example)
        :param pulumi.Input[int] extended_attributes_id: Extended Attributes ID
        :param pulumi.Input[int] project_id: Project ID to create the extended attributes in
        :param pulumi.Input[int] state: Extended Attributes state (1 is active, 2 is inactive)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExtendedAttributesState.__new__(_ExtendedAttributesState)

        __props__.__dict__["extended_attributes"] = extended_attributes
        __props__.__dict__["extended_attributes_id"] = extended_attributes_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["state"] = state
        return ExtendedAttributes(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="extendedAttributes")
    def extended_attributes(self) -> pulumi.Output[str]:
        """
        A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the
        `profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the
        environment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`
        in your Terraform code. (see example)
        """
        return pulumi.get(self, "extended_attributes")

    @property
    @pulumi.getter(name="extendedAttributesId")
    def extended_attributes_id(self) -> pulumi.Output[int]:
        """
        Extended Attributes ID
        """
        return pulumi.get(self, "extended_attributes_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        Project ID to create the extended attributes in
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[int]]:
        """
        Extended Attributes state (1 is active, 2 is inactive)
        """
        return pulumi.get(self, "state")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNotificationResult',
    'AwaitableGetNotificationResult',
    'get_notification',
    'get_notification_output',
]

@pulumi.output_type
class GetNotificationResult:
    """
    A collection of values returned by getNotification.
    """
    def __init__(__self__, external_email=None, id=None, notification_id=None, notification_type=None, on_cancels=None, on_failures=None, on_successes=None, user_id=None):
        if external_email and not isinstance(external_email, str):
            raise TypeError("Expected argument 'external_email' to be a str")
        pulumi.set(__self__, "external_email", external_email)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if notification_id and not isinstance(notification_id, int):
            raise TypeError("Expected argument 'notification_id' to be a int")
        pulumi.set(__self__, "notification_id", notification_id)
        if notification_type and not isinstance(notification_type, int):
            raise TypeError("Expected argument 'notification_type' to be a int")
        pulumi.set(__self__, "notification_type", notification_type)
        if on_cancels and not isinstance(on_cancels, list):
            raise TypeError("Expected argument 'on_cancels' to be a list")
        pulumi.set(__self__, "on_cancels", on_cancels)
        if on_failures and not isinstance(on_failures, list):
            raise TypeError("Expected argument 'on_failures' to be a list")
        pulumi.set(__self__, "on_failures", on_failures)
        if on_successes and not isinstance(on_successes, list):
            raise TypeError("Expected argument 'on_successes' to be a list")
        pulumi.set(__self__, "on_successes", on_successes)
        if user_id and not isinstance(user_id, int):
            raise TypeError("Expected argument 'user_id' to be a int")
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="externalEmail")
    def external_email(self) -> str:
        """
        The external email to receive the notification
        """
        return pulumi.get(self, "external_email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="notificationId")
    def notification_id(self) -> int:
        """
        ID of the notification
        """
        return pulumi.get(self, "notification_id")

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> int:
        """
        Type of notification (1 = dbt Cloud user email (default): does not require an external*email ; 4 = external email: requires setting an external*email)
        """
        return pulumi.get(self, "notification_type")

    @property
    @pulumi.getter(name="onCancels")
    def on_cancels(self) -> Sequence[int]:
        """
        List of job IDs to trigger the webhook on cancel
        """
        return pulumi.get(self, "on_cancels")

    @property
    @pulumi.getter(name="onFailures")
    def on_failures(self) -> Sequence[int]:
        """
        List of job IDs to trigger the webhook on failure
        """
        return pulumi.get(self, "on_failures")

    @property
    @pulumi.getter(name="onSuccesses")
    def on_successes(self) -> Sequence[int]:
        """
        List of job IDs to trigger the webhook on success
        """
        return pulumi.get(self, "on_successes")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> int:
        """
        Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one
        """
        return pulumi.get(self, "user_id")


class AwaitableGetNotificationResult(GetNotificationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNotificationResult(
            external_email=self.external_email,
            id=self.id,
            notification_id=self.notification_id,
            notification_type=self.notification_type,
            on_cancels=self.on_cancels,
            on_failures=self.on_failures,
            on_successes=self.on_successes,
            user_id=self.user_id)


def get_notification(notification_id: Optional[int] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNotificationResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_dbtcloud as dbtcloud

    my_notification = dbtcloud.get_notification(notification_id=12345)
    ```


    :param int notification_id: ID of the notification
    """
    __args__ = dict()
    __args__['notificationId'] = notification_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dbtcloud:index/getNotification:getNotification', __args__, opts=opts, typ=GetNotificationResult).value

    return AwaitableGetNotificationResult(
        external_email=pulumi.get(__ret__, 'external_email'),
        id=pulumi.get(__ret__, 'id'),
        notification_id=pulumi.get(__ret__, 'notification_id'),
        notification_type=pulumi.get(__ret__, 'notification_type'),
        on_cancels=pulumi.get(__ret__, 'on_cancels'),
        on_failures=pulumi.get(__ret__, 'on_failures'),
        on_successes=pulumi.get(__ret__, 'on_successes'),
        user_id=pulumi.get(__ret__, 'user_id'))


@_utilities.lift_output_func(get_notification)
def get_notification_output(notification_id: Optional[pulumi.Input[int]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNotificationResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_dbtcloud as dbtcloud

    my_notification = dbtcloud.get_notification(notification_id=12345)
    ```


    :param int notification_id: ID of the notification
    """
    ...

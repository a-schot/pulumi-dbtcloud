# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetExtendedAttributesResult',
    'AwaitableGetExtendedAttributesResult',
    'get_extended_attributes',
    'get_extended_attributes_output',
]

@pulumi.output_type
class GetExtendedAttributesResult:
    """
    A collection of values returned by getExtendedAttributes.
    """
    def __init__(__self__, extended_attributes=None, extended_attributes_id=None, id=None, project_id=None, state=None):
        if extended_attributes and not isinstance(extended_attributes, str):
            raise TypeError("Expected argument 'extended_attributes' to be a str")
        pulumi.set(__self__, "extended_attributes", extended_attributes)
        if extended_attributes_id and not isinstance(extended_attributes_id, int):
            raise TypeError("Expected argument 'extended_attributes_id' to be a int")
        pulumi.set(__self__, "extended_attributes_id", extended_attributes_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if state and not isinstance(state, int):
            raise TypeError("Expected argument 'state' to be a int")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="extendedAttributes")
    def extended_attributes(self) -> str:
        """
        A JSON string listing the extended attributes mapping
        """
        return pulumi.get(self, "extended_attributes")

    @property
    @pulumi.getter(name="extendedAttributesId")
    def extended_attributes_id(self) -> int:
        """
        ID of the extended attributes
        """
        return pulumi.get(self, "extended_attributes_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID the extended attributes refers to
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> int:
        """
        The state of the extended attributes (1 = active, 2 = inactive)
        """
        return pulumi.get(self, "state")


class AwaitableGetExtendedAttributesResult(GetExtendedAttributesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExtendedAttributesResult(
            extended_attributes=self.extended_attributes,
            extended_attributes_id=self.extended_attributes_id,
            id=self.id,
            project_id=self.project_id,
            state=self.state)


def get_extended_attributes(extended_attributes_id: Optional[int] = None,
                            project_id: Optional[int] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExtendedAttributesResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_dbtcloud as dbtcloud

    my_extended_attributes = dbtcloud.get_extended_attributes(extended_attributes_id=12345,
        project_id=6789)
    ```


    :param int extended_attributes_id: ID of the extended attributes
    :param int project_id: Project ID the extended attributes refers to
    """
    __args__ = dict()
    __args__['extendedAttributesId'] = extended_attributes_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dbtcloud:index/getExtendedAttributes:getExtendedAttributes', __args__, opts=opts, typ=GetExtendedAttributesResult).value

    return AwaitableGetExtendedAttributesResult(
        extended_attributes=pulumi.get(__ret__, 'extended_attributes'),
        extended_attributes_id=pulumi.get(__ret__, 'extended_attributes_id'),
        id=pulumi.get(__ret__, 'id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_extended_attributes)
def get_extended_attributes_output(extended_attributes_id: Optional[pulumi.Input[int]] = None,
                                   project_id: Optional[pulumi.Input[int]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetExtendedAttributesResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_dbtcloud as dbtcloud

    my_extended_attributes = dbtcloud.get_extended_attributes(extended_attributes_id=12345,
        project_id=6789)
    ```


    :param int extended_attributes_id: ID of the extended attributes
    :param int project_id: Project ID the extended attributes refers to
    """
    ...

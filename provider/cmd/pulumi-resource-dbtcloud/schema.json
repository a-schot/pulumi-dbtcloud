{
    "name": "dbtcloud",
    "displayName": "dbt Cloud",
    "description": "A Pulumi package for creating and managing dbt Cloud resources.",
    "keywords": [
        "pulumi",
        "dbtcloud",
        "category/cloud",
        "dbt",
        "cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`dbtcloud` Terraform Provider](https://github.com/dbt-labs/terraform-provider-dbtcloud).",
    "repository": "https://github.com/a-schot/pulumi-dbtcloud",
    "pluginDownloadURL": "https://github.com/a-schot/pulumi-dbtcloud/releases/download/v${VERSION}",
    "publisher": "a-schot",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "ASchot.Pulumi"
        },
        "go": {
            "importBasePath": "github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@aschot/pulumi-dbtcloud",
            "packageDescription": "A Pulumi package for creating and managing dbt Cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/dbt-labs/terraform-provider-dbtcloud)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-dbtcloud` repo](https://github.com/a-schot/pulumi-dbtcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-dbtcloud` repo](https://github.com/dbt-labs/terraform-provider-dbtcloud/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "aschot_pulumi_dbtcloud",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/dbt-labs/terraform-provider-dbtcloud)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-dbtcloud` repo](https://github.com/a-schot/pulumi-dbtcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-dbtcloud` repo](https://github.com/dbt-labs/terraform-provider-dbtcloud/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "integer",
                "description": "Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment\nvariable `DBT_CLOUD_ACCOUNT_ID`\n"
            },
            "hostUrl": {
                "type": "string",
                "description": "URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable\n`DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api\n"
            },
            "token": {
                "type": "string",
                "description": "API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`\n"
            }
        },
        "defaults": [
            "accountId",
            "token"
        ]
    },
    "types": {
        "dbtcloud:index/GroupGroupPermission:GroupGroupPermission": {
            "properties": {
                "allProjects": {
                    "type": "boolean",
                    "description": "Whether or not to apply this permission to all projects for this group\n"
                },
                "permissionSet": {
                    "type": "string",
                    "description": "Set of permissions to apply\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to apply this permission to for this group\n"
                }
            },
            "type": "object",
            "required": [
                "allProjects",
                "permissionSet"
            ]
        },
        "dbtcloud:index/ServiceTokenServiceTokenPermission:ServiceTokenServiceTokenPermission": {
            "properties": {
                "allProjects": {
                    "type": "boolean",
                    "description": "Whether or not to apply this permission to all projects for this service token\n"
                },
                "permissionSet": {
                    "type": "string",
                    "description": "Set of permissions to apply\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to apply this permission to for this service token\n"
                }
            },
            "type": "object",
            "required": [
                "allProjects",
                "permissionSet"
            ]
        },
        "dbtcloud:index/getGroupUsersUser:getGroupUsersUser": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dbtcloud:index/getServiceTokenServiceTokenPermission:getServiceTokenServiceTokenPermission": {
            "properties": {
                "allProjects": {
                    "type": "boolean"
                },
                "permissionSet": {
                    "type": "string"
                },
                "projectId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "allProjects",
                "permissionSet",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the dbtcloud package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "integer",
                "description": "Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment\nvariable `DBT_CLOUD_ACCOUNT_ID`\n"
            },
            "hostUrl": {
                "type": "string",
                "description": "URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable\n`DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api\n"
            },
            "token": {
                "type": "string",
                "description": "API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`\n"
            }
        },
        "required": [
            "accountId",
            "token"
        ],
        "inputProperties": {
            "accountId": {
                "type": "integer",
                "description": "Account identifier for your dbt Cloud implementation. Instead of setting the parameter, you can set the environment\nvariable `DBT_CLOUD_ACCOUNT_ID`\n"
            },
            "hostUrl": {
                "type": "string",
                "description": "URL for your dbt Cloud deployment. Instead of setting the parameter, you can set the environment variable\n`DBT_CLOUD_HOST_URL` - Defaults to https://cloud.getdbt.com/api\n"
            },
            "token": {
                "type": "string",
                "description": "API token for your dbt Cloud. Instead of setting the parameter, you can set the environment variable `DBT_CLOUD_TOKEN`\n"
            }
        },
        "requiredInputs": [
            "accountId",
            "token"
        ]
    },
    "resources": {
        "dbtcloud:index/bigQueryConnection:BigQueryConnection": {
            "description": "Resource to create BigQuery connections in dbt Cloud. Can be set to use OAuth for developers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.BigQueryConnection;\nimport com.pulumi.dbtcloud.BigQueryConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myConnection = new BigQueryConnection(\"myConnection\", BigQueryConnectionArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .type(\"bigquery\")\n            .isActive(true)\n            .gcpProjectId(\"my-gcp-project-id\")\n            .timeoutSeconds(100)\n            .privateKeyId(\"my-private-key-id\")\n            .privateKey(\"ABCDEFGHIJKL\")\n            .clientEmail(\"my_client_email\")\n            .clientId(\"my_client_di\")\n            .authUri(\"my_auth_uri\")\n            .tokenUri(\"my_token_uri\")\n            .authProviderX509CertUrl(\"my_auth_provider_x509_cert_url\")\n            .clientX509CertUrl(\"my_client_x509_cert_url\")\n            .retries(3)\n            .build());\n\n        var myConnectionWithOauth = new BigQueryConnection(\"myConnectionWithOauth\", BigQueryConnectionArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .type(\"bigquery\")\n            .isActive(true)\n            .gcpProjectId(\"my-gcp-project-id\")\n            .timeoutSeconds(100)\n            .privateKeyId(\"my-private-key-id\")\n            .privateKey(\"ABCDEFGHIJKL\")\n            .clientEmail(\"my_client_email\")\n            .clientId(\"my_client_di\")\n            .authUri(\"my_auth_uri\")\n            .tokenUri(\"my_token_uri\")\n            .authProviderX509CertUrl(\"my_auth_provider_x509_cert_url\")\n            .clientX509CertUrl(\"my_client_x509_cert_url\")\n            .retries(3)\n            .appplicationId(\"oauth_application_id\")\n            .applicationSecret(\"oauth_secret_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_bigquery_connection instead of dbtcloud_bigquery_connection for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  myConnection:\n    type: dbtcloud:BigQueryConnection\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      type: bigquery\n      isActive: true\n      gcpProjectId: my-gcp-project-id\n      timeoutSeconds: 100\n      privateKeyId: my-private-key-id\n      privateKey: ABCDEFGHIJKL\n      clientEmail: my_client_email\n      clientId: my_client_di\n      authUri: my_auth_uri\n      tokenUri: my_token_uri\n      authProviderX509CertUrl: my_auth_provider_x509_cert_url\n      clientX509CertUrl: my_client_x509_cert_url\n      retries: 3\n  # it is also possible to set the connection to use OAuth by filling in `application_id` and `application_secret`\n  myConnectionWithOauth:\n    type: dbtcloud:BigQueryConnection\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      type: bigquery\n      isActive: true\n      gcpProjectId: my-gcp-project-id\n      timeoutSeconds: 100\n      privateKeyId: my-private-key-id\n      privateKey: ABCDEFGHIJKL\n      clientEmail: my_client_email\n      clientId: my_client_di\n      authUri: my_auth_uri\n      tokenUri: my_token_uri\n      authProviderX509CertUrl: my_auth_provider_x509_cert_url\n      clientX509CertUrl: my_client_x509_cert_url\n      retries: 3\n      appplicationId: oauth_application_id\n      applicationSecret: oauth_secret_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import dbtcloud:index/bigQueryConnection:BigQueryConnection my_connection \"project_id:connection_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/bigQueryConnection:BigQueryConnection my_connection 12345:6789\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The Application ID for BQ OAuth\n",
                    "secret": true
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "The Application Secret for BQ OAuth\n",
                    "secret": true
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "description": "Auth Provider X509 Cert URL for the Service Account\n"
                },
                "authUri": {
                    "type": "string",
                    "description": "Auth URI for the Service Account\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "Service Account email\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client ID of the Service Account\n"
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "description": "Client X509 Cert URL for the Service Account\n"
                },
                "connectionId": {
                    "type": "integer",
                    "description": "Connection Identifier\n"
                },
                "dataprocClusterName": {
                    "type": "string",
                    "description": "Dataproc cluster name for PySpark workloads\n"
                },
                "dataprocRegion": {
                    "type": "string",
                    "description": "Google Cloud region for PySpark workloads on Dataproc\n"
                },
                "executionProject": {
                    "type": "string",
                    "description": "Project to bill for query execution\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP project ID\n"
                },
                "gcsBucket": {
                    "type": "string",
                    "description": "URI for a Google Cloud Storage bucket to host Python code executed via Datapro\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the connection is active\n"
                },
                "isConfiguredForOauth": {
                    "type": "boolean",
                    "description": "Whether the connection is configured for OAuth or not\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location to create new Datasets in\n"
                },
                "maximumBytesBilled": {
                    "type": "integer",
                    "description": "Max number of bytes that can be billed for a given BigQuery query\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority with which to execute BigQuery queries (batch or interactive)\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private key of the Service Account\n",
                    "secret": true
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "Private key ID of the Service Account\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the connection in\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of retries for queries\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Timeout in seconds for queries\n"
                },
                "tokenUri": {
                    "type": "string",
                    "description": "Token URI for the Service Account\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of connection\n"
                }
            },
            "required": [
                "authProviderX509CertUrl",
                "authUri",
                "clientEmail",
                "clientId",
                "clientX509CertUrl",
                "connectionId",
                "gcpProjectId",
                "isConfiguredForOauth",
                "name",
                "privateKey",
                "privateKeyId",
                "projectId",
                "timeoutSeconds",
                "tokenUri",
                "type"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The Application ID for BQ OAuth\n",
                    "secret": true
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "The Application Secret for BQ OAuth\n",
                    "secret": true
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "description": "Auth Provider X509 Cert URL for the Service Account\n"
                },
                "authUri": {
                    "type": "string",
                    "description": "Auth URI for the Service Account\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "Service Account email\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Client ID of the Service Account\n"
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "description": "Client X509 Cert URL for the Service Account\n"
                },
                "dataprocClusterName": {
                    "type": "string",
                    "description": "Dataproc cluster name for PySpark workloads\n"
                },
                "dataprocRegion": {
                    "type": "string",
                    "description": "Google Cloud region for PySpark workloads on Dataproc\n"
                },
                "executionProject": {
                    "type": "string",
                    "description": "Project to bill for query execution\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP project ID\n"
                },
                "gcsBucket": {
                    "type": "string",
                    "description": "URI for a Google Cloud Storage bucket to host Python code executed via Datapro\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the connection is active\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location to create new Datasets in\n"
                },
                "maximumBytesBilled": {
                    "type": "integer",
                    "description": "Max number of bytes that can be billed for a given BigQuery query\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority with which to execute BigQuery queries (batch or interactive)\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private key of the Service Account\n",
                    "secret": true
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "Private key ID of the Service Account\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the connection in\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of retries for queries\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Timeout in seconds for queries\n"
                },
                "tokenUri": {
                    "type": "string",
                    "description": "Token URI for the Service Account\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of connection\n"
                }
            },
            "requiredInputs": [
                "authProviderX509CertUrl",
                "authUri",
                "clientEmail",
                "clientId",
                "clientX509CertUrl",
                "gcpProjectId",
                "privateKey",
                "privateKeyId",
                "projectId",
                "timeoutSeconds",
                "tokenUri",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BigQueryConnection resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The Application ID for BQ OAuth\n",
                        "secret": true
                    },
                    "applicationSecret": {
                        "type": "string",
                        "description": "The Application Secret for BQ OAuth\n",
                        "secret": true
                    },
                    "authProviderX509CertUrl": {
                        "type": "string",
                        "description": "Auth Provider X509 Cert URL for the Service Account\n"
                    },
                    "authUri": {
                        "type": "string",
                        "description": "Auth URI for the Service Account\n"
                    },
                    "clientEmail": {
                        "type": "string",
                        "description": "Service Account email\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Client ID of the Service Account\n"
                    },
                    "clientX509CertUrl": {
                        "type": "string",
                        "description": "Client X509 Cert URL for the Service Account\n"
                    },
                    "connectionId": {
                        "type": "integer",
                        "description": "Connection Identifier\n"
                    },
                    "dataprocClusterName": {
                        "type": "string",
                        "description": "Dataproc cluster name for PySpark workloads\n"
                    },
                    "dataprocRegion": {
                        "type": "string",
                        "description": "Google Cloud region for PySpark workloads on Dataproc\n"
                    },
                    "executionProject": {
                        "type": "string",
                        "description": "Project to bill for query execution\n"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "GCP project ID\n"
                    },
                    "gcsBucket": {
                        "type": "string",
                        "description": "URI for a Google Cloud Storage bucket to host Python code executed via Datapro\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the connection is active\n"
                    },
                    "isConfiguredForOauth": {
                        "type": "boolean",
                        "description": "Whether the connection is configured for OAuth or not\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location to create new Datasets in\n"
                    },
                    "maximumBytesBilled": {
                        "type": "integer",
                        "description": "Max number of bytes that can be billed for a given BigQuery query\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Connection name\n"
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority with which to execute BigQuery queries (batch or interactive)\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Private key of the Service Account\n",
                        "secret": true
                    },
                    "privateKeyId": {
                        "type": "string",
                        "description": "Private key ID of the Service Account\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the connection in\n"
                    },
                    "retries": {
                        "type": "integer",
                        "description": "Number of retries for queries\n"
                    },
                    "timeoutSeconds": {
                        "type": "integer",
                        "description": "Timeout in seconds for queries\n"
                    },
                    "tokenUri": {
                        "type": "string",
                        "description": "Token URI for the Service Account\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of connection\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/bigQueryCredential:BigQueryCredential": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_bigquery_credential instead of dbtcloud_bigquery_credential for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst myCredential = new dbtcloud.BigQueryCredential(\"myCredential\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    dataset: \"my_bq_dataset\",\n    numThreads: 16,\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_bigquery_credential instead of dbtcloud_bigquery_credential for the legacy resource names\n# legacy names will be removed from 0.3 onwards\nmy_credential = dbtcloud.BigQueryCredential(\"myCredential\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    dataset=\"my_bq_dataset\",\n    num_threads=16)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_bigquery_credential instead of dbtcloud_bigquery_credential for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var myCredential = new Dbtcloud.BigQueryCredential(\"myCredential\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        Dataset = \"my_bq_dataset\",\n        NumThreads = 16,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewBigQueryCredential(ctx, \"myCredential\", \u0026dbtcloud.BigQueryCredentialArgs{\n\t\t\tProjectId:  pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tDataset:    pulumi.String(\"my_bq_dataset\"),\n\t\t\tNumThreads: pulumi.Int(16),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.BigQueryCredential;\nimport com.pulumi.dbtcloud.BigQueryCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myCredential = new BigQueryCredential(\"myCredential\", BigQueryCredentialArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .dataset(\"my_bq_dataset\")\n            .numThreads(16)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_bigquery_credential instead of dbtcloud_bigquery_credential for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  myCredential:\n    type: dbtcloud:BigQueryCredential\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      dataset: my_bq_dataset\n      numThreads: 16\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import dbtcloud:index/bigQueryCredential:BigQueryCredential my_credential \"project_id:credential_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/bigQueryCredential:BigQueryCredential my_credential 12345:5678\n```\n\n ",
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "The system BigQuery credential ID\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "Default dataset name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the BigQuery credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the BigQuery credential in\n"
                }
            },
            "required": [
                "credentialId",
                "dataset",
                "numThreads",
                "projectId"
            ],
            "inputProperties": {
                "dataset": {
                    "type": "string",
                    "description": "Default dataset name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the BigQuery credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the BigQuery credential in\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dataset",
                "numThreads",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BigQueryCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "The system BigQuery credential ID\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "Default dataset name\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the BigQuery credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the BigQuery credential in\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/connection:Connection": {
            "description": "Create a Data Warehouse connection for your project in dbt Cloud. The connection will need to be linked to the dbt Cloud project via a `dbtcloud.ProjectConnection` resource.\n\t\t\nThis resource can be used for Databricks, Postgres, Redshift, Snowflake and AlloyDB connections.\nFor BigQuery, due to the list of fields being very different, you can use the `dbtcloud.BigQueryConnection` resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_connection instead of dbtcloud_connection for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst databricks = new dbtcloud.Connection(\"databricks\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    type: \"adapter\",\n    database: \"\",\n    hostName: \"my-databricks-host.cloud.databricks.com\",\n    httpPath: \"/my/path\",\n    catalog: \"moo\",\n});\nconst redshift = new dbtcloud.Connection(\"redshift\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    type: \"redshift\",\n    database: \"my-database\",\n    port: 5439,\n    hostName: \"my-redshift-hostname\",\n});\nconst snowflake = new dbtcloud.Connection(\"snowflake\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    type: \"snowflake\",\n    account: \"my-snowflake-account\",\n    database: \"MY_DATABASE\",\n    role: \"MY_ROLE\",\n    warehouse: \"MY_WAREHOUSE\",\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_connection instead of dbtcloud_connection for the legacy resource names\n# legacy names will be removed from 0.3 onwards\ndatabricks = dbtcloud.Connection(\"databricks\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    type=\"adapter\",\n    database=\"\",\n    host_name=\"my-databricks-host.cloud.databricks.com\",\n    http_path=\"/my/path\",\n    catalog=\"moo\")\nredshift = dbtcloud.Connection(\"redshift\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    type=\"redshift\",\n    database=\"my-database\",\n    port=5439,\n    host_name=\"my-redshift-hostname\")\nsnowflake = dbtcloud.Connection(\"snowflake\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    type=\"snowflake\",\n    account=\"my-snowflake-account\",\n    database=\"MY_DATABASE\",\n    role=\"MY_ROLE\",\n    warehouse=\"MY_WAREHOUSE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_connection instead of dbtcloud_connection for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var databricks = new Dbtcloud.Connection(\"databricks\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        Type = \"adapter\",\n        Database = \"\",\n        HostName = \"my-databricks-host.cloud.databricks.com\",\n        HttpPath = \"/my/path\",\n        Catalog = \"moo\",\n    });\n\n    var redshift = new Dbtcloud.Connection(\"redshift\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        Type = \"redshift\",\n        Database = \"my-database\",\n        Port = 5439,\n        HostName = \"my-redshift-hostname\",\n    });\n\n    var snowflake = new Dbtcloud.Connection(\"snowflake\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        Type = \"snowflake\",\n        Account = \"my-snowflake-account\",\n        Database = \"MY_DATABASE\",\n        Role = \"MY_ROLE\",\n        Warehouse = \"MY_WAREHOUSE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewConnection(ctx, \"databricks\", \u0026dbtcloud.ConnectionArgs{\n\t\t\tProjectId: pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tType:      pulumi.String(\"adapter\"),\n\t\t\tDatabase:  pulumi.String(\"\"),\n\t\t\tHostName:  pulumi.String(\"my-databricks-host.cloud.databricks.com\"),\n\t\t\tHttpPath:  pulumi.String(\"/my/path\"),\n\t\t\tCatalog:   pulumi.String(\"moo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewConnection(ctx, \"redshift\", \u0026dbtcloud.ConnectionArgs{\n\t\t\tProjectId: pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tType:      pulumi.String(\"redshift\"),\n\t\t\tDatabase:  pulumi.String(\"my-database\"),\n\t\t\tPort:      pulumi.Int(5439),\n\t\t\tHostName:  pulumi.String(\"my-redshift-hostname\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewConnection(ctx, \"snowflake\", \u0026dbtcloud.ConnectionArgs{\n\t\t\tProjectId: pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tType:      pulumi.String(\"snowflake\"),\n\t\t\tAccount:   pulumi.String(\"my-snowflake-account\"),\n\t\t\tDatabase:  pulumi.String(\"MY_DATABASE\"),\n\t\t\tRole:      pulumi.String(\"MY_ROLE\"),\n\t\t\tWarehouse: pulumi.String(\"MY_WAREHOUSE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Connection;\nimport com.pulumi.dbtcloud.ConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var databricks = new Connection(\"databricks\", ConnectionArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .type(\"adapter\")\n            .database(\"\")\n            .hostName(\"my-databricks-host.cloud.databricks.com\")\n            .httpPath(\"/my/path\")\n            .catalog(\"moo\")\n            .build());\n\n        var redshift = new Connection(\"redshift\", ConnectionArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .type(\"redshift\")\n            .database(\"my-database\")\n            .port(5439)\n            .hostName(\"my-redshift-hostname\")\n            .build());\n\n        var snowflake = new Connection(\"snowflake\", ConnectionArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .type(\"snowflake\")\n            .account(\"my-snowflake-account\")\n            .database(\"MY_DATABASE\")\n            .role(\"MY_ROLE\")\n            .warehouse(\"MY_WAREHOUSE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_connection instead of dbtcloud_connection for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  databricks:\n    type: dbtcloud:Connection\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      type: adapter\n      database:\n      # currenyly need to be empty for databricks\n      hostName: my-databricks-host.cloud.databricks.com\n      httpPath: /my/path\n      catalog: moo\n  redshift:\n    type: dbtcloud:Connection\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      type: redshift\n      database: my-database\n      port: 5439\n      hostName: my-redshift-hostname\n  snowflake:\n    type: dbtcloud:Connection\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      type: snowflake\n      account: my-snowflake-account\n      database: MY_DATABASE\n      role: MY_ROLE\n      warehouse: MY_WAREHOUSE\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and connection ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/connection:Connection test_connection \"project_id:connection_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/connection:Connection test_connection 12345:6789\n```\n\n ",
            "properties": {
                "account": {
                    "type": "string",
                    "description": "Account name for the connection\n"
                },
                "adapterId": {
                    "type": "integer",
                    "description": "Adapter id created for the Databricks connection\n"
                },
                "allowKeepAlive": {
                    "type": "boolean",
                    "description": "Whether or not the connection should allow client session keep alive\n"
                },
                "allowSso": {
                    "type": "boolean",
                    "description": "Whether or not the connection should allow SSO\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "Catalog name if Unity Catalog is enabled in your Databricks workspace\n"
                },
                "connectionId": {
                    "type": "integer",
                    "description": "Connection Identifier\n"
                },
                "database": {
                    "type": "string",
                    "description": "Database name for the connection\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "Host name for the connection, including Databricks cluster\n"
                },
                "httpPath": {
                    "type": "string",
                    "description": "The HTTP path of the Databricks cluster or SQL warehouse\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the connection is active\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "OAuth client identifier\n"
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "OAuth client secret\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number to connect via\n"
                },
                "privateLinkEndpointId": {
                    "type": "string",
                    "description": "The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the connection in\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role name for the connection\n"
                },
                "tunnelEnabled": {
                    "type": "boolean",
                    "description": "Whether or not tunneling should be enabled on your database connection\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of connection\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "Warehouse name for the connection\n"
                }
            },
            "required": [
                "adapterId",
                "connectionId",
                "database",
                "name",
                "projectId",
                "type"
            ],
            "inputProperties": {
                "account": {
                    "type": "string",
                    "description": "Account name for the connection\n"
                },
                "allowKeepAlive": {
                    "type": "boolean",
                    "description": "Whether or not the connection should allow client session keep alive\n"
                },
                "allowSso": {
                    "type": "boolean",
                    "description": "Whether or not the connection should allow SSO\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "Catalog name if Unity Catalog is enabled in your Databricks workspace\n"
                },
                "database": {
                    "type": "string",
                    "description": "Database name for the connection\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "Host name for the connection, including Databricks cluster\n"
                },
                "httpPath": {
                    "type": "string",
                    "description": "The HTTP path of the Databricks cluster or SQL warehouse\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the connection is active\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "oauthClientId": {
                    "type": "string",
                    "description": "OAuth client identifier\n"
                },
                "oauthClientSecret": {
                    "type": "string",
                    "description": "OAuth client secret\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number to connect via\n"
                },
                "privateLinkEndpointId": {
                    "type": "string",
                    "description": "The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the connection in\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role name for the connection\n"
                },
                "tunnelEnabled": {
                    "type": "boolean",
                    "description": "Whether or not tunneling should be enabled on your database connection\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of connection\n",
                    "willReplaceOnChanges": true
                },
                "warehouse": {
                    "type": "string",
                    "description": "Warehouse name for the connection\n"
                }
            },
            "requiredInputs": [
                "database",
                "projectId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "Account name for the connection\n"
                    },
                    "adapterId": {
                        "type": "integer",
                        "description": "Adapter id created for the Databricks connection\n"
                    },
                    "allowKeepAlive": {
                        "type": "boolean",
                        "description": "Whether or not the connection should allow client session keep alive\n"
                    },
                    "allowSso": {
                        "type": "boolean",
                        "description": "Whether or not the connection should allow SSO\n"
                    },
                    "catalog": {
                        "type": "string",
                        "description": "Catalog name if Unity Catalog is enabled in your Databricks workspace\n"
                    },
                    "connectionId": {
                        "type": "integer",
                        "description": "Connection Identifier\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "Database name for the connection\n"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "Host name for the connection, including Databricks cluster\n"
                    },
                    "httpPath": {
                        "type": "string",
                        "description": "The HTTP path of the Databricks cluster or SQL warehouse\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the connection is active\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Connection name\n"
                    },
                    "oauthClientId": {
                        "type": "string",
                        "description": "OAuth client identifier\n"
                    },
                    "oauthClientSecret": {
                        "type": "string",
                        "description": "OAuth client secret\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port number to connect via\n"
                    },
                    "privateLinkEndpointId": {
                        "type": "string",
                        "description": "The ID of the PrivateLink connection. This ID can be found using the `privatelink_endpoint` data source\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the connection in\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "Role name for the connection\n"
                    },
                    "tunnelEnabled": {
                        "type": "boolean",
                        "description": "Whether or not tunneling should be enabled on your database connection\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of connection\n",
                        "willReplaceOnChanges": true
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "Warehouse name for the connection\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/databricksCredential:DatabricksCredential": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_databricks_credential instead of dbtcloud_databricks_credential for the legacy resource names\n// legacy names will be removed from 0.3 onwards\n// when using the Databricks adapter\nconst myDatabricksCred = new dbtcloud.DatabricksCredential(\"myDatabricksCred\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    adapterId: 123,\n    targetName: \"prod\",\n    token: \"abcdefgh\",\n    schema: \"my_schema\",\n    adapterType: \"databricks\",\n});\n// when using the Spark adapter\nconst mySparkCred = new dbtcloud.DatabricksCredential(\"mySparkCred\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    adapterId: 456,\n    targetName: \"prod\",\n    token: \"abcdefgh\",\n    schema: \"my_schema\",\n    adapterType: \"spark\",\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_databricks_credential instead of dbtcloud_databricks_credential for the legacy resource names\n# legacy names will be removed from 0.3 onwards\n# when using the Databricks adapter\nmy_databricks_cred = dbtcloud.DatabricksCredential(\"myDatabricksCred\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    adapter_id=123,\n    target_name=\"prod\",\n    token=\"abcdefgh\",\n    schema=\"my_schema\",\n    adapter_type=\"databricks\")\n# when using the Spark adapter\nmy_spark_cred = dbtcloud.DatabricksCredential(\"mySparkCred\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    adapter_id=456,\n    target_name=\"prod\",\n    token=\"abcdefgh\",\n    schema=\"my_schema\",\n    adapter_type=\"spark\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_databricks_credential instead of dbtcloud_databricks_credential for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    // when using the Databricks adapter\n    var myDatabricksCred = new Dbtcloud.DatabricksCredential(\"myDatabricksCred\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        AdapterId = 123,\n        TargetName = \"prod\",\n        Token = \"abcdefgh\",\n        Schema = \"my_schema\",\n        AdapterType = \"databricks\",\n    });\n\n    // when using the Spark adapter\n    var mySparkCred = new Dbtcloud.DatabricksCredential(\"mySparkCred\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        AdapterId = 456,\n        TargetName = \"prod\",\n        Token = \"abcdefgh\",\n        Schema = \"my_schema\",\n        AdapterType = \"spark\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewDatabricksCredential(ctx, \"myDatabricksCred\", \u0026dbtcloud.DatabricksCredentialArgs{\n\t\t\tProjectId:   pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tAdapterId:   pulumi.Int(123),\n\t\t\tTargetName:  pulumi.String(\"prod\"),\n\t\t\tToken:       pulumi.String(\"abcdefgh\"),\n\t\t\tSchema:      pulumi.String(\"my_schema\"),\n\t\t\tAdapterType: pulumi.String(\"databricks\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewDatabricksCredential(ctx, \"mySparkCred\", \u0026dbtcloud.DatabricksCredentialArgs{\n\t\t\tProjectId:   pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tAdapterId:   pulumi.Int(456),\n\t\t\tTargetName:  pulumi.String(\"prod\"),\n\t\t\tToken:       pulumi.String(\"abcdefgh\"),\n\t\t\tSchema:      pulumi.String(\"my_schema\"),\n\t\t\tAdapterType: pulumi.String(\"spark\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DatabricksCredential;\nimport com.pulumi.dbtcloud.DatabricksCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDatabricksCred = new DatabricksCredential(\"myDatabricksCred\", DatabricksCredentialArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .adapterId(123)\n            .targetName(\"prod\")\n            .token(\"abcdefgh\")\n            .schema(\"my_schema\")\n            .adapterType(\"databricks\")\n            .build());\n\n        var mySparkCred = new DatabricksCredential(\"mySparkCred\", DatabricksCredentialArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .adapterId(456)\n            .targetName(\"prod\")\n            .token(\"abcdefgh\")\n            .schema(\"my_schema\")\n            .adapterType(\"spark\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_databricks_credential instead of dbtcloud_databricks_credential for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n\n  # when using the Databricks adapter\n  myDatabricksCred:\n    type: dbtcloud:DatabricksCredential\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      adapterId: 123\n      targetName: prod\n      token: abcdefgh\n      schema: my_schema\n      adapterType: databricks\n  # when using the Spark adapter\n  mySparkCred:\n    type: dbtcloud:DatabricksCredential\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      adapterId: 456\n      targetName: prod\n      token: abcdefgh\n      schema: my_schema\n      adapterType: spark\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and credential ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential \"project_id:credential_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/databricksCredential:DatabricksCredential my_databricks_credential 12345:6789\n```\n\n ",
            "properties": {
                "adapterId": {
                    "type": "integer",
                    "description": "Databricks adapter ID for the credential\n"
                },
                "adapterType": {
                    "type": "string",
                    "description": "The type of the adapter (databricks or spark)\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "The catalog where to create models (only for the databricks adapter)\n"
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The system Databricks credential ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Databricks credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Target name\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token for Databricks user\n",
                    "secret": true
                }
            },
            "required": [
                "adapterId",
                "adapterType",
                "credentialId",
                "projectId",
                "schema",
                "token"
            ],
            "inputProperties": {
                "adapterId": {
                    "type": "integer",
                    "description": "Databricks adapter ID for the credential\n"
                },
                "adapterType": {
                    "type": "string",
                    "description": "The type of the adapter (databricks or spark)\n"
                },
                "catalog": {
                    "type": "string",
                    "description": "The catalog where to create models (only for the databricks adapter)\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Databricks credential in\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create models\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Target name\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token for Databricks user\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "adapterId",
                "adapterType",
                "projectId",
                "schema",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabricksCredential resources.\n",
                "properties": {
                    "adapterId": {
                        "type": "integer",
                        "description": "Databricks adapter ID for the credential\n"
                    },
                    "adapterType": {
                        "type": "string",
                        "description": "The type of the adapter (databricks or spark)\n"
                    },
                    "catalog": {
                        "type": "string",
                        "description": "The catalog where to create models (only for the databricks adapter)\n"
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "The system Databricks credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Databricks credential in\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create models\n"
                    },
                    "targetName": {
                        "type": "string",
                        "description": "Target name\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token for Databricks user\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/environment:Environment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_environment instead of dbtcloud_environment for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst ciEnvironment = new dbtcloud.Environment(\"ciEnvironment\", {\n    dbtVersion: \"1.6.0-latest\",\n    projectId: dbtcloud_project.dbt_project.id,\n    type: \"deployment\",\n    credentialId: dbtcloud_snowflake_credential.ci_credential.credential_id,\n});\n// we can also set a deployment environment as being the production one\nconst prodEnvironment = new dbtcloud.Environment(\"prodEnvironment\", {\n    dbtVersion: \"1.6.0-latest\",\n    projectId: dbtcloud_project.dbt_project.id,\n    type: \"deployment\",\n    credentialId: dbtcloud_snowflake_credential.prod_credential.credential_id,\n    deploymentType: \"production\",\n});\n// Creating a development environment\nconst devEnvironment = new dbtcloud.Environment(\"devEnvironment\", {\n    dbtVersion: \"1.6.0-latest\",\n    projectId: dbtcloud_project.dbt_project.id,\n    type: \"development\",\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_environment instead of dbtcloud_environment for the legacy resource names\n# legacy names will be removed from 0.3 onwards\nci_environment = dbtcloud.Environment(\"ciEnvironment\",\n    dbt_version=\"1.6.0-latest\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    type=\"deployment\",\n    credential_id=dbtcloud_snowflake_credential[\"ci_credential\"][\"credential_id\"])\n# we can also set a deployment environment as being the production one\nprod_environment = dbtcloud.Environment(\"prodEnvironment\",\n    dbt_version=\"1.6.0-latest\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    type=\"deployment\",\n    credential_id=dbtcloud_snowflake_credential[\"prod_credential\"][\"credential_id\"],\n    deployment_type=\"production\")\n# Creating a development environment\ndev_environment = dbtcloud.Environment(\"devEnvironment\",\n    dbt_version=\"1.6.0-latest\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    type=\"development\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_environment instead of dbtcloud_environment for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var ciEnvironment = new Dbtcloud.Environment(\"ciEnvironment\", new()\n    {\n        DbtVersion = \"1.6.0-latest\",\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        Type = \"deployment\",\n        CredentialId = dbtcloud_snowflake_credential.Ci_credential.Credential_id,\n    });\n\n    // we can also set a deployment environment as being the production one\n    var prodEnvironment = new Dbtcloud.Environment(\"prodEnvironment\", new()\n    {\n        DbtVersion = \"1.6.0-latest\",\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        Type = \"deployment\",\n        CredentialId = dbtcloud_snowflake_credential.Prod_credential.Credential_id,\n        DeploymentType = \"production\",\n    });\n\n    // Creating a development environment\n    var devEnvironment = new Dbtcloud.Environment(\"devEnvironment\", new()\n    {\n        DbtVersion = \"1.6.0-latest\",\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        Type = \"development\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewEnvironment(ctx, \"ciEnvironment\", \u0026dbtcloud.EnvironmentArgs{\n\t\t\tDbtVersion:   pulumi.String(\"1.6.0-latest\"),\n\t\t\tProjectId:    pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tType:         pulumi.String(\"deployment\"),\n\t\t\tCredentialId: pulumi.Any(dbtcloud_snowflake_credential.Ci_credential.Credential_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewEnvironment(ctx, \"prodEnvironment\", \u0026dbtcloud.EnvironmentArgs{\n\t\t\tDbtVersion:     pulumi.String(\"1.6.0-latest\"),\n\t\t\tProjectId:      pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tType:           pulumi.String(\"deployment\"),\n\t\t\tCredentialId:   pulumi.Any(dbtcloud_snowflake_credential.Prod_credential.Credential_id),\n\t\t\tDeploymentType: pulumi.String(\"production\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewEnvironment(ctx, \"devEnvironment\", \u0026dbtcloud.EnvironmentArgs{\n\t\t\tDbtVersion: pulumi.String(\"1.6.0-latest\"),\n\t\t\tProjectId:  pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tType:       pulumi.String(\"development\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Environment;\nimport com.pulumi.dbtcloud.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ciEnvironment = new Environment(\"ciEnvironment\", EnvironmentArgs.builder()        \n            .dbtVersion(\"1.6.0-latest\")\n            .projectId(dbtcloud_project.dbt_project().id())\n            .type(\"deployment\")\n            .credentialId(dbtcloud_snowflake_credential.ci_credential().credential_id())\n            .build());\n\n        var prodEnvironment = new Environment(\"prodEnvironment\", EnvironmentArgs.builder()        \n            .dbtVersion(\"1.6.0-latest\")\n            .projectId(dbtcloud_project.dbt_project().id())\n            .type(\"deployment\")\n            .credentialId(dbtcloud_snowflake_credential.prod_credential().credential_id())\n            .deploymentType(\"production\")\n            .build());\n\n        var devEnvironment = new Environment(\"devEnvironment\", EnvironmentArgs.builder()        \n            .dbtVersion(\"1.6.0-latest\")\n            .projectId(dbtcloud_project.dbt_project().id())\n            .type(\"development\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_environment instead of dbtcloud_environment for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  ciEnvironment:\n    type: dbtcloud:Environment\n    properties:\n      # the dbt_version is always major.minor.0-latest or major.minor.0-pre\n      dbtVersion: 1.6.0-latest\n      projectId: ${dbtcloud_project.dbt_project.id}\n      type: deployment\n      credentialId: ${dbtcloud_snowflake_credential.ci_credential.credential_id}\n  # we can also set a deployment environment as being the production one\n  prodEnvironment:\n    type: dbtcloud:Environment\n    properties:\n      dbtVersion: 1.6.0-latest\n      projectId: ${dbtcloud_project.dbt_project.id}\n      type: deployment\n      credentialId: ${dbtcloud_snowflake_credential.prod_credential.credential_id}\n      deploymentType: production\n  # Creating a development environment\n  devEnvironment:\n    type: dbtcloud:Environment\n    properties:\n      dbtVersion: 1.6.0-latest\n      projectId: ${dbtcloud_project.dbt_project.id}\n      type: development\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and environment ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/environment:Environment prod_environment \"project_id:environment_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/environment:Environment prod_environment 12345:6789\n```\n\n ",
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments\n"
                },
                "customBranch": {
                    "type": "string",
                    "description": "Which custom branch to use in this environment\n"
                },
                "dbtVersion": {
                    "type": "string",
                    "description": "Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to 'production'\n"
                },
                "environmentId": {
                    "type": "integer",
                    "description": "Environment ID within the project\n"
                },
                "extendedAttributesId": {
                    "type": "integer",
                    "description": "ID of the extended attributes for the environment\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the environment is active\n"
                },
                "name": {
                    "type": "string",
                    "description": "Environment name\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the environment in\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment (must be either development or deployment)\n"
                },
                "useCustomBranch": {
                    "type": "boolean",
                    "description": "Whether to use a custom git branch in this environment\n"
                }
            },
            "required": [
                "dbtVersion",
                "environmentId",
                "name",
                "projectId",
                "type"
            ],
            "inputProperties": {
                "credentialId": {
                    "type": "integer",
                    "description": "Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments\n"
                },
                "customBranch": {
                    "type": "string",
                    "description": "Which custom branch to use in this environment\n"
                },
                "dbtVersion": {
                    "type": "string",
                    "description": "Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to 'production'\n"
                },
                "extendedAttributesId": {
                    "type": "integer",
                    "description": "ID of the extended attributes for the environment\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the environment is active\n"
                },
                "name": {
                    "type": "string",
                    "description": "Environment name\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the environment in\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment (must be either development or deployment)\n",
                    "willReplaceOnChanges": true
                },
                "useCustomBranch": {
                    "type": "boolean",
                    "description": "Whether to use a custom git branch in this environment\n"
                }
            },
            "requiredInputs": [
                "dbtVersion",
                "projectId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID to create the environment with. A credential is not required for development environments but is required for deployment environments\n"
                    },
                    "customBranch": {
                        "type": "string",
                        "description": "Which custom branch to use in this environment\n"
                    },
                    "dbtVersion": {
                        "type": "string",
                        "description": "Version number of dbt to use in this environment. It needs to be in the format `major.minor.0-latest` or `major.minor.0-pre`, e.g. `1.5.0-latest`\n"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "The type of environment. Only valid for environments of type 'deployment' and for now can only be empty or set to 'production'\n"
                    },
                    "environmentId": {
                        "type": "integer",
                        "description": "Environment ID within the project\n"
                    },
                    "extendedAttributesId": {
                        "type": "integer",
                        "description": "ID of the extended attributes for the environment\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the environment is active\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Environment name\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the environment in\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of environment (must be either development or deployment)\n",
                        "willReplaceOnChanges": true
                    },
                    "useCustomBranch": {
                        "type": "boolean",
                        "description": "Whether to use a custom git branch in this environment\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/environmentVariable:EnvironmentVariable": {
            "description": "*Note*: Some upstream resources can be slow to create, so if creating a project or environment at\nthe same time as the environment variables, it's recommended to use the `depends_on` meta argument.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_environment_variable instead of dbtcloud_environment_variable for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst dbtMyEnvVar = new dbtcloud.EnvironmentVariable(\"dbtMyEnvVar\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    environmentValues: {\n        project: \"my_project_level_value\",\n        Dev: \"my_env_level_value\",\n        CI: \"my_ci_override_value\",\n        Prod: \"my_prod_override_value\",\n    },\n}, {\n    dependsOn: [\n        dbtcloud_project.dbt_project,\n        dbtcloud_environment.dev_env,\n        dbtcloud_environment.ci_env,\n        dbtcloud_environment.prod_env,\n    ],\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_environment_variable instead of dbtcloud_environment_variable for the legacy resource names\n# legacy names will be removed from 0.3 onwards\ndbt_my_env_var = dbtcloud.EnvironmentVariable(\"dbtMyEnvVar\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    environment_values={\n        \"project\": \"my_project_level_value\",\n        \"Dev\": \"my_env_level_value\",\n        \"CI\": \"my_ci_override_value\",\n        \"Prod\": \"my_prod_override_value\",\n    },\n    opts=pulumi.ResourceOptions(depends_on=[\n            dbtcloud_project[\"dbt_project\"],\n            dbtcloud_environment[\"dev_env\"],\n            dbtcloud_environment[\"ci_env\"],\n            dbtcloud_environment[\"prod_env\"],\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_environment_variable instead of dbtcloud_environment_variable for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var dbtMyEnvVar = new Dbtcloud.EnvironmentVariable(\"dbtMyEnvVar\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        EnvironmentValues = \n        {\n            { \"project\", \"my_project_level_value\" },\n            { \"Dev\", \"my_env_level_value\" },\n            { \"CI\", \"my_ci_override_value\" },\n            { \"Prod\", \"my_prod_override_value\" },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            dbtcloud_project.Dbt_project,\n            dbtcloud_environment.Dev_env,\n            dbtcloud_environment.Ci_env,\n            dbtcloud_environment.Prod_env,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewEnvironmentVariable(ctx, \"dbtMyEnvVar\", \u0026dbtcloud.EnvironmentVariableArgs{\n\t\t\tProjectId: pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tEnvironmentValues: pulumi.Map{\n\t\t\t\t\"project\": pulumi.Any(\"my_project_level_value\"),\n\t\t\t\t\"Dev\":     pulumi.Any(\"my_env_level_value\"),\n\t\t\t\t\"CI\":      pulumi.Any(\"my_ci_override_value\"),\n\t\t\t\t\"Prod\":    pulumi.Any(\"my_prod_override_value\"),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tdbtcloud_project.Dbt_project,\n\t\t\tdbtcloud_environment.Dev_env,\n\t\t\tdbtcloud_environment.Ci_env,\n\t\t\tdbtcloud_environment.Prod_env,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.EnvironmentVariable;\nimport com.pulumi.dbtcloud.EnvironmentVariableArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbtMyEnvVar = new EnvironmentVariable(\"dbtMyEnvVar\", EnvironmentVariableArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .environmentValues(Map.ofEntries(\n                Map.entry(\"project\", \"my_project_level_value\"),\n                Map.entry(\"Dev\", \"my_env_level_value\"),\n                Map.entry(\"CI\", \"my_ci_override_value\"),\n                Map.entry(\"Prod\", \"my_prod_override_value\")\n            ))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    dbtcloud_project.dbt_project(),\n                    dbtcloud_environment.dev_env(),\n                    dbtcloud_environment.ci_env(),\n                    dbtcloud_environment.prod_env())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_environment_variable instead of dbtcloud_environment_variable for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  dbtMyEnvVar:\n    type: dbtcloud:EnvironmentVariable\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      environmentValues:\n        project: my_project_level_value\n        Dev: my_env_level_value\n        CI: my_ci_override_value\n        Prod: my_prod_override_value\n    options:\n      dependson:\n        - ${dbtcloud_project.dbt_project}\n        - ${dbtcloud_environment.dev_env}\n        - ${dbtcloud_environment.ci_env}\n        - ${dbtcloud_environment.prod_env}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and environment variable name found in the URL and UI or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/environmentVariable:EnvironmentVariable test_environment_variable \"project_id:environment_variable_name\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/environmentVariable:EnvironmentVariable test_environment_variable 12345:DBT_ENV_VAR\n```\n\n ",
            "properties": {
                "environmentValues": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map from environment names to respective variable value, a special key `project` should be set for the project default variable value\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project for the variable to be created in\n"
                }
            },
            "required": [
                "environmentValues",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "environmentValues": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map from environment names to respective variable value, a special key `project` should be set for the project default variable value\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project for the variable to be created in\n"
                }
            },
            "requiredInputs": [
                "environmentValues",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentVariable resources.\n",
                "properties": {
                    "environmentValues": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map from environment names to respective variable value, a special key `project` should be set for the project default variable value\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the variable, must be unique within a project, must be prefixed with 'DBT_'\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project for the variable to be created in\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/environmentVariableJobOverride:EnvironmentVariableJobOverride": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\nconst myEnvVarJobOverride = new dbtcloud.EnvironmentVariableJobOverride(\"myEnvVarJobOverride\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    jobDefinitionId: dbtcloud_job.daily_job.id,\n    rawValue: \"my_override_value\",\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\nmy_env_var_job_override = dbtcloud.EnvironmentVariableJobOverride(\"myEnvVarJobOverride\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    job_definition_id=dbtcloud_job[\"daily_job\"][\"id\"],\n    raw_value=\"my_override_value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myEnvVarJobOverride = new Dbtcloud.EnvironmentVariableJobOverride(\"myEnvVarJobOverride\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        JobDefinitionId = dbtcloud_job.Daily_job.Id,\n        RawValue = \"my_override_value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewEnvironmentVariableJobOverride(ctx, \"myEnvVarJobOverride\", \u0026dbtcloud.EnvironmentVariableJobOverrideArgs{\n\t\t\tProjectId:       pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tJobDefinitionId: pulumi.Any(dbtcloud_job.Daily_job.Id),\n\t\t\tRawValue:        pulumi.String(\"my_override_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.EnvironmentVariableJobOverride;\nimport com.pulumi.dbtcloud.EnvironmentVariableJobOverrideArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myEnvVarJobOverride = new EnvironmentVariableJobOverride(\"myEnvVarJobOverride\", EnvironmentVariableJobOverrideArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .jobDefinitionId(dbtcloud_job.daily_job().id())\n            .rawValue(\"my_override_value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myEnvVarJobOverride:\n    type: dbtcloud:EnvironmentVariableJobOverride\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      jobDefinitionId: ${dbtcloud_job.daily_job.id}\n      rawValue: my_override_value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID, a job ID and the environment variable override ID\n\n```sh\n $ pulumi import dbtcloud:index/environmentVariableJobOverride:EnvironmentVariableJobOverride test_environment_variable_job_override \"project_id:job_id:environment_variable_override_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/environmentVariableJobOverride:EnvironmentVariableJobOverride test_environment_variable_job_override 12345:678:123456\n```\n\n ",
            "properties": {
                "environmentVariableJobOverrideId": {
                    "type": "integer",
                    "description": "The ID of the environment variable job override\n"
                },
                "jobDefinitionId": {
                    "type": "integer",
                    "description": "The job ID for which the environment variable is being overridden\n"
                },
                "name": {
                    "type": "string",
                    "description": "The environment variable name to override\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "The project ID for which the environment variable is being overridden\n"
                },
                "rawValue": {
                    "type": "string",
                    "description": "The value for the override of the environment variable\n"
                }
            },
            "required": [
                "environmentVariableJobOverrideId",
                "jobDefinitionId",
                "name",
                "projectId",
                "rawValue"
            ],
            "inputProperties": {
                "jobDefinitionId": {
                    "type": "integer",
                    "description": "The job ID for which the environment variable is being overridden\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The environment variable name to override\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "The project ID for which the environment variable is being overridden\n",
                    "willReplaceOnChanges": true
                },
                "rawValue": {
                    "type": "string",
                    "description": "The value for the override of the environment variable\n"
                }
            },
            "requiredInputs": [
                "jobDefinitionId",
                "projectId",
                "rawValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentVariableJobOverride resources.\n",
                "properties": {
                    "environmentVariableJobOverrideId": {
                        "type": "integer",
                        "description": "The ID of the environment variable job override\n"
                    },
                    "jobDefinitionId": {
                        "type": "integer",
                        "description": "The job ID for which the environment variable is being overridden\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The environment variable name to override\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "The project ID for which the environment variable is being overridden\n",
                        "willReplaceOnChanges": true
                    },
                    "rawValue": {
                        "type": "string",
                        "description": "The value for the override of the environment variable\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/extendedAttributes:ExtendedAttributes": {
            "description": "This resource allows setting extended attributes which can be assigned to a given environment ([see docs](https://docs.getdbt.com/docs/dbt-cloud-environments#extended-attributes-beta)).\u003cbr/\u003e\u003cbr/\u003eIn dbt Cloud those values are provided as YML but in the provider they need to be provided as JSON (see example below).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n// we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\nconst myAttributes = new dbtcloud.ExtendedAttributes(\"myAttributes\", {\n    extendedAttributes: JSON.stringify({\n        type: \"databricks\",\n        catalog: \"dbt_catalog\",\n        http_path: \"/sql/your/http/path\",\n        my_nested_field: {\n            subfield: \"my_value\",\n        },\n    }),\n    projectId: _var.dbt_project.id,\n});\nconst issueDepl = new dbtcloud.Environment(\"issueDepl\", {\n    dbtVersion: \"1.6.0-latest\",\n    projectId: _var.dbt_project.id,\n    type: \"deployment\",\n    useCustomBranch: false,\n    credentialId: _var.dbt_credential_id,\n    deploymentType: \"production\",\n    extendedAttributesId: myAttributes.extendedAttributesId,\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\nimport json\n\n# extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n# we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\nmy_attributes = dbtcloud.ExtendedAttributes(\"myAttributes\",\n    extended_attributes=json.dumps({\n        \"type\": \"databricks\",\n        \"catalog\": \"dbt_catalog\",\n        \"http_path\": \"/sql/your/http/path\",\n        \"my_nested_field\": {\n            \"subfield\": \"my_value\",\n        },\n    }),\n    project_id=var[\"dbt_project\"][\"id\"])\nissue_depl = dbtcloud.Environment(\"issueDepl\",\n    dbt_version=\"1.6.0-latest\",\n    project_id=var[\"dbt_project\"][\"id\"],\n    type=\"deployment\",\n    use_custom_branch=False,\n    credential_id=var[\"dbt_credential_id\"],\n    deployment_type=\"production\",\n    extended_attributes_id=my_attributes.extended_attributes_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n    // we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\n    var myAttributes = new Dbtcloud.NameExtendedAttributes(\"myAttributes\", new()\n    {\n        ExtendedAttributes = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"databricks\",\n            [\"catalog\"] = \"dbt_catalog\",\n            [\"http_path\"] = \"/sql/your/http/path\",\n            [\"my_nested_field\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"subfield\"] = \"my_value\",\n            },\n        }),\n        ProjectId = @var.Dbt_project.Id,\n    });\n\n    var issueDepl = new Dbtcloud.Environment(\"issueDepl\", new()\n    {\n        DbtVersion = \"1.6.0-latest\",\n        ProjectId = @var.Dbt_project.Id,\n        Type = \"deployment\",\n        UseCustomBranch = false,\n        CredentialId = @var.Dbt_credential_id,\n        DeploymentType = \"production\",\n        ExtendedAttributesId = myAttributes.ExtendedAttributesId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":      \"databricks\",\n\t\t\t\"catalog\":   \"dbt_catalog\",\n\t\t\t\"http_path\": \"/sql/your/http/path\",\n\t\t\t\"my_nested_field\": map[string]interface{}{\n\t\t\t\t\"subfield\": \"my_value\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tmyAttributes, err := dbtcloud.NewExtendedAttributes(ctx, \"myAttributes\", \u0026dbtcloud.ExtendedAttributesArgs{\n\t\t\tExtendedAttributes: pulumi.String(json0),\n\t\t\tProjectId:          pulumi.Any(_var.Dbt_project.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewEnvironment(ctx, \"issueDepl\", \u0026dbtcloud.EnvironmentArgs{\n\t\t\tDbtVersion:           pulumi.String(\"1.6.0-latest\"),\n\t\t\tProjectId:            pulumi.Any(_var.Dbt_project.Id),\n\t\t\tType:                 pulumi.String(\"deployment\"),\n\t\t\tUseCustomBranch:      pulumi.Bool(false),\n\t\t\tCredentialId:         pulumi.Any(_var.Dbt_credential_id),\n\t\t\tDeploymentType:       pulumi.String(\"production\"),\n\t\t\tExtendedAttributesId: myAttributes.ExtendedAttributesId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ExtendedAttributes;\nimport com.pulumi.dbtcloud.ExtendedAttributesArgs;\nimport com.pulumi.dbtcloud.Environment;\nimport com.pulumi.dbtcloud.EnvironmentArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myAttributes = new ExtendedAttributes(\"myAttributes\", ExtendedAttributesArgs.builder()        \n            .extendedAttributes(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"databricks\"),\n                    jsonProperty(\"catalog\", \"dbt_catalog\"),\n                    jsonProperty(\"http_path\", \"/sql/your/http/path\"),\n                    jsonProperty(\"my_nested_field\", jsonObject(\n                        jsonProperty(\"subfield\", \"my_value\")\n                    ))\n                )))\n            .projectId(var_.dbt_project().id())\n            .build());\n\n        var issueDepl = new Environment(\"issueDepl\", EnvironmentArgs.builder()        \n            .dbtVersion(\"1.6.0-latest\")\n            .projectId(var_.dbt_project().id())\n            .type(\"deployment\")\n            .useCustomBranch(false)\n            .credentialId(var_.dbt_credential_id())\n            .deploymentType(\"production\")\n            .extendedAttributesId(myAttributes.extendedAttributesId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # extended_attributes can be set as a raw JSON string or encoded with Terraform's `jsonencode()` function\n  # we recommend using `jsonencode()` to avoid Terraform reporting changes due to whitespaces or keys ordering\n  myAttributes:\n    type: dbtcloud:ExtendedAttributes\n    properties:\n      extendedAttributes:\n        fn::toJSON:\n          type: databricks\n          catalog: dbt_catalog\n          http_path: /sql/your/http/path\n          my_nested_field:\n            subfield: my_value\n      projectId: ${var.dbt_project.id}\n  issueDepl:\n    type: dbtcloud:Environment\n    properties:\n      dbtVersion: 1.6.0-latest\n      projectId: ${var.dbt_project.id}\n      type: deployment\n      useCustomBranch: false\n      credentialId: ${var.dbt_credential_id}\n      deploymentType: production\n      extendedAttributesId: ${myAttributes.extendedAttributesId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and extended attribute ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes \"project_id_id:extended_attributes_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/extendedAttributes:ExtendedAttributes test_extended_attributes 12345:6789\n```\n\n ",
            "properties": {
                "extendedAttributes": {
                    "type": "string",
                    "description": "A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the\n`profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the\nenvironment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`\nin your Terraform code. (see example)\n"
                },
                "extendedAttributesId": {
                    "type": "integer",
                    "description": "Extended Attributes ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the extended attributes in\n"
                },
                "state": {
                    "type": "integer",
                    "description": "Extended Attributes state (1 is active, 2 is inactive)\n"
                }
            },
            "required": [
                "extendedAttributes",
                "extendedAttributesId",
                "projectId"
            ],
            "language": {
                "csharp": {
                    "name": "NameExtendedAttributes"
                }
            },
            "inputProperties": {
                "extendedAttributes": {
                    "type": "string",
                    "description": "A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the\n`profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the\nenvironment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`\nin your Terraform code. (see example)\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the extended attributes in\n"
                },
                "state": {
                    "type": "integer",
                    "description": "Extended Attributes state (1 is active, 2 is inactive)\n"
                }
            },
            "requiredInputs": [
                "extendedAttributes",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExtendedAttributes resources.\n",
                "properties": {
                    "extendedAttributes": {
                        "type": "string",
                        "description": "A JSON string listing the extended attributes mapping. The keys are the connections attributes available in the\n`profiles.yml` for a given adapter. Any fields entered will override connection details or credentials set on the\nenvironment or project. To avoid incorrect Terraform diffs, it is recommended to create this string using `jsonencode`\nin your Terraform code. (see example)\n"
                    },
                    "extendedAttributesId": {
                        "type": "integer",
                        "description": "Extended Attributes ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the extended attributes in\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "Extended Attributes state (1 is active, 2 is inactive)\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/fabricConnection:FabricConnection": {
            "description": "Resource to create Microsoft Fabric connections in dbt Cloud\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\nconst myFabricConnection = new dbtcloud.FabricConnection(\"myFabricConnection\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    server: \"my-server\",\n    database: \"my-database\",\n    port: 1234,\n    loginTimeout: 30,\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\nmy_fabric_connection = dbtcloud.FabricConnection(\"myFabricConnection\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    server=\"my-server\",\n    database=\"my-database\",\n    port=1234,\n    login_timeout=30)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFabricConnection = new Dbtcloud.FabricConnection(\"myFabricConnection\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        Server = \"my-server\",\n        Database = \"my-database\",\n        Port = 1234,\n        LoginTimeout = 30,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewFabricConnection(ctx, \"myFabricConnection\", \u0026dbtcloud.FabricConnectionArgs{\n\t\t\tProjectId:    pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tServer:       pulumi.String(\"my-server\"),\n\t\t\tDatabase:     pulumi.String(\"my-database\"),\n\t\t\tPort:         pulumi.Int(1234),\n\t\t\tLoginTimeout: pulumi.Int(30),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.FabricConnection;\nimport com.pulumi.dbtcloud.FabricConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFabricConnection = new FabricConnection(\"myFabricConnection\", FabricConnectionArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .server(\"my-server\")\n            .database(\"my-database\")\n            .port(1234)\n            .loginTimeout(30)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFabricConnection:\n    type: dbtcloud:FabricConnection\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      server: my-server\n      database: my-database\n      port: 1234\n      loginTimeout: 30\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import dbtcloud:index/fabricConnection:FabricConnection my_connection \"project_id:connection_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/fabricConnection:FabricConnection my_connection 12345:6789\n```\n\n ",
            "properties": {
                "adapterId": {
                    "type": "integer",
                    "description": "Adapter id created for the Fabric connection\n"
                },
                "connectionId": {
                    "type": "integer",
                    "description": "Connection Identifier\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database to connect to for this connection.\n"
                },
                "loginTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the connection in\n"
                },
                "queryTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.\n"
                },
                "server": {
                    "type": "string",
                    "description": "The server hostname.\n"
                }
            },
            "required": [
                "adapterId",
                "connectionId",
                "database",
                "name",
                "port",
                "projectId",
                "server"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The database to connect to for this connection.\n"
                },
                "loginTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Connection name\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to for this connection.\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the connection in\n",
                    "willReplaceOnChanges": true
                },
                "queryTimeout": {
                    "type": "integer",
                    "description": "The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.\n"
                },
                "server": {
                    "type": "string",
                    "description": "The server hostname.\n"
                }
            },
            "requiredInputs": [
                "database",
                "port",
                "projectId",
                "server"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FabricConnection resources.\n",
                "properties": {
                    "adapterId": {
                        "type": "integer",
                        "description": "Adapter id created for the Fabric connection\n"
                    },
                    "connectionId": {
                        "type": "integer",
                        "description": "Connection Identifier\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database to connect to for this connection.\n"
                    },
                    "loginTimeout": {
                        "type": "integer",
                        "description": "The number of seconds used to establish a connection before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Connection name\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port to connect to for this connection.\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the connection in\n",
                        "willReplaceOnChanges": true
                    },
                    "queryTimeout": {
                        "type": "integer",
                        "description": "The number of seconds used to wait for a query before failing. Defaults to 0, which means that the timeout is disabled or uses the default system settings.\n"
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The number of automatic times to retry a query before failing. Defaults to 1. Queries with syntax errors will not be retried. This setting can be used to overcome intermittent network issues.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "The server hostname.\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/fabricCredential:FabricCredential": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DatabricksCredential;\nimport com.pulumi.dbtcloud.DatabricksCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDatabricksCred = new DatabricksCredential(\"myDatabricksCred\", DatabricksCredentialArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .adapterId(dbtcloud_fabric_connection.my_fabric_connection().adapter_id())\n            .schema(\"my_schema\")\n            .user(\"my_user\")\n            .password(\"my_password\")\n            .schemaAuthorization(\"abcd\")\n            .build());\n\n        var mySparkCred = new DatabricksCredential(\"mySparkCred\", DatabricksCredentialArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .adapterId(dbtcloud_fabric_connection.my_fabric_connection().adapter_id())\n            .schema(\"my_schema\")\n            .clientId(\"my_client_id\")\n            .tenantId(\"my_tenant_id\")\n            .clientSecret(\"my_secret\")\n            .schemaAuthorization(\"abcd\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # when using AD authentication\n  myDatabricksCred:\n    type: dbtcloud:DatabricksCredential\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      adapterId: ${dbtcloud_fabric_connection.my_fabric_connection.adapter_id}\n      schema: my_schema\n      user: my_user\n      password: my_password\n      schemaAuthorization: abcd\n  # when using service principal authentication\n  mySparkCred:\n    type: dbtcloud:DatabricksCredential\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      adapterId: ${dbtcloud_fabric_connection.my_fabric_connection.adapter_id}\n      schema: my_schema\n      clientId: my_client_id\n      tenantId: my_tenant_id\n      clientSecret: my_secret\n      schemaAuthorization: abcd\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and credential ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential \"project_id:credential_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/fabricCredential:FabricCredential my_fabric_credential 12345:6789\n```\n\n ",
            "properties": {
                "adapterId": {
                    "type": "integer",
                    "description": "Fabric adapter ID for the credential\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                    "secret": true
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The system Fabric credential ID\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the account to connect to. Only used when connection with AD user/pass\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Fabric credential in\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create the dbt models\n"
                },
                "schemaAuthorization": {
                    "type": "string",
                    "description": "Optionally set this to the principal who should own the schemas created by dbt\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username of the Fabric account to connect to. Only used when connection with AD user/pass\n"
                }
            },
            "required": [
                "adapterId",
                "credentialId",
                "projectId",
                "schema"
            ],
            "inputProperties": {
                "adapterId": {
                    "type": "integer",
                    "description": "Fabric adapter ID for the credential\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "The password for the account to connect to. Only used when connection with AD user/pass\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Fabric credential in\n",
                    "willReplaceOnChanges": true
                },
                "schema": {
                    "type": "string",
                    "description": "The schema where to create the dbt models\n"
                },
                "schemaAuthorization": {
                    "type": "string",
                    "description": "Optionally set this to the principal who should own the schemas created by dbt\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username of the Fabric account to connect to. Only used when connection with AD user/pass\n"
                }
            },
            "requiredInputs": [
                "adapterId",
                "projectId",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FabricCredential resources.\n",
                "properties": {
                    "adapterId": {
                        "type": "integer",
                        "description": "Fabric adapter ID for the credential\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client ID of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The client secret of the Azure Active Directory service principal. This is only used when connecting to Azure SQL with an AAD service principal.\n",
                        "secret": true
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "The system Fabric credential ID\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the account to connect to. Only used when connection with AD user/pass\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Fabric credential in\n",
                        "willReplaceOnChanges": true
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create the dbt models\n"
                    },
                    "schemaAuthorization": {
                        "type": "string",
                        "description": "Optionally set this to the principal who should own the schemas created by dbt\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant ID of the Azure Active Directory instance. This is only used when connecting to Azure SQL with a service principal.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The username of the Fabric account to connect to. Only used when connection with AD user/pass\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/group:Group": {
            "description": "*Note*: Groups currently do not support updates, as per both the API and the UI.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_group instead of dbtcloud_group for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst tfGroup1 = new dbtcloud.Group(\"tfGroup1\", {groupPermissions: [\n    {\n        permissionSet: \"member\",\n        allProjects: true,\n    },\n    {\n        permissionSet: \"developer\",\n        allProjects: false,\n        projectId: dbtcloud_project.dbt_project.id,\n    },\n]});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_group instead of dbtcloud_group for the legacy resource names\n# legacy names will be removed from 0.3 onwards\ntf_group1 = dbtcloud.Group(\"tfGroup1\", group_permissions=[\n    dbtcloud.GroupGroupPermissionArgs(\n        permission_set=\"member\",\n        all_projects=True,\n    ),\n    dbtcloud.GroupGroupPermissionArgs(\n        permission_set=\"developer\",\n        all_projects=False,\n        project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_group instead of dbtcloud_group for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var tfGroup1 = new Dbtcloud.Group(\"tfGroup1\", new()\n    {\n        GroupPermissions = new[]\n        {\n            new Dbtcloud.Inputs.GroupGroupPermissionArgs\n            {\n                PermissionSet = \"member\",\n                AllProjects = true,\n            },\n            new Dbtcloud.Inputs.GroupGroupPermissionArgs\n            {\n                PermissionSet = \"developer\",\n                AllProjects = false,\n                ProjectId = dbtcloud_project.Dbt_project.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewGroup(ctx, \"tfGroup1\", \u0026dbtcloud.GroupArgs{\n\t\t\tGroupPermissions: dbtcloud.GroupGroupPermissionArray{\n\t\t\t\t\u0026dbtcloud.GroupGroupPermissionArgs{\n\t\t\t\t\tPermissionSet: pulumi.String(\"member\"),\n\t\t\t\t\tAllProjects:   pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026dbtcloud.GroupGroupPermissionArgs{\n\t\t\t\t\tPermissionSet: pulumi.String(\"developer\"),\n\t\t\t\t\tAllProjects:   pulumi.Bool(false),\n\t\t\t\t\tProjectId:     pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Group;\nimport com.pulumi.dbtcloud.GroupArgs;\nimport com.pulumi.dbtcloud.inputs.GroupGroupPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfGroup1 = new Group(\"tfGroup1\", GroupArgs.builder()        \n            .groupPermissions(            \n                GroupGroupPermissionArgs.builder()\n                    .permissionSet(\"member\")\n                    .allProjects(true)\n                    .build(),\n                GroupGroupPermissionArgs.builder()\n                    .permissionSet(\"developer\")\n                    .allProjects(false)\n                    .projectId(dbtcloud_project.dbt_project().id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_group instead of dbtcloud_group for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  tfGroup1:\n    type: dbtcloud:Group\n    properties:\n      groupPermissions:\n        - permissionSet: member\n          allProjects: true\n        - permissionSet: developer\n          allProjects: false\n          projectId: ${dbtcloud_project.dbt_project.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a group ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/group:Group test_group \"group_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/group:Group test_group 12345\n```\n\n ",
            "properties": {
                "assignByDefault": {
                    "type": "boolean",
                    "description": "Whether or not to assign this group to users by default\n"
                },
                "groupPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/GroupGroupPermission:GroupGroupPermission"
                    }
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the group is active\n"
                },
                "name": {
                    "type": "string",
                    "description": "Group name\n"
                },
                "ssoMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSO mapping group names for this group\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "assignByDefault": {
                    "type": "boolean",
                    "description": "Whether or not to assign this group to users by default\n"
                },
                "groupPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/GroupGroupPermission:GroupGroupPermission"
                    }
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the group is active\n"
                },
                "name": {
                    "type": "string",
                    "description": "Group name\n"
                },
                "ssoMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSO mapping group names for this group\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "assignByDefault": {
                        "type": "boolean",
                        "description": "Whether or not to assign this group to users by default\n"
                    },
                    "groupPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/GroupGroupPermission:GroupGroupPermission"
                        }
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the group is active\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Group name\n"
                    },
                    "ssoMappingGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSO mapping group names for this group\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/job:Job": {
            "description": "\u003e As of October 2023, CI improvements have been rolled out to dbt Cloud with minor impacts to some jobs:  [more info](https://docs.getdbt.com/docs/dbt-versions/release-notes/june-2023/ci-updates-phase1-rn). \n\u003cbr/\u003e\n\u003cbr/\u003e\nThose improvements include modifications to deferral which was historically set at the job level and will now be set at the environment level. \nDeferral can still be set to \"self\" by setting `self_deferring` to `true` but with the new approach, deferral to other runs need to be done with `deferring_environment_id` instead of `deferring_job_id`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_job instead of dbtcloud_job for the legacy resource names\n// legacy names will be removed from 0.3 onwards\n// a job that has github_webhook and git_provider_webhook \n// set to false will be categorized as a \"Deploy Job\"\nconst dailyJob = new dbtcloud.Job(\"dailyJob\", {\n    environmentId: dbtcloud_environment.prod_environment.environment_id,\n    executeSteps: [\"dbt build\"],\n    generateDocs: true,\n    isActive: true,\n    numThreads: 64,\n    projectId: dbtcloud_project.dbt_project.id,\n    runGenerateSources: true,\n    targetName: \"default\",\n    triggers: {\n        custom_branch_only: false,\n        github_webhook: false,\n        git_provider_webhook: false,\n        schedule: true,\n    },\n    scheduleDays: [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n    ],\n    scheduleType: \"days_of_week\",\n    scheduleHours: [0],\n});\n// a job that has github_webhook and git_provider_webhook set \n// to true will be categorized as a \"Continuous Integration Job\"\nconst ciJob = new dbtcloud.Job(\"ciJob\", {\n    environmentId: dbtcloud_environment.ci_environment.environment_id,\n    executeSteps: [\"dbt build -s state:modified+ --fail-fast\"],\n    generateDocs: false,\n    deferringEnvironmentId: dbtcloud_environment.prod_environment.environment_id,\n    numThreads: 32,\n    projectId: dbtcloud_project.dbt_project.id,\n    runGenerateSources: false,\n    triggers: {\n        custom_branch_only: true,\n        github_webhook: true,\n        git_provider_webhook: true,\n        schedule: false,\n    },\n    scheduleDays: [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n    ],\n    scheduleType: \"days_of_week\",\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_job instead of dbtcloud_job for the legacy resource names\n# legacy names will be removed from 0.3 onwards\n# a job that has github_webhook and git_provider_webhook \n# set to false will be categorized as a \"Deploy Job\"\ndaily_job = dbtcloud.Job(\"dailyJob\",\n    environment_id=dbtcloud_environment[\"prod_environment\"][\"environment_id\"],\n    execute_steps=[\"dbt build\"],\n    generate_docs=True,\n    is_active=True,\n    num_threads=64,\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    run_generate_sources=True,\n    target_name=\"default\",\n    triggers={\n        \"custom_branch_only\": False,\n        \"github_webhook\": False,\n        \"git_provider_webhook\": False,\n        \"schedule\": True,\n    },\n    schedule_days=[\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n    ],\n    schedule_type=\"days_of_week\",\n    schedule_hours=[0])\n# a job that has github_webhook and git_provider_webhook set \n# to true will be categorized as a \"Continuous Integration Job\"\nci_job = dbtcloud.Job(\"ciJob\",\n    environment_id=dbtcloud_environment[\"ci_environment\"][\"environment_id\"],\n    execute_steps=[\"dbt build -s state:modified+ --fail-fast\"],\n    generate_docs=False,\n    deferring_environment_id=dbtcloud_environment[\"prod_environment\"][\"environment_id\"],\n    num_threads=32,\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    run_generate_sources=False,\n    triggers={\n        \"custom_branch_only\": True,\n        \"github_webhook\": True,\n        \"git_provider_webhook\": True,\n        \"schedule\": False,\n    },\n    schedule_days=[\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n    ],\n    schedule_type=\"days_of_week\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_job instead of dbtcloud_job for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    // a job that has github_webhook and git_provider_webhook \n    // set to false will be categorized as a \"Deploy Job\"\n    var dailyJob = new Dbtcloud.Job(\"dailyJob\", new()\n    {\n        EnvironmentId = dbtcloud_environment.Prod_environment.Environment_id,\n        ExecuteSteps = new[]\n        {\n            \"dbt build\",\n        },\n        GenerateDocs = true,\n        IsActive = true,\n        NumThreads = 64,\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        RunGenerateSources = true,\n        TargetName = \"default\",\n        Triggers = \n        {\n            { \"custom_branch_only\", false },\n            { \"github_webhook\", false },\n            { \"git_provider_webhook\", false },\n            { \"schedule\", true },\n        },\n        ScheduleDays = new[]\n        {\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n        },\n        ScheduleType = \"days_of_week\",\n        ScheduleHours = new[]\n        {\n            0,\n        },\n    });\n\n    // a job that has github_webhook and git_provider_webhook set \n    // to true will be categorized as a \"Continuous Integration Job\"\n    var ciJob = new Dbtcloud.Job(\"ciJob\", new()\n    {\n        EnvironmentId = dbtcloud_environment.Ci_environment.Environment_id,\n        ExecuteSteps = new[]\n        {\n            \"dbt build -s state:modified+ --fail-fast\",\n        },\n        GenerateDocs = false,\n        DeferringEnvironmentId = dbtcloud_environment.Prod_environment.Environment_id,\n        NumThreads = 32,\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        RunGenerateSources = false,\n        Triggers = \n        {\n            { \"custom_branch_only\", true },\n            { \"github_webhook\", true },\n            { \"git_provider_webhook\", true },\n            { \"schedule\", false },\n        },\n        ScheduleDays = new[]\n        {\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n        },\n        ScheduleType = \"days_of_week\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewJob(ctx, \"dailyJob\", \u0026dbtcloud.JobArgs{\n\t\t\tEnvironmentId: pulumi.Any(dbtcloud_environment.Prod_environment.Environment_id),\n\t\t\tExecuteSteps: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"dbt build\"),\n\t\t\t},\n\t\t\tGenerateDocs:       pulumi.Bool(true),\n\t\t\tIsActive:           pulumi.Bool(true),\n\t\t\tNumThreads:         pulumi.Int(64),\n\t\t\tProjectId:          pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tRunGenerateSources: pulumi.Bool(true),\n\t\t\tTargetName:         pulumi.String(\"default\"),\n\t\t\tTriggers: pulumi.BoolMap{\n\t\t\t\t\"custom_branch_only\":   pulumi.Bool(false),\n\t\t\t\t\"github_webhook\":       pulumi.Bool(false),\n\t\t\t\t\"git_provider_webhook\": pulumi.Bool(false),\n\t\t\t\t\"schedule\":             pulumi.Bool(true),\n\t\t\t},\n\t\t\tScheduleDays: pulumi.IntArray{\n\t\t\t\tpulumi.Int(0),\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t\tpulumi.Int(4),\n\t\t\t\tpulumi.Int(5),\n\t\t\t\tpulumi.Int(6),\n\t\t\t},\n\t\t\tScheduleType: pulumi.String(\"days_of_week\"),\n\t\t\tScheduleHours: pulumi.IntArray{\n\t\t\t\tpulumi.Int(0),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewJob(ctx, \"ciJob\", \u0026dbtcloud.JobArgs{\n\t\t\tEnvironmentId: pulumi.Any(dbtcloud_environment.Ci_environment.Environment_id),\n\t\t\tExecuteSteps: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"dbt build -s state:modified+ --fail-fast\"),\n\t\t\t},\n\t\t\tGenerateDocs:           pulumi.Bool(false),\n\t\t\tDeferringEnvironmentId: pulumi.Any(dbtcloud_environment.Prod_environment.Environment_id),\n\t\t\tNumThreads:             pulumi.Int(32),\n\t\t\tProjectId:              pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tRunGenerateSources:     pulumi.Bool(false),\n\t\t\tTriggers: pulumi.BoolMap{\n\t\t\t\t\"custom_branch_only\":   pulumi.Bool(true),\n\t\t\t\t\"github_webhook\":       pulumi.Bool(true),\n\t\t\t\t\"git_provider_webhook\": pulumi.Bool(true),\n\t\t\t\t\"schedule\":             pulumi.Bool(false),\n\t\t\t},\n\t\t\tScheduleDays: pulumi.IntArray{\n\t\t\t\tpulumi.Int(0),\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t\tpulumi.Int(4),\n\t\t\t\tpulumi.Int(5),\n\t\t\t\tpulumi.Int(6),\n\t\t\t},\n\t\t\tScheduleType: pulumi.String(\"days_of_week\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Job;\nimport com.pulumi.dbtcloud.JobArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dailyJob = new Job(\"dailyJob\", JobArgs.builder()        \n            .environmentId(dbtcloud_environment.prod_environment().environment_id())\n            .executeSteps(\"dbt build\")\n            .generateDocs(true)\n            .isActive(true)\n            .numThreads(64)\n            .projectId(dbtcloud_project.dbt_project().id())\n            .runGenerateSources(true)\n            .targetName(\"default\")\n            .triggers(Map.ofEntries(\n                Map.entry(\"custom_branch_only\", false),\n                Map.entry(\"github_webhook\", false),\n                Map.entry(\"git_provider_webhook\", false),\n                Map.entry(\"schedule\", true)\n            ))\n            .scheduleDays(            \n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6)\n            .scheduleType(\"days_of_week\")\n            .scheduleHours(0)\n            .build());\n\n        var ciJob = new Job(\"ciJob\", JobArgs.builder()        \n            .environmentId(dbtcloud_environment.ci_environment().environment_id())\n            .executeSteps(\"dbt build -s state:modified+ --fail-fast\")\n            .generateDocs(false)\n            .deferringEnvironmentId(dbtcloud_environment.prod_environment().environment_id())\n            .numThreads(32)\n            .projectId(dbtcloud_project.dbt_project().id())\n            .runGenerateSources(false)\n            .triggers(Map.ofEntries(\n                Map.entry(\"custom_branch_only\", true),\n                Map.entry(\"github_webhook\", true),\n                Map.entry(\"git_provider_webhook\", true),\n                Map.entry(\"schedule\", false)\n            ))\n            .scheduleDays(            \n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6)\n            .scheduleType(\"days_of_week\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_job instead of dbtcloud_job for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n\n  # a job that has github_webhook and git_provider_webhook \n  # set to false will be categorized as a \"Deploy Job\"\n  dailyJob:\n    type: dbtcloud:Job\n    properties:\n      environmentId: ${dbtcloud_environment.prod_environment.environment_id}\n      executeSteps:\n        - dbt build\n      generateDocs: true\n      isActive: true\n      numThreads: 64\n      projectId: ${dbtcloud_project.dbt_project.id}\n      runGenerateSources: true\n      targetName: default\n      triggers:\n        custom_branch_only: false\n        github_webhook: false\n        git_provider_webhook: false\n        schedule: true\n      # this is the default that gets set up when modifying jobs in the UI\n      scheduleDays:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n      scheduleType: days_of_week\n      scheduleHours:\n        - 0\n  # a job that has github_webhook and git_provider_webhook set \n  # to true will be categorized as a \"Continuous Integration Job\"\n  ciJob:\n    type: dbtcloud:Job\n    properties:\n      environmentId: ${dbtcloud_environment.ci_environment.environment_id}\n      executeSteps:\n        - dbt build -s state:modified+ --fail-fast\n      generateDocs: false\n      deferringEnvironmentId: ${dbtcloud_environment.prod_environment.environment_id}\n      numThreads: 32\n      projectId: ${dbtcloud_project.dbt_project.id}\n      runGenerateSources: false\n      triggers:\n        custom_branch_only: true\n        github_webhook: true\n        git_provider_webhook: true\n        schedule: false\n      # this is the default that gets set up when modifying jobs in the UI\n      #   # this is not going to be used when schedule is set to false\n      scheduleDays:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n      scheduleType: days_of_week\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a job ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/job:Job test_job \"job_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/job:Job test_job 12345\n```\n\n ",
            "properties": {
                "dbtVersion": {
                    "type": "string",
                    "description": "Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions\n"
                },
                "deferringEnvironmentId": {
                    "type": "integer",
                    "description": "Environment identifier that this job defers to (new deferring approach)\n"
                },
                "deferringJobId": {
                    "type": "integer",
                    "description": "Job identifier that this job defers to (legacy deferring approach)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the job\n"
                },
                "environmentId": {
                    "type": "integer",
                    "description": "Environment ID to create the job in\n"
                },
                "executeSteps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of commands to execute for the job\n"
                },
                "generateDocs": {
                    "type": "boolean",
                    "description": "Flag for whether the job should generate documentation\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Flag for whether the job is marked active or deleted\n"
                },
                "name": {
                    "type": "string",
                    "description": "Job name\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use in the job\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the job in\n"
                },
                "runGenerateSources": {
                    "type": "boolean",
                    "description": "Flag for whether the job should run generate sources\n"
                },
                "scheduleCron": {
                    "type": "string",
                    "description": "Custom cron expression for schedule\n"
                },
                "scheduleDays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule\n"
                },
                "scheduleHours": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of hours to execute the job at if running on a schedule\n"
                },
                "scheduleInterval": {
                    "type": "integer",
                    "description": "Number of hours between job executions if running on a schedule\n"
                },
                "scheduleType": {
                    "type": "string",
                    "description": "Type of schedule to use, one of every*day/ days*of*week/ custom*cron\n"
                },
                "selfDeferring": {
                    "type": "boolean",
                    "description": "Whether this job defers on a previous run of itself\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Target name for the dbt profile\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds to allow the job to run before timing out\n"
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Flags for which types of triggers to use, possible values are `github_webhook`, `git_provider_webhook`, `schedule` and `custom_branch_only`. \\n\\n`custom_branch_only` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment.\n"
                },
                "triggersOnDraftPr": {
                    "type": "boolean",
                    "description": "Whether the CI job should be automatically triggered on draft PRs\n"
                }
            },
            "required": [
                "environmentId",
                "executeSteps",
                "name",
                "projectId",
                "triggers"
            ],
            "inputProperties": {
                "dbtVersion": {
                    "type": "string",
                    "description": "Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions\n"
                },
                "deferringEnvironmentId": {
                    "type": "integer",
                    "description": "Environment identifier that this job defers to (new deferring approach)\n"
                },
                "deferringJobId": {
                    "type": "integer",
                    "description": "Job identifier that this job defers to (legacy deferring approach)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the job\n"
                },
                "environmentId": {
                    "type": "integer",
                    "description": "Environment ID to create the job in\n"
                },
                "executeSteps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of commands to execute for the job\n"
                },
                "generateDocs": {
                    "type": "boolean",
                    "description": "Flag for whether the job should generate documentation\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Flag for whether the job is marked active or deleted\n"
                },
                "name": {
                    "type": "string",
                    "description": "Job name\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use in the job\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the job in\n"
                },
                "runGenerateSources": {
                    "type": "boolean",
                    "description": "Flag for whether the job should run generate sources\n"
                },
                "scheduleCron": {
                    "type": "string",
                    "description": "Custom cron expression for schedule\n"
                },
                "scheduleDays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule\n"
                },
                "scheduleHours": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of hours to execute the job at if running on a schedule\n"
                },
                "scheduleInterval": {
                    "type": "integer",
                    "description": "Number of hours between job executions if running on a schedule\n"
                },
                "scheduleType": {
                    "type": "string",
                    "description": "Type of schedule to use, one of every*day/ days*of*week/ custom*cron\n"
                },
                "selfDeferring": {
                    "type": "boolean",
                    "description": "Whether this job defers on a previous run of itself\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Target name for the dbt profile\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Number of seconds to allow the job to run before timing out\n"
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Flags for which types of triggers to use, possible values are `github_webhook`, `git_provider_webhook`, `schedule` and `custom_branch_only`. \\n\\n`custom_branch_only` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment.\n"
                },
                "triggersOnDraftPr": {
                    "type": "boolean",
                    "description": "Whether the CI job should be automatically triggered on draft PRs\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "executeSteps",
                "projectId",
                "triggers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Job resources.\n",
                "properties": {
                    "dbtVersion": {
                        "type": "string",
                        "description": "Version number of dbt to use in this job, usually in the format 1.2.0-latest rather than core versions\n"
                    },
                    "deferringEnvironmentId": {
                        "type": "integer",
                        "description": "Environment identifier that this job defers to (new deferring approach)\n"
                    },
                    "deferringJobId": {
                        "type": "integer",
                        "description": "Job identifier that this job defers to (legacy deferring approach)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the job\n"
                    },
                    "environmentId": {
                        "type": "integer",
                        "description": "Environment ID to create the job in\n"
                    },
                    "executeSteps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of commands to execute for the job\n"
                    },
                    "generateDocs": {
                        "type": "boolean",
                        "description": "Flag for whether the job should generate documentation\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Flag for whether the job is marked active or deleted\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Job name\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use in the job\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the job in\n"
                    },
                    "runGenerateSources": {
                        "type": "boolean",
                        "description": "Flag for whether the job should run generate sources\n"
                    },
                    "scheduleCron": {
                        "type": "string",
                        "description": "Custom cron expression for schedule\n"
                    },
                    "scheduleDays": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of days of week as numbers (0 = Sunday, 7 = Saturday) to execute the job at if running on a schedule\n"
                    },
                    "scheduleHours": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of hours to execute the job at if running on a schedule\n"
                    },
                    "scheduleInterval": {
                        "type": "integer",
                        "description": "Number of hours between job executions if running on a schedule\n"
                    },
                    "scheduleType": {
                        "type": "string",
                        "description": "Type of schedule to use, one of every*day/ days*of*week/ custom*cron\n"
                    },
                    "selfDeferring": {
                        "type": "boolean",
                        "description": "Whether this job defers on a previous run of itself\n"
                    },
                    "targetName": {
                        "type": "string",
                        "description": "Target name for the dbt profile\n"
                    },
                    "timeoutSeconds": {
                        "type": "integer",
                        "description": "Number of seconds to allow the job to run before timing out\n"
                    },
                    "triggers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        },
                        "description": "Flags for which types of triggers to use, possible values are `github_webhook`, `git_provider_webhook`, `schedule` and `custom_branch_only`. \\n\\n`custom_branch_only` is only relevant for CI jobs triggered automatically on PR creation to only trigger a job on a PR to the custom branch of the environment.\n"
                    },
                    "triggersOnDraftPr": {
                        "type": "boolean",
                        "description": "Whether the CI job should be automatically triggered on draft PRs\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/licenseMap:LicenseMap": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// Developer license group mapping\nconst devLicenseMap = new dbtcloud.LicenseMap(\"devLicenseMap\", {\n    licenseType: \"developer\",\n    ssoLicenseMappingGroups: [\"DEV-SSO-GROUP\"],\n});\n// Read-only license mapping\nconst readOnlyLicenseMap = new dbtcloud.LicenseMap(\"readOnlyLicenseMap\", {\n    licenseType: \"read_only\",\n    ssoLicenseMappingGroups: [\"READ-ONLY-SSO-GROUP\"],\n});\n// IT license mapping\nconst itLicenseMap = new dbtcloud.LicenseMap(\"itLicenseMap\", {\n    licenseType: \"it\",\n    ssoLicenseMappingGroups: [\"IT-SSO-GROUP\"],\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# Developer license group mapping\ndev_license_map = dbtcloud.LicenseMap(\"devLicenseMap\",\n    license_type=\"developer\",\n    sso_license_mapping_groups=[\"DEV-SSO-GROUP\"])\n# Read-only license mapping\nread_only_license_map = dbtcloud.LicenseMap(\"readOnlyLicenseMap\",\n    license_type=\"read_only\",\n    sso_license_mapping_groups=[\"READ-ONLY-SSO-GROUP\"])\n# IT license mapping\nit_license_map = dbtcloud.LicenseMap(\"itLicenseMap\",\n    license_type=\"it\",\n    sso_license_mapping_groups=[\"IT-SSO-GROUP\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Developer license group mapping\n    var devLicenseMap = new Dbtcloud.LicenseMap(\"devLicenseMap\", new()\n    {\n        LicenseType = \"developer\",\n        SsoLicenseMappingGroups = new[]\n        {\n            \"DEV-SSO-GROUP\",\n        },\n    });\n\n    // Read-only license mapping\n    var readOnlyLicenseMap = new Dbtcloud.LicenseMap(\"readOnlyLicenseMap\", new()\n    {\n        LicenseType = \"read_only\",\n        SsoLicenseMappingGroups = new[]\n        {\n            \"READ-ONLY-SSO-GROUP\",\n        },\n    });\n\n    // IT license mapping\n    var itLicenseMap = new Dbtcloud.LicenseMap(\"itLicenseMap\", new()\n    {\n        LicenseType = \"it\",\n        SsoLicenseMappingGroups = new[]\n        {\n            \"IT-SSO-GROUP\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewLicenseMap(ctx, \"devLicenseMap\", \u0026dbtcloud.LicenseMapArgs{\n\t\t\tLicenseType: pulumi.String(\"developer\"),\n\t\t\tSsoLicenseMappingGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"DEV-SSO-GROUP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewLicenseMap(ctx, \"readOnlyLicenseMap\", \u0026dbtcloud.LicenseMapArgs{\n\t\t\tLicenseType: pulumi.String(\"read_only\"),\n\t\t\tSsoLicenseMappingGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"READ-ONLY-SSO-GROUP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewLicenseMap(ctx, \"itLicenseMap\", \u0026dbtcloud.LicenseMapArgs{\n\t\t\tLicenseType: pulumi.String(\"it\"),\n\t\t\tSsoLicenseMappingGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"IT-SSO-GROUP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.LicenseMap;\nimport com.pulumi.dbtcloud.LicenseMapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var devLicenseMap = new LicenseMap(\"devLicenseMap\", LicenseMapArgs.builder()        \n            .licenseType(\"developer\")\n            .ssoLicenseMappingGroups(\"DEV-SSO-GROUP\")\n            .build());\n\n        var readOnlyLicenseMap = new LicenseMap(\"readOnlyLicenseMap\", LicenseMapArgs.builder()        \n            .licenseType(\"read_only\")\n            .ssoLicenseMappingGroups(\"READ-ONLY-SSO-GROUP\")\n            .build());\n\n        var itLicenseMap = new LicenseMap(\"itLicenseMap\", LicenseMapArgs.builder()        \n            .licenseType(\"it\")\n            .ssoLicenseMappingGroups(\"IT-SSO-GROUP\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Developer license group mapping\n  devLicenseMap:\n    type: dbtcloud:LicenseMap\n    properties:\n      licenseType: developer\n      ssoLicenseMappingGroups:\n        - DEV-SSO-GROUP\n  # Read-only license mapping\n  readOnlyLicenseMap:\n    type: dbtcloud:LicenseMap\n    properties:\n      licenseType: read_only\n      ssoLicenseMappingGroups:\n        - READ-ONLY-SSO-GROUP\n  # IT license mapping\n  itLicenseMap:\n    type: dbtcloud:LicenseMap\n    properties:\n      licenseType: it\n      ssoLicenseMappingGroups:\n        - IT-SSO-GROUP\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a license map ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/licenseMap:LicenseMap test_license_map \"license_map_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/licenseMap:LicenseMap test_license_map 12345\n```\n\n ",
            "properties": {
                "licenseType": {
                    "type": "string",
                    "description": "License type\n"
                },
                "ssoLicenseMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSO license mapping group names for this group\n"
                }
            },
            "required": [
                "licenseType"
            ],
            "inputProperties": {
                "licenseType": {
                    "type": "string",
                    "description": "License type\n"
                },
                "ssoLicenseMappingGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSO license mapping group names for this group\n"
                }
            },
            "requiredInputs": [
                "licenseType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LicenseMap resources.\n",
                "properties": {
                    "licenseType": {
                        "type": "string",
                        "description": "License type\n"
                    },
                    "ssoLicenseMappingGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSO license mapping group names for this group\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/notification:Notification": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// dbt Cloud allows us to create internal and external notifications\n// an internal notification will send emails to the user mentioned in `user_id`\n//\n// NOTE: If internal notification settings already exist for a user, currently you MUST import\n// those first into the state file before you can create a new internal notification for that user.\n// Failure to do so, will result in the user losing access to existing notifications and dbt\n// support will need to be contacted to restore access.\n// cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\nconst prodJobInternalNotification = new dbtcloud.Notification(\"prodJobInternalNotification\", {\n    userId: 100,\n    onSuccesses: [dbtcloud_job.prod_job.id],\n    onFailures: [12345],\n    notificationType: 1,\n});\n// we can also send \"external\" email notifications to emails to related to dbt Cloud users\nconst prodJobExternalNotification = new dbtcloud.Notification(\"prodJobExternalNotification\", {\n    userId: 100,\n    onFailures: [\n        23456,\n        56788,\n    ],\n    onCancels: [dbtcloud_job.prod_job.id],\n    notificationType: 4,\n    externalEmail: \"my_email@mail.com\",\n});\n// and finally, we can set up Slack notifications\nconst prodJobSlackNotifications = new dbtcloud.Notification(\"prodJobSlackNotifications\", {\n    userId: 100,\n    onFailures: [\n        23456,\n        56788,\n    ],\n    onCancels: [dbtcloud_job.prod_job.id],\n    notificationType: 2,\n    slackChannelId: \"C12345ABCDE\",\n    slackChannelName: \"#my-awesome-channel\",\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# dbt Cloud allows us to create internal and external notifications\n# an internal notification will send emails to the user mentioned in `user_id`\n#\n# NOTE: If internal notification settings already exist for a user, currently you MUST import\n# those first into the state file before you can create a new internal notification for that user.\n# Failure to do so, will result in the user losing access to existing notifications and dbt\n# support will need to be contacted to restore access.\n# cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\nprod_job_internal_notification = dbtcloud.Notification(\"prodJobInternalNotification\",\n    user_id=100,\n    on_successes=[dbtcloud_job[\"prod_job\"][\"id\"]],\n    on_failures=[12345],\n    notification_type=1)\n# we can also send \"external\" email notifications to emails to related to dbt Cloud users\nprod_job_external_notification = dbtcloud.Notification(\"prodJobExternalNotification\",\n    user_id=100,\n    on_failures=[\n        23456,\n        56788,\n    ],\n    on_cancels=[dbtcloud_job[\"prod_job\"][\"id\"]],\n    notification_type=4,\n    external_email=\"my_email@mail.com\")\n# and finally, we can set up Slack notifications\nprod_job_slack_notifications = dbtcloud.Notification(\"prodJobSlackNotifications\",\n    user_id=100,\n    on_failures=[\n        23456,\n        56788,\n    ],\n    on_cancels=[dbtcloud_job[\"prod_job\"][\"id\"]],\n    notification_type=2,\n    slack_channel_id=\"C12345ABCDE\",\n    slack_channel_name=\"#my-awesome-channel\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // dbt Cloud allows us to create internal and external notifications\n    // an internal notification will send emails to the user mentioned in `user_id`\n    //\n    // NOTE: If internal notification settings already exist for a user, currently you MUST import\n    // those first into the state file before you can create a new internal notification for that user.\n    // Failure to do so, will result in the user losing access to existing notifications and dbt\n    // support will need to be contacted to restore access.\n    // cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\n    var prodJobInternalNotification = new Dbtcloud.Notification(\"prodJobInternalNotification\", new()\n    {\n        UserId = 100,\n        OnSuccesses = new[]\n        {\n            dbtcloud_job.Prod_job.Id,\n        },\n        OnFailures = new[]\n        {\n            12345,\n        },\n        NotificationType = 1,\n    });\n\n    // we can also send \"external\" email notifications to emails to related to dbt Cloud users\n    var prodJobExternalNotification = new Dbtcloud.Notification(\"prodJobExternalNotification\", new()\n    {\n        UserId = 100,\n        OnFailures = new[]\n        {\n            23456,\n            56788,\n        },\n        OnCancels = new[]\n        {\n            dbtcloud_job.Prod_job.Id,\n        },\n        NotificationType = 4,\n        ExternalEmail = \"my_email@mail.com\",\n    });\n\n    // and finally, we can set up Slack notifications\n    var prodJobSlackNotifications = new Dbtcloud.Notification(\"prodJobSlackNotifications\", new()\n    {\n        UserId = 100,\n        OnFailures = new[]\n        {\n            23456,\n            56788,\n        },\n        OnCancels = new[]\n        {\n            dbtcloud_job.Prod_job.Id,\n        },\n        NotificationType = 2,\n        SlackChannelId = \"C12345ABCDE\",\n        SlackChannelName = \"#my-awesome-channel\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewNotification(ctx, \"prodJobInternalNotification\", \u0026dbtcloud.NotificationArgs{\n\t\t\tUserId: pulumi.Int(100),\n\t\t\tOnSuccesses: pulumi.IntArray{\n\t\t\t\tdbtcloud_job.Prod_job.Id,\n\t\t\t},\n\t\t\tOnFailures: pulumi.IntArray{\n\t\t\t\tpulumi.Int(12345),\n\t\t\t},\n\t\t\tNotificationType: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewNotification(ctx, \"prodJobExternalNotification\", \u0026dbtcloud.NotificationArgs{\n\t\t\tUserId: pulumi.Int(100),\n\t\t\tOnFailures: pulumi.IntArray{\n\t\t\t\tpulumi.Int(23456),\n\t\t\t\tpulumi.Int(56788),\n\t\t\t},\n\t\t\tOnCancels: pulumi.IntArray{\n\t\t\t\tdbtcloud_job.Prod_job.Id,\n\t\t\t},\n\t\t\tNotificationType: pulumi.Int(4),\n\t\t\tExternalEmail:    pulumi.String(\"my_email@mail.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewNotification(ctx, \"prodJobSlackNotifications\", \u0026dbtcloud.NotificationArgs{\n\t\t\tUserId: pulumi.Int(100),\n\t\t\tOnFailures: pulumi.IntArray{\n\t\t\t\tpulumi.Int(23456),\n\t\t\t\tpulumi.Int(56788),\n\t\t\t},\n\t\t\tOnCancels: pulumi.IntArray{\n\t\t\t\tdbtcloud_job.Prod_job.Id,\n\t\t\t},\n\t\t\tNotificationType: pulumi.Int(2),\n\t\t\tSlackChannelId:   pulumi.String(\"C12345ABCDE\"),\n\t\t\tSlackChannelName: pulumi.String(\"#my-awesome-channel\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Notification;\nimport com.pulumi.dbtcloud.NotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prodJobInternalNotification = new Notification(\"prodJobInternalNotification\", NotificationArgs.builder()        \n            .userId(100)\n            .onSuccesses(dbtcloud_job.prod_job().id())\n            .onFailures(12345)\n            .notificationType(1)\n            .build());\n\n        var prodJobExternalNotification = new Notification(\"prodJobExternalNotification\", NotificationArgs.builder()        \n            .userId(100)\n            .onFailures(            \n                23456,\n                56788)\n            .onCancels(dbtcloud_job.prod_job().id())\n            .notificationType(4)\n            .externalEmail(\"my_email@mail.com\")\n            .build());\n\n        var prodJobSlackNotifications = new Notification(\"prodJobSlackNotifications\", NotificationArgs.builder()        \n            .userId(100)\n            .onFailures(            \n                23456,\n                56788)\n            .onCancels(dbtcloud_job.prod_job().id())\n            .notificationType(2)\n            .slackChannelId(\"C12345ABCDE\")\n            .slackChannelName(\"#my-awesome-channel\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # dbt Cloud allows us to create internal and external notifications\n\n  # // an internal notification will send emails to the user mentioned in `user_id`\n  # //\n  # // NOTE: If internal notification settings already exist for a user, currently you MUST import\n  # // those first into the state file before you can create a new internal notification for that user.\n  # // Failure to do so, will result in the user losing access to existing notifications and dbt\n  # // support will need to be contacted to restore access.\n  # // cmd: terraform import dbtcloud_notification.prod_job_internal_notification \u003cuser_id\u003e\n  prodJobInternalNotification:\n    type: dbtcloud:Notification\n    properties:\n      # user_id is the internal ID of a given user in dbt Cloud\n      userId: 100\n      onSuccesses:\n        - ${dbtcloud_job.prod_job.id}\n      onFailures:\n        - 12345\n      # the Type 1 is used for internal notifications\n      notificationType: 1\n  # we can also send \"external\" email notifications to emails to related to dbt Cloud users\n  prodJobExternalNotification:\n    type: dbtcloud:Notification\n    properties:\n      # we still need the ID of a user in dbt Cloud even though it is not used for sending notifications\n      userId: 100\n      onFailures:\n        - 23456\n        - 56788\n      onCancels:\n        - ${dbtcloud_job.prod_job.id}\n      # the Type 4 is used for external notifications\n      notificationType: 4\n      # the external_email is the email address that will receive the notification\n      externalEmail: my_email@mail.com\n  # and finally, we can set up Slack notifications\n  prodJobSlackNotifications:\n    type: dbtcloud:Notification\n    properties:\n      # we still need the ID of a user in dbt Cloud even though it is not used for sending notifications\n      userId: 100\n      onFailures:\n        - 23456\n        - 56788\n      onCancels:\n        - ${dbtcloud_job.prod_job.id}\n      # the Type 2 is used for Slack notifications\n      notificationType: 2\n      slackChannelId: C12345ABCDE\n      slackChannelName: '#my-awesome-channel'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a notification ID\n\n```sh\n $ pulumi import dbtcloud:index/notification:Notification my_notification \"notification_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/notification:Notification my_notification 12345\n```\n\n ",
            "properties": {
                "externalEmail": {
                    "type": "string",
                    "description": "The external email to receive the notification\n"
                },
                "notificationType": {
                    "type": "integer",
                    "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)\n"
                },
                "onCancels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on cancel\n"
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on failure\n"
                },
                "onSuccesses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on success\n"
                },
                "slackChannelId": {
                    "type": "string",
                    "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings\n"
                },
                "slackChannelName": {
                    "type": "string",
                    "description": "The name of the slack channel\n"
                },
                "state": {
                    "type": "integer",
                    "description": "State of the notification (1 = active (default), 2 = inactive)\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one\n"
                }
            },
            "required": [
                "userId"
            ],
            "inputProperties": {
                "externalEmail": {
                    "type": "string",
                    "description": "The external email to receive the notification\n"
                },
                "notificationType": {
                    "type": "integer",
                    "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)\n"
                },
                "onCancels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on cancel\n"
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on failure\n"
                },
                "onSuccesses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook on success\n"
                },
                "slackChannelId": {
                    "type": "string",
                    "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings\n"
                },
                "slackChannelName": {
                    "type": "string",
                    "description": "The name of the slack channel\n"
                },
                "state": {
                    "type": "integer",
                    "description": "State of the notification (1 = active (default), 2 = inactive)\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notification resources.\n",
                "properties": {
                    "externalEmail": {
                        "type": "string",
                        "description": "The external email to receive the notification\n"
                    },
                    "notificationType": {
                        "type": "integer",
                        "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external_email ; 2 = Slack channel: requires `slack_channel_id` and `slack_channel_name` ; 4 = external email: requires setting an `external_email`)\n"
                    },
                    "onCancels": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on cancel\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on failure\n"
                    },
                    "onSuccesses": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on success\n"
                    },
                    "slackChannelId": {
                        "type": "string",
                        "description": "The ID of the Slack channel to receive the notification. It can be found at the bottom of the Slack channel settings\n"
                    },
                    "slackChannelName": {
                        "type": "string",
                        "description": "The name of the slack channel\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "State of the notification (1 = active (default), 2 = inactive)\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/postgresCredential:PostgresCredential": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_postgres_credential instead of dbtcloud_postgres_credential for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst postgresProdCredential = new dbtcloud.PostgresCredential(\"postgresProdCredential\", {\n    isActive: true,\n    projectId: dbtcloud_project.dbt_project.id,\n    type: \"postgres\",\n    defaultSchema: \"my_schema\",\n    username: \"my_username\",\n    password: \"my_password\",\n    numThreads: 16,\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_postgres_credential instead of dbtcloud_postgres_credential for the legacy resource names\n# legacy names will be removed from 0.3 onwards\npostgres_prod_credential = dbtcloud.PostgresCredential(\"postgresProdCredential\",\n    is_active=True,\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    type=\"postgres\",\n    default_schema=\"my_schema\",\n    username=\"my_username\",\n    password=\"my_password\",\n    num_threads=16)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_postgres_credential instead of dbtcloud_postgres_credential for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var postgresProdCredential = new Dbtcloud.PostgresCredential(\"postgresProdCredential\", new()\n    {\n        IsActive = true,\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        Type = \"postgres\",\n        DefaultSchema = \"my_schema\",\n        Username = \"my_username\",\n        Password = \"my_password\",\n        NumThreads = 16,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewPostgresCredential(ctx, \"postgresProdCredential\", \u0026dbtcloud.PostgresCredentialArgs{\n\t\t\tIsActive:      pulumi.Bool(true),\n\t\t\tProjectId:     pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tType:          pulumi.String(\"postgres\"),\n\t\t\tDefaultSchema: pulumi.String(\"my_schema\"),\n\t\t\tUsername:      pulumi.String(\"my_username\"),\n\t\t\tPassword:      pulumi.String(\"my_password\"),\n\t\t\tNumThreads:    pulumi.Int(16),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.PostgresCredential;\nimport com.pulumi.dbtcloud.PostgresCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var postgresProdCredential = new PostgresCredential(\"postgresProdCredential\", PostgresCredentialArgs.builder()        \n            .isActive(true)\n            .projectId(dbtcloud_project.dbt_project().id())\n            .type(\"postgres\")\n            .defaultSchema(\"my_schema\")\n            .username(\"my_username\")\n            .password(\"my_password\")\n            .numThreads(16)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_postgres_credential instead of dbtcloud_postgres_credential for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  postgresProdCredential:\n    type: dbtcloud:PostgresCredential\n    properties:\n      isActive: true\n      projectId: ${dbtcloud_project.dbt_project.id}\n      type: postgres\n      defaultSchema: my_schema\n      username: my_username\n      password: my_password\n      numThreads: 16\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and credential ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/postgresCredential:PostgresCredential my_credential \"project_id:credential_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/postgresCredential:PostgresCredential my_credential 12345:6789\n```\n\n ",
            "properties": {
                "credentialId": {
                    "type": "integer",
                    "description": "The system Postgres/Redshift/AlloyDB credential ID\n"
                },
                "defaultSchema": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Postgres/Redshift/AlloyDB credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for Postgres/Redshift/AlloyDB\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Postgres/Redshift/AlloyDB credential in\n"
                },
                "targetName": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of connection. One of (postgres/redshift). Use postgres for alloydb connections\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Postgres/Redshift/AlloyDB\n"
                }
            },
            "required": [
                "credentialId",
                "defaultSchema",
                "projectId",
                "type",
                "username"
            ],
            "inputProperties": {
                "defaultSchema": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Postgres/Redshift/AlloyDB credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for Postgres/Redshift/AlloyDB\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Postgres/Redshift/AlloyDB credential in\n",
                    "willReplaceOnChanges": true
                },
                "targetName": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of connection. One of (postgres/redshift). Use postgres for alloydb connections\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Postgres/Redshift/AlloyDB\n"
                }
            },
            "requiredInputs": [
                "defaultSchema",
                "projectId",
                "type",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PostgresCredential resources.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "The system Postgres/Redshift/AlloyDB credential ID\n"
                    },
                    "defaultSchema": {
                        "type": "string",
                        "description": "Default schema name\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the Postgres/Redshift/AlloyDB credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for Postgres/Redshift/AlloyDB\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Postgres/Redshift/AlloyDB credential in\n",
                        "willReplaceOnChanges": true
                    },
                    "targetName": {
                        "type": "string",
                        "description": "Default schema name\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of connection. One of (postgres/redshift). Use postgres for alloydb connections\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for Postgres/Redshift/AlloyDB\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/project:Project": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\nconst dbtProject = new dbtcloud.Project(\"dbtProject\", {});\nconst dbtProjectWithSubdir = new dbtcloud.Project(\"dbtProjectWithSubdir\", {dbtProjectSubdirectory: \"/path\"});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\ndbt_project = dbtcloud.Project(\"dbtProject\")\ndbt_project_with_subdir = dbtcloud.Project(\"dbtProjectWithSubdir\", dbt_project_subdirectory=\"/path\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dbtProject = new Dbtcloud.Project(\"dbtProject\");\n\n    var dbtProjectWithSubdir = new Dbtcloud.Project(\"dbtProjectWithSubdir\", new()\n    {\n        DbtProjectSubdirectory = \"/path\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewProject(ctx, \"dbtProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewProject(ctx, \"dbtProjectWithSubdir\", \u0026dbtcloud.ProjectArgs{\n\t\t\tDbtProjectSubdirectory: pulumi.String(\"/path\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Project;\nimport com.pulumi.dbtcloud.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbtProject = new Project(\"dbtProject\");\n\n        var dbtProjectWithSubdir = new Project(\"dbtProjectWithSubdir\", ProjectArgs.builder()        \n            .dbtProjectSubdirectory(\"/path\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dbtProject:\n    type: dbtcloud:Project\n  dbtProjectWithSubdir:\n    type: dbtcloud:Project\n    properties:\n      dbtProjectSubdirectory: /path\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/project:Project test_project \"project_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/project:Project test_project 12345\n```\n\n ",
            "properties": {
                "dbtProjectSubdirectory": {
                    "type": "string",
                    "description": "dbt project subdirectory path\n"
                },
                "name": {
                    "type": "string",
                    "description": "Project name\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "dbtProjectSubdirectory": {
                    "type": "string",
                    "description": "dbt project subdirectory path\n"
                },
                "name": {
                    "type": "string",
                    "description": "Project name\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "dbtProjectSubdirectory": {
                        "type": "string",
                        "description": "dbt project subdirectory path\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Project name\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/projectArtefacts:ProjectArtefacts": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_project_artefacts instead of dbtcloud_project_artefacts for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst myProjectArtefacts = new dbtcloud.ProjectArtefacts(\"myProjectArtefacts\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    docsJobId: dbtcloud_job.prod_job.id,\n    freshnessJobId: dbtcloud_job.prod_job.id,\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_project_artefacts instead of dbtcloud_project_artefacts for the legacy resource names\n# legacy names will be removed from 0.3 onwards\nmy_project_artefacts = dbtcloud.ProjectArtefacts(\"myProjectArtefacts\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    docs_job_id=dbtcloud_job[\"prod_job\"][\"id\"],\n    freshness_job_id=dbtcloud_job[\"prod_job\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_project_artefacts instead of dbtcloud_project_artefacts for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var myProjectArtefacts = new Dbtcloud.ProjectArtefacts(\"myProjectArtefacts\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        DocsJobId = dbtcloud_job.Prod_job.Id,\n        FreshnessJobId = dbtcloud_job.Prod_job.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewProjectArtefacts(ctx, \"myProjectArtefacts\", \u0026dbtcloud.ProjectArtefactsArgs{\n\t\t\tProjectId:      pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tDocsJobId:      pulumi.Any(dbtcloud_job.Prod_job.Id),\n\t\t\tFreshnessJobId: pulumi.Any(dbtcloud_job.Prod_job.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ProjectArtefacts;\nimport com.pulumi.dbtcloud.ProjectArtefactsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myProjectArtefacts = new ProjectArtefacts(\"myProjectArtefacts\", ProjectArtefactsArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .docsJobId(dbtcloud_job.prod_job().id())\n            .freshnessJobId(dbtcloud_job.prod_job().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_project_artefacts instead of dbtcloud_project_artefacts for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  myProjectArtefacts:\n    type: dbtcloud:ProjectArtefacts\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      docsJobId: ${dbtcloud_job.prod_job.id}\n      freshnessJobId: ${dbtcloud_job.prod_job.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/projectArtefacts:ProjectArtefacts my_artefacts \"project_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/projectArtefacts:ProjectArtefacts my_artefacts 12345\n```\n\n ",
            "properties": {
                "docsJobId": {
                    "type": "integer",
                    "description": "Docs Job ID\n"
                },
                "freshnessJobId": {
                    "type": "integer",
                    "description": "Freshness Job ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "docsJobId": {
                    "type": "integer",
                    "description": "Docs Job ID\n"
                },
                "freshnessJobId": {
                    "type": "integer",
                    "description": "Freshness Job ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectArtefacts resources.\n",
                "properties": {
                    "docsJobId": {
                        "type": "integer",
                        "description": "Docs Job ID\n"
                    },
                    "freshnessJobId": {
                        "type": "integer",
                        "description": "Freshness Job ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/projectConnection:ProjectConnection": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_project_connection instead of dbtcloud_project_connection for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst dbtProjectConnection = new dbtcloud.ProjectConnection(\"dbtProjectConnection\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    connectionId: dbtcloud_connection.dbt_connection.connection_id,\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_project_connection instead of dbtcloud_project_connection for the legacy resource names\n# legacy names will be removed from 0.3 onwards\ndbt_project_connection = dbtcloud.ProjectConnection(\"dbtProjectConnection\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    connection_id=dbtcloud_connection[\"dbt_connection\"][\"connection_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_project_connection instead of dbtcloud_project_connection for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var dbtProjectConnection = new Dbtcloud.ProjectConnection(\"dbtProjectConnection\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        ConnectionId = dbtcloud_connection.Dbt_connection.Connection_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewProjectConnection(ctx, \"dbtProjectConnection\", \u0026dbtcloud.ProjectConnectionArgs{\n\t\t\tProjectId:    pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tConnectionId: pulumi.Any(dbtcloud_connection.Dbt_connection.Connection_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ProjectConnection;\nimport com.pulumi.dbtcloud.ProjectConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbtProjectConnection = new ProjectConnection(\"dbtProjectConnection\", ProjectConnectionArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .connectionId(dbtcloud_connection.dbt_connection().connection_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_project_connection instead of dbtcloud_project_connection for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  dbtProjectConnection:\n    type: dbtcloud:ProjectConnection\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      connectionId: ${dbtcloud_connection.dbt_connection.connection_id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and Connection ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/projectConnection:ProjectConnection my_project \"project_id:connection_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/projectConnection:ProjectConnection my_project 12345:5678\n```\n\n ",
            "properties": {
                "connectionId": {
                    "type": "integer",
                    "description": "Connection ID\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n"
                }
            },
            "required": [
                "connectionId",
                "projectId"
            ],
            "inputProperties": {
                "connectionId": {
                    "type": "integer",
                    "description": "Connection ID\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectConnection resources.\n",
                "properties": {
                    "connectionId": {
                        "type": "integer",
                        "description": "Connection ID\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/projectRepository:ProjectRepository": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_project_repository instead of dbtcloud_project_repository for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst dbtProjectRepository = new dbtcloud.ProjectRepository(\"dbtProjectRepository\", {\n    projectId: dbtcloud_project.dbt_project.id,\n    repositoryId: dbtcloud_repository.dbt_repository.repository_id,\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_project_repository instead of dbtcloud_project_repository for the legacy resource names\n# legacy names will be removed from 0.3 onwards\ndbt_project_repository = dbtcloud.ProjectRepository(\"dbtProjectRepository\",\n    project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    repository_id=dbtcloud_repository[\"dbt_repository\"][\"repository_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_project_repository instead of dbtcloud_project_repository for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var dbtProjectRepository = new Dbtcloud.ProjectRepository(\"dbtProjectRepository\", new()\n    {\n        ProjectId = dbtcloud_project.Dbt_project.Id,\n        RepositoryId = dbtcloud_repository.Dbt_repository.Repository_id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewProjectRepository(ctx, \"dbtProjectRepository\", \u0026dbtcloud.ProjectRepositoryArgs{\n\t\t\tProjectId:    pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\tRepositoryId: pulumi.Any(dbtcloud_repository.Dbt_repository.Repository_id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ProjectRepository;\nimport com.pulumi.dbtcloud.ProjectRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dbtProjectRepository = new ProjectRepository(\"dbtProjectRepository\", ProjectRepositoryArgs.builder()        \n            .projectId(dbtcloud_project.dbt_project().id())\n            .repositoryId(dbtcloud_repository.dbt_repository().repository_id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_project_repository instead of dbtcloud_project_repository for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  dbtProjectRepository:\n    type: dbtcloud:ProjectRepository\n    properties:\n      projectId: ${dbtcloud_project.dbt_project.id}\n      repositoryId: ${dbtcloud_repository.dbt_repository.repository_id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and Connection ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/projectRepository:ProjectRepository my_project \"project_id:repository_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/projectRepository:ProjectRepository my_project 12345:5678\n```\n\n ",
            "properties": {
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n"
                },
                "repositoryId": {
                    "type": "integer",
                    "description": "Repository ID\n"
                }
            },
            "required": [
                "projectId",
                "repositoryId"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "integer",
                    "description": "Project ID\n",
                    "willReplaceOnChanges": true
                },
                "repositoryId": {
                    "type": "integer",
                    "description": "Repository ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "repositoryId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectRepository resources.\n",
                "properties": {
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryId": {
                        "type": "integer",
                        "description": "Repository ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/repository:Repository": {
            "description": "*Note*: Some upstream resources can be slow to create, so if creating a project at\nthe same time as the repository, it's recommended to use the `depends_on` meta argument.\n\nIn order to find the `github_installation_id`, you can log in to dbt Cloud, replace `\u003cdbt_cloud_url\u003e` by your dbt Cloud\nURL and run the following commands in the Google Chrome console:\n\n\nAlternatively, you can go to the page `https://\u003cdbt_cloud_url\u003e/api/v2/integrations/github/installations/` and read the\nvalue of `id`  or use the `http` provider to retrieve it automatically like in the example below.\n\n{{% examples %}}\n## Example Usage\n### repo cloned via the GitHub integration, manually entering the `github_installation_id`\nresource \"dbtcloud_repository\" \"github_repo\" {\n  project_id             = dbtcloud_project.dbt_project.id\n  remote_url             = \"git@github.com:\u003cgithub_org\u003e/\u003cgithub_repo\u003e.git\"\n  github_installation_id = 9876\n  git_clone_strategy     = \"github_app\"\n}\n\n\n### repo cloned via the GitHub integration, with auto-retrieval of the `github_installation_id`\n# here, we assume that `token` and `host_url` are respectively accessible via `var.dbt_token` and `var.dbt_host_url`\n# NOTE: the following requires connecting via a user token and can't be retrieved with a service token\ndata \"http\" \"github_installations_response\" {\n  url = format(\"%s/v2/integrations/github/installations/\", var.dbt_host_url)\n  request_headers = {\n    Authorization = format(\"Bearer %s\", var.dbt_token)\n  }\n}\n\nlocals {\n  github_installation_id = jsondecode(data.http.github_installations_response.response_body)[0].id\n}\n\nresource \"dbtcloud_repository\" \"github_repo_other\" {\n  project_id             = dbtcloud_project.dbt_project.id\n  remote_url             = \"git@github.com:\u003cgithub_org\u003e/\u003cgithub_repo\u003e.git\"\n  github_installation_id = local.github_installation_id\n  git_clone_strategy     = \"github_app\"\n}\n\n\n### repo cloned via the GitLab integration\n# as of 15 Sept 2023 this resource requires using a user token and can't be set with a service token - CC-791\nresource \"dbtcloud_repository\" \"gitlab_repo\" {\n  project_id         = dbtcloud_project.dbt_project.id\n  remote_url         = \"\u003cgitlab-group\u003e/\u003cgitlab-project\u003e\"\n  gitlab_project_id  = 8765\n  git_clone_strategy = \"deploy_token\"\n}\n\n\n### repo cloned via the deploy token strategy\nresource \"dbtcloud_repository\" \"deploy_repo\" {\n  project_id         = dbtcloud_project.dbt_project.id\n  remote_url         = \"git://github.com/\u003cgithub_org\u003e/\u003cgithub_repo\u003e.git\"\n  git_clone_strategy = \"deploy_key\"\n}\n\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and repository ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/repository:Repository test_repository \"project_id:repository_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/repository:Repository test_repository 12345:6789\n```\n\n ",
            "properties": {
                "azureActiveDirectoryProjectId": {
                    "type": "string",
                    "description": "The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)\n"
                },
                "azureActiveDirectoryRepositoryId": {
                    "type": "string",
                    "description": "The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)\n"
                },
                "azureBypassWebhookRegistrationFailure": {
                    "type": "boolean",
                    "description": "If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)\n"
                },
                "deployKey": {
                    "type": "string",
                    "description": "Public key generated by dbt when using `deploy_key` clone strategy\n"
                },
                "fetchDeployKey": {
                    "type": "boolean",
                    "description": "Whether we should return the public deploy key - (for the `deploy_key` strategy)\n"
                },
                "gitCloneStrategy": {
                    "type": "string",
                    "description": "Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO native integration\n"
                },
                "githubInstallationId": {
                    "type": "integer",
                    "description": "Identifier for the GitHub App - (for GitHub native integration only)\n"
                },
                "gitlabProjectId": {
                    "type": "integer",
                    "description": "Identifier for the Gitlab project -  (for GitLab native integration only)\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the repository is active\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the repository in\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git URL for the repository or \u003cGroup\u003e/\u003cProject\u003e for Gitlab\n"
                },
                "repositoryCredentialsId": {
                    "type": "integer",
                    "description": "Credentials ID for the repository (From the repository side not the dbt Cloud ID)\n"
                },
                "repositoryId": {
                    "type": "integer",
                    "description": "Repository Identifier\n"
                }
            },
            "required": [
                "deployKey",
                "projectId",
                "remoteUrl",
                "repositoryCredentialsId",
                "repositoryId"
            ],
            "inputProperties": {
                "azureActiveDirectoryProjectId": {
                    "type": "string",
                    "description": "The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)\n",
                    "willReplaceOnChanges": true
                },
                "azureActiveDirectoryRepositoryId": {
                    "type": "string",
                    "description": "The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)\n",
                    "willReplaceOnChanges": true
                },
                "azureBypassWebhookRegistrationFailure": {
                    "type": "boolean",
                    "description": "If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)\n",
                    "willReplaceOnChanges": true
                },
                "fetchDeployKey": {
                    "type": "boolean",
                    "description": "Whether we should return the public deploy key - (for the `deploy_key` strategy)\n"
                },
                "gitCloneStrategy": {
                    "type": "string",
                    "description": "Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO native integration\n",
                    "willReplaceOnChanges": true
                },
                "githubInstallationId": {
                    "type": "integer",
                    "description": "Identifier for the GitHub App - (for GitHub native integration only)\n",
                    "willReplaceOnChanges": true
                },
                "gitlabProjectId": {
                    "type": "integer",
                    "description": "Identifier for the Gitlab project -  (for GitLab native integration only)\n",
                    "willReplaceOnChanges": true
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the repository is active\n"
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the repository in\n",
                    "willReplaceOnChanges": true
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git URL for the repository or \u003cGroup\u003e/\u003cProject\u003e for Gitlab\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "remoteUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "azureActiveDirectoryProjectId": {
                        "type": "string",
                        "description": "The Azure Dev Ops project ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsProject` and the project name - (for ADO native integration only)\n",
                        "willReplaceOnChanges": true
                    },
                    "azureActiveDirectoryRepositoryId": {
                        "type": "string",
                        "description": "The Azure Dev Ops repository ID. It can be retrieved via the Azure API or using the data source `dbtcloud.getAzureDevOpsRepository` along with the ADO Project ID and the repository name - (for ADO native integration only)\n",
                        "willReplaceOnChanges": true
                    },
                    "azureBypassWebhookRegistrationFailure": {
                        "type": "boolean",
                        "description": "If set to False (the default), the connection will fail if the service user doesn't have access to set webhooks (required for auto-triggering CI jobs). If set to True, the connection will be successful but no automated CI job will be triggered - (for ADO native integration only)\n",
                        "willReplaceOnChanges": true
                    },
                    "deployKey": {
                        "type": "string",
                        "description": "Public key generated by dbt when using `deploy_key` clone strategy\n"
                    },
                    "fetchDeployKey": {
                        "type": "boolean",
                        "description": "Whether we should return the public deploy key - (for the `deploy_key` strategy)\n"
                    },
                    "gitCloneStrategy": {
                        "type": "string",
                        "description": "Git clone strategy for the repository. Can be `deploy_key` (default) for cloning via SSH Deploy Key, `github_app` for GitHub native integration, `deploy_token` for the GitLab native integration and `azure_active_directory_app` for ADO native integration\n",
                        "willReplaceOnChanges": true
                    },
                    "githubInstallationId": {
                        "type": "integer",
                        "description": "Identifier for the GitHub App - (for GitHub native integration only)\n",
                        "willReplaceOnChanges": true
                    },
                    "gitlabProjectId": {
                        "type": "integer",
                        "description": "Identifier for the Gitlab project -  (for GitLab native integration only)\n",
                        "willReplaceOnChanges": true
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the repository is active\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the repository in\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "Git URL for the repository or \u003cGroup\u003e/\u003cProject\u003e for Gitlab\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryCredentialsId": {
                        "type": "integer",
                        "description": "Credentials ID for the repository (From the repository side not the dbt Cloud ID)\n"
                    },
                    "repositoryId": {
                        "type": "integer",
                        "description": "Repository Identifier\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/serviceToken:ServiceToken": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_service_token instead of dbtcloud_service_token for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst testServiceToken = new dbtcloud.ServiceToken(\"testServiceToken\", {serviceTokenPermissions: [\n    {\n        permissionSet: \"git_admin\",\n        allProjects: true,\n    },\n    {\n        permissionSet: \"job_admin\",\n        allProjects: false,\n        projectId: dbtcloud_project.dbt_project.id,\n    },\n]});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_service_token instead of dbtcloud_service_token for the legacy resource names\n# legacy names will be removed from 0.3 onwards\ntest_service_token = dbtcloud.ServiceToken(\"testServiceToken\", service_token_permissions=[\n    dbtcloud.ServiceTokenServiceTokenPermissionArgs(\n        permission_set=\"git_admin\",\n        all_projects=True,\n    ),\n    dbtcloud.ServiceTokenServiceTokenPermissionArgs(\n        permission_set=\"job_admin\",\n        all_projects=False,\n        project_id=dbtcloud_project[\"dbt_project\"][\"id\"],\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_service_token instead of dbtcloud_service_token for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var testServiceToken = new Dbtcloud.ServiceToken(\"testServiceToken\", new()\n    {\n        ServiceTokenPermissions = new[]\n        {\n            new Dbtcloud.Inputs.ServiceTokenServiceTokenPermissionArgs\n            {\n                PermissionSet = \"git_admin\",\n                AllProjects = true,\n            },\n            new Dbtcloud.Inputs.ServiceTokenServiceTokenPermissionArgs\n            {\n                PermissionSet = \"job_admin\",\n                AllProjects = false,\n                ProjectId = dbtcloud_project.Dbt_project.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewServiceToken(ctx, \"testServiceToken\", \u0026dbtcloud.ServiceTokenArgs{\n\t\t\tServiceTokenPermissions: dbtcloud.ServiceTokenServiceTokenPermissionArray{\n\t\t\t\t\u0026dbtcloud.ServiceTokenServiceTokenPermissionArgs{\n\t\t\t\t\tPermissionSet: pulumi.String(\"git_admin\"),\n\t\t\t\t\tAllProjects:   pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026dbtcloud.ServiceTokenServiceTokenPermissionArgs{\n\t\t\t\t\tPermissionSet: pulumi.String(\"job_admin\"),\n\t\t\t\t\tAllProjects:   pulumi.Bool(false),\n\t\t\t\t\tProjectId:     pulumi.Any(dbtcloud_project.Dbt_project.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.ServiceToken;\nimport com.pulumi.dbtcloud.ServiceTokenArgs;\nimport com.pulumi.dbtcloud.inputs.ServiceTokenServiceTokenPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testServiceToken = new ServiceToken(\"testServiceToken\", ServiceTokenArgs.builder()        \n            .serviceTokenPermissions(            \n                ServiceTokenServiceTokenPermissionArgs.builder()\n                    .permissionSet(\"git_admin\")\n                    .allProjects(true)\n                    .build(),\n                ServiceTokenServiceTokenPermissionArgs.builder()\n                    .permissionSet(\"job_admin\")\n                    .allProjects(false)\n                    .projectId(dbtcloud_project.dbt_project().id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_service_token instead of dbtcloud_service_token for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  testServiceToken:\n    type: dbtcloud:ServiceToken\n    properties:\n      serviceTokenPermissions:\n        - permissionSet: git_admin\n          allProjects: true\n        - permissionSet: job_admin\n          allProjects: false\n          projectId: ${dbtcloud_project.dbt_project.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a group ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/serviceToken:ServiceToken test_service_token \"service_token_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/serviceToken:ServiceToken test_service_token 12345\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Service token name\n"
                },
                "serviceTokenPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/ServiceTokenServiceTokenPermission:ServiceTokenServiceTokenPermission"
                    },
                    "description": "Permissions set for the service token\n"
                },
                "state": {
                    "type": "integer",
                    "description": "Service token state (1 is active, 2 is inactive)\n"
                },
                "tokenString": {
                    "type": "string",
                    "description": "Service token secret value (only accessible on creation))\n",
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "Service token UID (part of the token)\n"
                }
            },
            "required": [
                "name",
                "tokenString",
                "uid"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Service token name\n",
                    "willReplaceOnChanges": true
                },
                "serviceTokenPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dbtcloud:index/ServiceTokenServiceTokenPermission:ServiceTokenServiceTokenPermission"
                    },
                    "description": "Permissions set for the service token\n"
                },
                "state": {
                    "type": "integer",
                    "description": "Service token state (1 is active, 2 is inactive)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceToken resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Service token name\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceTokenPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/ServiceTokenServiceTokenPermission:ServiceTokenServiceTokenPermission"
                        },
                        "description": "Permissions set for the service token\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "Service token state (1 is active, 2 is inactive)\n"
                    },
                    "tokenString": {
                        "type": "string",
                        "description": "Service token secret value (only accessible on creation))\n",
                        "secret": true
                    },
                    "uid": {
                        "type": "string",
                        "description": "Service token UID (part of the token)\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/snowflakeCredential:SnowflakeCredential": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// NOTE for customers using the LEGACY dbt_cloud provider:\n// use dbt_cloud_snowflake_credential instead of dbtcloud_snowflake_credential for the legacy resource names\n// legacy names will be removed from 0.3 onwards\nconst prodCredential = new dbtcloud.SnowflakeCredential(\"prodCredential\", {\n    projectId: data.dbtcloud_project.dbt_project.id,\n    authType: \"password\",\n    numThreads: 16,\n    schema: \"SCHEMA\",\n    user: \"user\",\n    password: \"password\",\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# NOTE for customers using the LEGACY dbt_cloud provider:\n# use dbt_cloud_snowflake_credential instead of dbtcloud_snowflake_credential for the legacy resource names\n# legacy names will be removed from 0.3 onwards\nprod_credential = dbtcloud.SnowflakeCredential(\"prodCredential\",\n    project_id=data[\"dbtcloud_project\"][\"dbt_project\"][\"id\"],\n    auth_type=\"password\",\n    num_threads=16,\n    schema=\"SCHEMA\",\n    user=\"user\",\n    password=\"password\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // NOTE for customers using the LEGACY dbt_cloud provider:\n    // use dbt_cloud_snowflake_credential instead of dbtcloud_snowflake_credential for the legacy resource names\n    // legacy names will be removed from 0.3 onwards\n    var prodCredential = new Dbtcloud.SnowflakeCredential(\"prodCredential\", new()\n    {\n        ProjectId = data.Dbtcloud_project.Dbt_project.Id,\n        AuthType = \"password\",\n        NumThreads = 16,\n        Schema = \"SCHEMA\",\n        User = \"user\",\n        Password = \"password\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewSnowflakeCredential(ctx, \"prodCredential\", \u0026dbtcloud.SnowflakeCredentialArgs{\n\t\t\tProjectId:  pulumi.Any(data.Dbtcloud_project.Dbt_project.Id),\n\t\t\tAuthType:   pulumi.String(\"password\"),\n\t\t\tNumThreads: pulumi.Int(16),\n\t\t\tSchema:     pulumi.String(\"SCHEMA\"),\n\t\t\tUser:       pulumi.String(\"user\"),\n\t\t\tPassword:   pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.SnowflakeCredential;\nimport com.pulumi.dbtcloud.SnowflakeCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prodCredential = new SnowflakeCredential(\"prodCredential\", SnowflakeCredentialArgs.builder()        \n            .projectId(data.dbtcloud_project().dbt_project().id())\n            .authType(\"password\")\n            .numThreads(16)\n            .schema(\"SCHEMA\")\n            .user(\"user\")\n            .password(\"password\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # NOTE for customers using the LEGACY dbt_cloud provider:\n  # // use dbt_cloud_snowflake_credential instead of dbtcloud_snowflake_credential for the legacy resource names\n  # // legacy names will be removed from 0.3 onwards\n  prodCredential:\n    type: dbtcloud:SnowflakeCredential\n    properties:\n      projectId: ${data.dbtcloud_project.dbt_project.id}\n      authType: password\n      numThreads: 16\n      schema: SCHEMA\n      user: user\n      password: password\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a project ID and credential ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential \"project_id:credential_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/snowflakeCredential:SnowflakeCredential prod_snowflake_credential 12345:6789\n```\n\n ",
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "The type of Snowflake credential ('password' or 'keypair')\n"
                },
                "credentialId": {
                    "type": "integer",
                    "description": "The system Snowflake credential ID\n"
                },
                "database": {
                    "type": "string",
                    "description": "Database to connect to\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Snowflake credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for Snowflake\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private key for Snowflake\n",
                    "secret": true
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "Private key passphrase for Snowflake\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Snowflake credential in\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role to assume\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "user": {
                    "type": "string",
                    "description": "Username for Snowflake\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "Warehouse to use\n"
                }
            },
            "required": [
                "authType",
                "credentialId",
                "numThreads",
                "projectId",
                "schema",
                "user"
            ],
            "inputProperties": {
                "authType": {
                    "type": "string",
                    "description": "The type of Snowflake credential ('password' or 'keypair')\n"
                },
                "database": {
                    "type": "string",
                    "description": "Database to connect to\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the Snowflake credential is active\n"
                },
                "numThreads": {
                    "type": "integer",
                    "description": "Number of threads to use\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for Snowflake\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private key for Snowflake\n",
                    "secret": true
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "Private key passphrase for Snowflake\n",
                    "secret": true
                },
                "projectId": {
                    "type": "integer",
                    "description": "Project ID to create the Snowflake credential in\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "Role to assume\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Default schema name\n"
                },
                "user": {
                    "type": "string",
                    "description": "Username for Snowflake\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "Warehouse to use\n"
                }
            },
            "requiredInputs": [
                "authType",
                "numThreads",
                "projectId",
                "schema",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SnowflakeCredential resources.\n",
                "properties": {
                    "authType": {
                        "type": "string",
                        "description": "The type of Snowflake credential ('password' or 'keypair')\n"
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "The system Snowflake credential ID\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "Database to connect to\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the Snowflake credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for Snowflake\n",
                        "secret": true
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Private key for Snowflake\n",
                        "secret": true
                    },
                    "privateKeyPassphrase": {
                        "type": "string",
                        "description": "Private key passphrase for Snowflake\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the Snowflake credential in\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "Role to assume\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "Default schema name\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "Username for Snowflake\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "Warehouse to use\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/userGroups:UserGroups": {
            "description": "Assigns a set of dbt Cloud groups to a given User ID. \n\n\u003e If additional groups were assigned manually in dbt Cloud, they will be removed. The full list of groups need to be provided as config.\n\t\t\n\u003e This resource does not currently support deletion (e.g. a deleted resource will stay as-is in dbt Cloud).\nThis is intentional in order to prevent accidental deletion of all users groups assigned to a user.\nIf you would like a different behavior, please open an issue on GitHub. To remove all groups for a user, set \"group_ids\" to the empty set \"[]\".\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\n// we can assign groups to users\nconst myUserGroups = new dbtcloud.UserGroups(\"myUserGroups\", {\n    userId: dbtcloud_user.my_user.id,\n    groupIds: [\n        1234,\n        dbtcloud_group.my_group.id,\n        local.my_group_id,\n    ],\n});\n// as Delete is not handled currently, by design, removing all groups from a user can be done with\nconst myOtherUserGroups = new dbtcloud.UserGroups(\"myOtherUserGroups\", {\n    userId: 123456,\n    groupIds: [],\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\n# we can assign groups to users\nmy_user_groups = dbtcloud.UserGroups(\"myUserGroups\",\n    user_id=dbtcloud_user[\"my_user\"][\"id\"],\n    group_ids=[\n        1234,\n        dbtcloud_group[\"my_group\"][\"id\"],\n        local[\"my_group_id\"],\n    ])\n# as Delete is not handled currently, by design, removing all groups from a user can be done with\nmy_other_user_groups = dbtcloud.UserGroups(\"myOtherUserGroups\",\n    user_id=123456,\n    group_ids=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // we can assign groups to users\n    var myUserGroups = new Dbtcloud.UserGroups(\"myUserGroups\", new()\n    {\n        UserId = dbtcloud_user.My_user.Id,\n        GroupIds = new[]\n        {\n            1234,\n            dbtcloud_group.My_group.Id,\n            local.My_group_id,\n        },\n    });\n\n    // as Delete is not handled currently, by design, removing all groups from a user can be done with\n    var myOtherUserGroups = new Dbtcloud.UserGroups(\"myOtherUserGroups\", new()\n    {\n        UserId = 123456,\n        GroupIds = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewUserGroups(ctx, \"myUserGroups\", \u0026dbtcloud.UserGroupsArgs{\n\t\t\tUserId: pulumi.Any(dbtcloud_user.My_user.Id),\n\t\t\tGroupIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1234),\n\t\t\t\tdbtcloud_group.My_group.Id,\n\t\t\t\tlocal.My_group_id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.NewUserGroups(ctx, \"myOtherUserGroups\", \u0026dbtcloud.UserGroupsArgs{\n\t\t\tUserId:   pulumi.Int(123456),\n\t\t\tGroupIds: pulumi.IntArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.UserGroups;\nimport com.pulumi.dbtcloud.UserGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myUserGroups = new UserGroups(\"myUserGroups\", UserGroupsArgs.builder()        \n            .userId(dbtcloud_user.my_user().id())\n            .groupIds(            \n                1234,\n                dbtcloud_group.my_group().id(),\n                local.my_group_id())\n            .build());\n\n        var myOtherUserGroups = new UserGroups(\"myOtherUserGroups\", UserGroupsArgs.builder()        \n            .userId(123456)\n            .groupIds()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # we can assign groups to users\n  myUserGroups:\n    type: dbtcloud:UserGroups\n    properties:\n      userId: ${dbtcloud_user.my_user.id}\n      groupIds:\n        - 1234\n        - ${dbtcloud_group.my_group.id}\n        - ${local.my_group_id}\n  # as Delete is not handled currently, by design, removing all groups from a user can be done with\n  myOtherUserGroups:\n    type: dbtcloud:UserGroups\n    properties:\n      userId: 123456\n      groupIds: []\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the User ID The User ID can be retrieved from the dbt Cloud UI or with the data source dbtcloud_user\n\n```sh\n $ pulumi import dbtcloud:index/userGroups:UserGroups my_user_groups \"user_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/userGroups:UserGroups my_user_groups 123456\n```\n\n ",
            "properties": {
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The internal ID of a dbt Cloud user\n"
                }
            },
            "required": [
                "groupIds",
                "userId"
            ],
            "inputProperties": {
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The internal ID of a dbt Cloud user\n"
                }
            },
            "requiredInputs": [
                "groupIds",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroups resources.\n",
                "properties": {
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "IDs of the groups to assign to the user. If additional groups were assigned manually in dbt Cloud, they will be removed.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The internal ID of a dbt Cloud user\n"
                    }
                },
                "type": "object"
            }
        },
        "dbtcloud:index/webhook:Webhook": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@aschot/pulumi-dbtcloud\";\n\nconst testWebhook = new dbtcloud.Webhook(\"testWebhook\", {\n    clientUrl: \"http://localhost/nothing\",\n    description: \"Test webhook\",\n    eventTypes: [\n        \"job.run.started\",\n        \"job.run.completed\",\n    ],\n    jobIds: [\n        1234,\n        5678,\n    ],\n});\n```\n```python\nimport pulumi\nimport aschot_pulumi_dbtcloud as dbtcloud\n\ntest_webhook = dbtcloud.Webhook(\"testWebhook\",\n    client_url=\"http://localhost/nothing\",\n    description=\"Test webhook\",\n    event_types=[\n        \"job.run.started\",\n        \"job.run.completed\",\n    ],\n    job_ids=[\n        1234,\n        5678,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = ASchot.Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testWebhook = new Dbtcloud.Webhook(\"testWebhook\", new()\n    {\n        ClientUrl = \"http://localhost/nothing\",\n        Description = \"Test webhook\",\n        EventTypes = new[]\n        {\n            \"job.run.started\",\n            \"job.run.completed\",\n        },\n        JobIds = new[]\n        {\n            1234,\n            5678,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.NewWebhook(ctx, \"testWebhook\", \u0026dbtcloud.WebhookArgs{\n\t\t\tClientUrl:   pulumi.String(\"http://localhost/nothing\"),\n\t\t\tDescription: pulumi.String(\"Test webhook\"),\n\t\t\tEventTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"job.run.started\"),\n\t\t\t\tpulumi.String(\"job.run.completed\"),\n\t\t\t},\n\t\t\tJobIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1234),\n\t\t\t\tpulumi.Int(5678),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.Webhook;\nimport com.pulumi.dbtcloud.WebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testWebhook = new Webhook(\"testWebhook\", WebhookArgs.builder()        \n            .clientUrl(\"http://localhost/nothing\")\n            .description(\"Test webhook\")\n            .eventTypes(            \n                \"job.run.started\",\n                \"job.run.completed\")\n            .jobIds(            \n                1234,\n                5678)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testWebhook:\n    type: dbtcloud:Webhook\n    properties:\n      clientUrl: http://localhost/nothing\n      description: Test webhook\n      eventTypes:\n        - job.run.started\n        - job.run.completed\n      jobIds:\n        - 1234\n        - 5678\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using a job ID found in the URL or via the API.\n\n```sh\n $ pulumi import dbtcloud:index/webhook:Webhook test_webhook \"job_id\"\n```\n\n\n\n```sh\n $ pulumi import dbtcloud:index/webhook:Webhook test_webhook wsu_abcdefg\n```\n\n ",
            "properties": {
                "accountIdentifier": {
                    "type": "string",
                    "description": "Webhooks Account Identifier\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "Webhooks active flag\n"
                },
                "clientUrl": {
                    "type": "string",
                    "description": "Webhooks Client URL\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhooks Description\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Webhooks Event Types\n"
                },
                "hmacSecret": {
                    "type": "string",
                    "description": "Secret key for the webhook. Can be used to validate the authenticity of the webhook.\n",
                    "secret": true
                },
                "httpStatusCode": {
                    "type": "string",
                    "description": "Latest HTTP status of the webhook\n"
                },
                "jobIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook, An empty list will trigger on all jobs\n"
                },
                "name": {
                    "type": "string",
                    "description": "Webhooks Name\n"
                },
                "webhookId": {
                    "type": "string",
                    "description": "Webhooks ID\n"
                }
            },
            "required": [
                "accountIdentifier",
                "clientUrl",
                "eventTypes",
                "hmacSecret",
                "httpStatusCode",
                "name",
                "webhookId"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Webhooks active flag\n"
                },
                "clientUrl": {
                    "type": "string",
                    "description": "Webhooks Client URL\n"
                },
                "description": {
                    "type": "string",
                    "description": "Webhooks Description\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Webhooks Event Types\n"
                },
                "jobIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of job IDs to trigger the webhook, An empty list will trigger on all jobs\n"
                },
                "name": {
                    "type": "string",
                    "description": "Webhooks Name\n"
                }
            },
            "requiredInputs": [
                "clientUrl",
                "eventTypes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "accountIdentifier": {
                        "type": "string",
                        "description": "Webhooks Account Identifier\n"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Webhooks active flag\n"
                    },
                    "clientUrl": {
                        "type": "string",
                        "description": "Webhooks Client URL\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhooks Description\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Webhooks Event Types\n"
                    },
                    "hmacSecret": {
                        "type": "string",
                        "description": "Secret key for the webhook. Can be used to validate the authenticity of the webhook.\n",
                        "secret": true
                    },
                    "httpStatusCode": {
                        "type": "string",
                        "description": "Latest HTTP status of the webhook\n"
                    },
                    "jobIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook, An empty list will trigger on all jobs\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Webhooks Name\n"
                    },
                    "webhookId": {
                        "type": "string",
                        "description": "Webhooks ID\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "dbtcloud:index/getAzureDevOpsProject:getAzureDevOpsProject": {
            "description": "Use this data source to retrieve the ID of an Azure Dev Ops project \nbased on its name.\n\t\t\nThis data source requires connecting with a user token and doesn't work with a service token.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myAdoProject = dbtcloud.getAzureDevOpsProject({\n    name: \"my-project-name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_ado_project = dbtcloud.get_azure_dev_ops_project(name=\"my-project-name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAdoProject = Dbtcloud.GetAzureDevOpsProject.Invoke(new()\n    {\n        Name = \"my-project-name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetAzureDevOpsProject(ctx, \u0026dbtcloud.GetAzureDevOpsProjectArgs{\n\t\t\tName: \"my-project-name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetAzureDevOpsProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAdoProject = DbtcloudFunctions.getAzureDevOpsProject(GetAzureDevOpsProjectArgs.builder()\n            .name(\"my-project-name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAdoProject:\n    fn::invoke:\n      Function: dbtcloud:getAzureDevOpsProject\n      Arguments:\n        name: my-project-name\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureDevOpsProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the ADO project\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureDevOpsProject.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The internal Azure Dev Ops ID of the ADO Project\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ADO project\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the ADO project\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "url"
                ]
            }
        },
        "dbtcloud:index/getAzureDevOpsRepository:getAzureDevOpsRepository": {
            "description": "Use this data source to retrieve the ID and details of an Azure Dev Ops repository \nbased on its name and the ID of the Azure Dev Ops project it belongs to.\n\t\t\nThis data source requires connecting with a user token and doesn't work with a service token.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myAdoRepository = dbtcloud.getAzureDevOpsRepository({\n    name: \"my-repo-name\",\n    azureDevOpsProjectId: data.dbtcloud_azure_dev_ops_project.my_ado_project.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_ado_repository = dbtcloud.get_azure_dev_ops_repository(name=\"my-repo-name\",\n    azure_dev_ops_project_id=data[\"dbtcloud_azure_dev_ops_project\"][\"my_ado_project\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAdoRepository = Dbtcloud.GetAzureDevOpsRepository.Invoke(new()\n    {\n        Name = \"my-repo-name\",\n        AzureDevOpsProjectId = data.Dbtcloud_azure_dev_ops_project.My_ado_project.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetAzureDevOpsRepository(ctx, \u0026dbtcloud.GetAzureDevOpsRepositoryArgs{\n\t\t\tName:                 \"my-repo-name\",\n\t\t\tAzureDevOpsProjectId: data.Dbtcloud_azure_dev_ops_project.My_ado_project.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetAzureDevOpsRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAdoRepository = DbtcloudFunctions.getAzureDevOpsRepository(GetAzureDevOpsRepositoryArgs.builder()\n            .name(\"my-repo-name\")\n            .azureDevOpsProjectId(data.dbtcloud_azure_dev_ops_project().my_ado_project().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAdoRepository:\n    fn::invoke:\n      Function: dbtcloud:getAzureDevOpsRepository\n      Arguments:\n        name: my-repo-name\n        azureDevOpsProjectId: ${data.dbtcloud_azure_dev_ops_project.my_ado_project.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureDevOpsRepository.\n",
                "properties": {
                    "azureDevOpsProjectId": {
                        "type": "string",
                        "description": "The internal Azure Dev Ops ID of the ADO Project. Can be retrieved using the data source dbtcloud*azure*dev*ops*project and the project name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ADO repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "azureDevOpsProjectId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureDevOpsRepository.\n",
                "properties": {
                    "azureDevOpsProjectId": {
                        "type": "string",
                        "description": "The internal Azure Dev Ops ID of the ADO Project. Can be retrieved using the data source dbtcloud*azure*dev*ops*project and the project name\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch of the ADO repository\n"
                    },
                    "detailsUrl": {
                        "type": "string",
                        "description": "The URL of the ADO repository showing details about the repository and its attributes\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The internal Azure Dev Ops ID of the ADO Repository\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ADO repository\n"
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "The HTTP URL of the ADO repository used to connect to dbt Cloud\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "The URL of the ADO repository accessible in the browser\n"
                    }
                },
                "type": "object",
                "required": [
                    "azureDevOpsProjectId",
                    "defaultBranch",
                    "detailsUrl",
                    "id",
                    "name",
                    "remoteUrl",
                    "webUrl"
                ]
            }
        },
        "dbtcloud:index/getBigQueryConnection:getBigQueryConnection": {
            "inputs": {
                "description": "A collection of arguments for invoking getBigQueryConnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "integer",
                        "description": "Connection Identifier\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the connection in\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBigQueryConnection.\n",
                "properties": {
                    "authProviderX509CertUrl": {
                        "type": "string",
                        "description": "Auth Provider X509 Cert URL for the Service Account\n"
                    },
                    "authUri": {
                        "type": "string",
                        "description": "Auth URI for the Service Account\n"
                    },
                    "clientEmail": {
                        "type": "string",
                        "description": "Service Account email\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Client ID of the Service Account\n"
                    },
                    "clientX509CertUrl": {
                        "type": "string",
                        "description": "Client X509 Cert URL for the Service Account\n"
                    },
                    "connectionId": {
                        "type": "integer",
                        "description": "Connection Identifier\n"
                    },
                    "dataprocClusterName": {
                        "type": "string",
                        "description": "Dataproc cluster name for PySpark workloads\n"
                    },
                    "dataprocRegion": {
                        "type": "string",
                        "description": "Google Cloud region for PySpark workloads on Dataproc\n"
                    },
                    "executionProject": {
                        "type": "string",
                        "description": "Project to bill for query execution\n"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "GCP project ID\n"
                    },
                    "gcsBucket": {
                        "type": "string",
                        "description": "URI for a Google Cloud Storage bucket to host Python code executed via Datapro\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the connection is active\n"
                    },
                    "isConfiguredForOauth": {
                        "type": "boolean",
                        "description": "Whether the connection is configured for OAuth or not\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location to create new Datasets in\n"
                    },
                    "maximumBytesBilled": {
                        "type": "integer",
                        "description": "Max number of bytes that can be billed for a given BigQuery query\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Connection name\n"
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority with which to execute BigQuery queries\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Private key of the Service Account\n"
                    },
                    "privateKeyId": {
                        "type": "string",
                        "description": "Private key ID of the Service Account\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the connection in\n"
                    },
                    "retries": {
                        "type": "integer",
                        "description": "Number of retries for queries\n"
                    },
                    "timeoutSeconds": {
                        "type": "integer",
                        "description": "Timeout in seconds for queries\n"
                    },
                    "tokenUri": {
                        "type": "string",
                        "description": "Token URI for the Service Account\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of connection\n"
                    }
                },
                "type": "object",
                "required": [
                    "authProviderX509CertUrl",
                    "authUri",
                    "clientEmail",
                    "clientId",
                    "clientX509CertUrl",
                    "connectionId",
                    "dataprocClusterName",
                    "dataprocRegion",
                    "executionProject",
                    "gcpProjectId",
                    "gcsBucket",
                    "isActive",
                    "isConfiguredForOauth",
                    "location",
                    "maximumBytesBilled",
                    "name",
                    "priority",
                    "privateKey",
                    "privateKeyId",
                    "projectId",
                    "retries",
                    "timeoutSeconds",
                    "tokenUri",
                    "type",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getBigQueryCredential:getBigQueryCredential": {
            "inputs": {
                "description": "A collection of arguments for invoking getBigQueryCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBigQueryCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "Default dataset name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the BigQuery credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "dataset",
                    "isActive",
                    "numThreads",
                    "projectId",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getConnection:getConnection": {
            "inputs": {
                "description": "A collection of arguments for invoking getConnection.\n",
                "properties": {
                    "connectionId": {
                        "type": "integer",
                        "description": "ID for the connection\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the connection in\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnection.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "Account for the connection\n"
                    },
                    "allowKeepAlive": {
                        "type": "boolean",
                        "description": "Flag for whether or not to use the keep session alive parameter in the connection\n"
                    },
                    "allowSso": {
                        "type": "boolean",
                        "description": "Flag for whether or not to use SSO for the connection\n"
                    },
                    "connectionId": {
                        "type": "integer",
                        "description": "ID for the connection\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "Database name for the connection\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the connection is active\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Connection name\n"
                    },
                    "privateLinkEndpointId": {
                        "type": "string",
                        "description": "The ID of the PrivateLink connection\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the connection in\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "Role name for the connection\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Connection type\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "Warehouse name for the connection\n"
                    }
                },
                "type": "object",
                "required": [
                    "account",
                    "allowKeepAlive",
                    "allowSso",
                    "connectionId",
                    "database",
                    "isActive",
                    "name",
                    "privateLinkEndpointId",
                    "projectId",
                    "role",
                    "type",
                    "warehouse",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getDatabricksCredential:getDatabricksCredential": {
            "inputs": {
                "description": "A collection of arguments for invoking getDatabricksCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabricksCredential.\n",
                "properties": {
                    "adapterId": {
                        "type": "integer",
                        "description": "Databricks adapter ID for the credential\n"
                    },
                    "catalog": {
                        "type": "string",
                        "description": "The catalog where to create models\n"
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema where to create models\n"
                    },
                    "targetName": {
                        "type": "string",
                        "description": "Target name\n"
                    }
                },
                "type": "object",
                "required": [
                    "adapterId",
                    "catalog",
                    "credentialId",
                    "numThreads",
                    "projectId",
                    "schema",
                    "targetName",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getEnvironment:getEnvironment": {
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "environmentId": {
                        "type": "integer",
                        "description": "ID of the environment\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the environment in\n"
                    }
                },
                "type": "object",
                "required": [
                    "environmentId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID to create the environment with\n"
                    },
                    "customBranch": {
                        "type": "string",
                        "description": "Which custom branch to use in this environment\n"
                    },
                    "dbtVersion": {
                        "type": "string",
                        "description": "Version number of dbt to use in this environment, usually in the format 1.2.0-latest rather than core versions\n"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "The type of deployment environment (currently 'production' or empty)\n"
                    },
                    "environmentId": {
                        "type": "integer",
                        "description": "ID of the environment\n"
                    },
                    "extendedAttributesId": {
                        "type": "integer",
                        "description": "The ID of the extended attributes applied\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the environment is active\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Environment name\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the environment in\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of environment (must be either development or deployment)\n"
                    },
                    "useCustomBranch": {
                        "type": "boolean",
                        "description": "Whether to use a custom git branch in this environment\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "customBranch",
                    "dbtVersion",
                    "deploymentType",
                    "environmentId",
                    "extendedAttributesId",
                    "isActive",
                    "name",
                    "projectId",
                    "type",
                    "useCustomBranch",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getEnvironmentVariable:getEnvironmentVariable": {
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironmentVariable.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name for the variable\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID the variable exists in\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironmentVariable.\n",
                "properties": {
                    "environmentValues": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map containing the environment variables\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the variable\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID the variable exists in\n"
                    }
                },
                "type": "object",
                "required": [
                    "environmentValues",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getExtendedAttributes:getExtendedAttributes": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myExtendedAttributes = dbtcloud.getExtendedAttributes({\n    extendedAttributesId: 12345,\n    projectId: 6789,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_extended_attributes = dbtcloud.get_extended_attributes(extended_attributes_id=12345,\n    project_id=6789)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myExtendedAttributes = Dbtcloud.GetExtendedAttributes.Invoke(new()\n    {\n        ExtendedAttributesId = 12345,\n        ProjectId = 6789,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupExtendedAttributes(ctx, \u0026dbtcloud.LookupExtendedAttributesArgs{\n\t\t\tExtendedAttributesId: 12345,\n\t\t\tProjectId:            6789,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetExtendedAttributesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myExtendedAttributes = DbtcloudFunctions.getExtendedAttributes(GetExtendedAttributesArgs.builder()\n            .extendedAttributesId(12345)\n            .projectId(6789)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myExtendedAttributes:\n    fn::invoke:\n      Function: dbtcloud:getExtendedAttributes\n      Arguments:\n        extendedAttributesId: 12345\n        projectId: 6789\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getExtendedAttributes.\n",
                "properties": {
                    "extendedAttributesId": {
                        "type": "integer",
                        "description": "ID of the extended attributes\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID the extended attributes refers to\n"
                    }
                },
                "type": "object",
                "required": [
                    "extendedAttributesId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getExtendedAttributes.\n",
                "properties": {
                    "extendedAttributes": {
                        "type": "string",
                        "description": "A JSON string listing the extended attributes mapping\n"
                    },
                    "extendedAttributesId": {
                        "type": "integer",
                        "description": "ID of the extended attributes\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID the extended attributes refers to\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "The state of the extended attributes (1 = active, 2 = inactive)\n"
                    }
                },
                "type": "object",
                "required": [
                    "extendedAttributes",
                    "extendedAttributesId",
                    "projectId",
                    "state",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getGroup:getGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "description": "ID of the group\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "assignByDefault": {
                        "type": "boolean",
                        "description": "Whether or not to assign this group to users by default\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "ID of the group\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the group is active\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Group name\n"
                    },
                    "ssoMappingGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSO mapping group names for this group\n"
                    }
                },
                "type": "object",
                "required": [
                    "assignByDefault",
                    "groupId",
                    "isActive",
                    "name",
                    "ssoMappingGroups",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getGroupUsers:getGroupUsers": {
            "description": "Returns a list of users assigned to a specific dbt Cloud group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myGroupUsers = dbtcloud.getGroupUsers({\n    groupId: 1234,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_group_users = dbtcloud.get_group_users(group_id=1234)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGroupUsers = Dbtcloud.GetGroupUsers.Invoke(new()\n    {\n        GroupId = 1234,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetGroupUsers(ctx, \u0026dbtcloud.GetGroupUsersArgs{\n\t\t\tGroupId: 1234,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetGroupUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myGroupUsers = DbtcloudFunctions.getGroupUsers(GetGroupUsersArgs.builder()\n            .groupId(1234)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myGroupUsers:\n    fn::invoke:\n      Function: dbtcloud:getGroupUsers\n      Arguments:\n        groupId: 1234\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroupUsers.\n",
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "description": "ID of the group\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroupUsers.\n",
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "description": "ID of the group\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getGroupUsersUser:getGroupUsersUser"
                        },
                        "description": "List of users (map of ID and email) in the group\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId",
                    "users",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getJob:getJob": {
            "inputs": {
                "description": "A collection of arguments for invoking getJob.\n",
                "properties": {
                    "jobId": {
                        "type": "integer",
                        "description": "ID of the job\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "ID of the project the job is in\n"
                    }
                },
                "type": "object",
                "required": [
                    "jobId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getJob.\n",
                "properties": {
                    "deferringEnvironmentId": {
                        "type": "integer",
                        "description": "ID of the environment this job defers to\n"
                    },
                    "deferringJobId": {
                        "type": "integer",
                        "description": "ID of the job this job defers to\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Long description for the job\n"
                    },
                    "environmentId": {
                        "type": "integer",
                        "description": "ID of the environment the job is in\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "jobId": {
                        "type": "integer",
                        "description": "ID of the job\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Given name for the job\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "ID of the project the job is in\n"
                    },
                    "selfDeferring": {
                        "type": "boolean",
                        "description": "Whether this job defers on a previous run of itself (overrides value in deferring*job*id)\n"
                    },
                    "timeoutSeconds": {
                        "type": "integer",
                        "description": "Number of seconds before the job times out\n"
                    },
                    "triggers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        },
                        "description": "Flags for which types of triggers to use, keys of github*webhook, git*provider*webhook, schedule, custom*branch_only\n"
                    },
                    "triggersOnDraftPr": {
                        "type": "boolean",
                        "description": "Whether the CI job should be automatically triggered on draft PRs\n"
                    }
                },
                "type": "object",
                "required": [
                    "deferringEnvironmentId",
                    "deferringJobId",
                    "description",
                    "environmentId",
                    "jobId",
                    "name",
                    "projectId",
                    "selfDeferring",
                    "timeoutSeconds",
                    "triggers",
                    "triggersOnDraftPr",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getNotification:getNotification": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myNotification = dbtcloud.getNotification({\n    notificationId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_notification = dbtcloud.get_notification(notification_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myNotification = Dbtcloud.GetNotification.Invoke(new()\n    {\n        NotificationId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupNotification(ctx, \u0026dbtcloud.LookupNotificationArgs{\n\t\t\tNotificationId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetNotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myNotification = DbtcloudFunctions.getNotification(GetNotificationArgs.builder()\n            .notificationId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myNotification:\n    fn::invoke:\n      Function: dbtcloud:getNotification\n      Arguments:\n        notificationId: 12345\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNotification.\n",
                "properties": {
                    "notificationId": {
                        "type": "integer",
                        "description": "ID of the notification\n"
                    }
                },
                "type": "object",
                "required": [
                    "notificationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNotification.\n",
                "properties": {
                    "externalEmail": {
                        "type": "string",
                        "description": "The external email to receive the notification\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "notificationId": {
                        "type": "integer",
                        "description": "ID of the notification\n"
                    },
                    "notificationType": {
                        "type": "integer",
                        "description": "Type of notification (1 = dbt Cloud user email (default): does not require an external*email ; 4 = external email: requires setting an external*email)\n"
                    },
                    "onCancels": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on cancel\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on failure\n"
                    },
                    "onSuccesses": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook on success\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "Internal dbt Cloud User ID. Must be the user_id for an existing user even if the notification is an external one\n"
                    }
                },
                "type": "object",
                "required": [
                    "externalEmail",
                    "notificationId",
                    "notificationType",
                    "onCancels",
                    "onFailures",
                    "onSuccesses",
                    "userId",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getPostgresCredential:getPostgresCredential": {
            "inputs": {
                "description": "A collection of arguments for invoking getPostgresCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPostgresCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "defaultSchema": {
                        "type": "string",
                        "description": "Default schema name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the Postgres credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for Postgres\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "defaultSchema",
                    "isActive",
                    "numThreads",
                    "projectId",
                    "username",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getPrivatelinkEndpoint:getPrivatelinkEndpoint": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst testWithName = dbtcloud.getPrivatelinkEndpoint({\n    name: \"My Endpoint Name\",\n});\nconst testWithUrl = dbtcloud.getPrivatelinkEndpoint({\n    privateLinkEndpointUrl: \"abc.privatelink.def.com\",\n});\nconst testWithNameAndUrl = dbtcloud.getPrivatelinkEndpoint({\n    name: \"My Endpoint Name\",\n    privateLinkEndpointUrl: \"abc.privatelink.def.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\ntest_with_name = dbtcloud.get_privatelink_endpoint(name=\"My Endpoint Name\")\ntest_with_url = dbtcloud.get_privatelink_endpoint(private_link_endpoint_url=\"abc.privatelink.def.com\")\ntest_with_name_and_url = dbtcloud.get_privatelink_endpoint(name=\"My Endpoint Name\",\n    private_link_endpoint_url=\"abc.privatelink.def.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testWithName = Dbtcloud.GetPrivatelinkEndpoint.Invoke(new()\n    {\n        Name = \"My Endpoint Name\",\n    });\n\n    var testWithUrl = Dbtcloud.GetPrivatelinkEndpoint.Invoke(new()\n    {\n        PrivateLinkEndpointUrl = \"abc.privatelink.def.com\",\n    });\n\n    var testWithNameAndUrl = Dbtcloud.GetPrivatelinkEndpoint.Invoke(new()\n    {\n        Name = \"My Endpoint Name\",\n        PrivateLinkEndpointUrl = \"abc.privatelink.def.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetPrivatelinkEndpoint(ctx, \u0026dbtcloud.GetPrivatelinkEndpointArgs{\n\t\t\tName: pulumi.StringRef(\"My Endpoint Name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.GetPrivatelinkEndpoint(ctx, \u0026dbtcloud.GetPrivatelinkEndpointArgs{\n\t\t\tPrivateLinkEndpointUrl: pulumi.StringRef(\"abc.privatelink.def.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = dbtcloud.GetPrivatelinkEndpoint(ctx, \u0026dbtcloud.GetPrivatelinkEndpointArgs{\n\t\t\tName:                   pulumi.StringRef(\"My Endpoint Name\"),\n\t\t\tPrivateLinkEndpointUrl: pulumi.StringRef(\"abc.privatelink.def.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetPrivatelinkEndpointArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testWithName = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()\n            .name(\"My Endpoint Name\")\n            .build());\n\n        final var testWithUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()\n            .privateLinkEndpointUrl(\"abc.privatelink.def.com\")\n            .build());\n\n        final var testWithNameAndUrl = DbtcloudFunctions.getPrivatelinkEndpoint(GetPrivatelinkEndpointArgs.builder()\n            .name(\"My Endpoint Name\")\n            .privateLinkEndpointUrl(\"abc.privatelink.def.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  testWithName:\n    fn::invoke:\n      Function: dbtcloud:getPrivatelinkEndpoint\n      Arguments:\n        name: My Endpoint Name\n  testWithUrl:\n    fn::invoke:\n      Function: dbtcloud:getPrivatelinkEndpoint\n      Arguments:\n        privateLinkEndpointUrl: abc.privatelink.def.com\n  testWithNameAndUrl:\n    fn::invoke:\n      Function: dbtcloud:getPrivatelinkEndpoint\n      Arguments:\n        name: My Endpoint Name\n        privateLinkEndpointUrl: abc.privatelink.def.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivatelinkEndpoint.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Given descriptive name for the PrivateLink Endpoint (name and/or private*link*endpoint_url need to be provided to return data for the datasource)\n"
                    },
                    "privateLinkEndpointUrl": {
                        "type": "string",
                        "description": "The URL of the PrivateLink Endpoint (private*link*endpoint_url and/or name need to be provided to return data for the datasource)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrivatelinkEndpoint.\n",
                "properties": {
                    "cidrRange": {
                        "type": "string",
                        "description": "The CIDR range of the PrivateLink Endpoint\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The internal ID of the PrivateLink Endpoint\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Given descriptive name for the PrivateLink Endpoint (name and/or private*link*endpoint_url need to be provided to return data for the datasource)\n"
                    },
                    "privateLinkEndpointUrl": {
                        "type": "string",
                        "description": "The URL of the PrivateLink Endpoint (private*link*endpoint_url and/or name need to be provided to return data for the datasource)\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "PrivatelinkEndpoint state should be 1 = active, as 2 = deleted\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the PrivateLink Endpoint\n"
                    }
                },
                "type": "object",
                "required": [
                    "cidrRange",
                    "id",
                    "state",
                    "type"
                ]
            }
        },
        "dbtcloud:index/getProject:getProject": {
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Given name for project\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "ID of the project to represent\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "connectionId": {
                        "type": "integer",
                        "description": "ID of the connection associated with the project\n"
                    },
                    "docsJobId": {
                        "type": "integer",
                        "description": "ID of Job for the documentation\n"
                    },
                    "freshnessJobId": {
                        "type": "integer",
                        "description": "ID of Job for source freshness\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Given name for project\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "ID of the project to represent\n"
                    },
                    "repositoryId": {
                        "type": "integer",
                        "description": "ID of the repository associated with the project\n"
                    },
                    "state": {
                        "type": "integer",
                        "description": "Project state should be 1 = active, as 2 = deleted\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionId",
                    "docsJobId",
                    "freshnessJobId",
                    "name",
                    "repositoryId",
                    "state",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getRepository:getRepository": {
            "inputs": {
                "description": "A collection of arguments for invoking getRepository.\n",
                "properties": {
                    "fetchDeployKey": {
                        "type": "boolean",
                        "description": "Whether we should return the public deploy key\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the repository in\n"
                    },
                    "repositoryId": {
                        "type": "integer",
                        "description": "ID for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "repositoryId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepository.\n",
                "properties": {
                    "deployKey": {
                        "type": "string",
                        "description": "Public key generated by dbt when using `deploy_key` clone strategy\n"
                    },
                    "fetchDeployKey": {
                        "type": "boolean",
                        "description": "Whether we should return the public deploy key\n"
                    },
                    "gitCloneStrategy": {
                        "type": "string",
                        "description": "Git clone strategy for the repository\n"
                    },
                    "githubInstallationId": {
                        "type": "integer",
                        "description": "Identifier for the GitHub installation\n"
                    },
                    "gitlabProjectId": {
                        "type": "integer",
                        "description": "Identifier for the Gitlab project\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the repository is active\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID to create the repository in\n"
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "Connection name\n"
                    },
                    "repositoryCredentialsId": {
                        "type": "integer",
                        "description": "Credentials ID for the repository (From the repository side not the dbt Cloud ID)\n"
                    },
                    "repositoryId": {
                        "type": "integer",
                        "description": "ID for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "deployKey",
                    "gitCloneStrategy",
                    "githubInstallationId",
                    "gitlabProjectId",
                    "isActive",
                    "projectId",
                    "remoteUrl",
                    "repositoryCredentialsId",
                    "repositoryId",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getServiceToken:getServiceToken": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceToken.\n",
                "properties": {
                    "serviceTokenId": {
                        "type": "integer",
                        "description": "ID of the service token\n"
                    }
                },
                "type": "object",
                "required": [
                    "serviceTokenId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceToken.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Service token name\n"
                    },
                    "serviceTokenId": {
                        "type": "integer",
                        "description": "ID of the service token\n"
                    },
                    "serviceTokenPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dbtcloud:index/getServiceTokenServiceTokenPermission:getServiceTokenServiceTokenPermission"
                        },
                        "description": "Permissions set for the service token\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The UID of the service token (part of the token secret)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "serviceTokenId",
                    "serviceTokenPermissions",
                    "uid",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getSnowflakeCredential:getSnowflakeCredential": {
            "inputs": {
                "description": "A collection of arguments for invoking getSnowflakeCredential.\n",
                "properties": {
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSnowflakeCredential.\n",
                "properties": {
                    "authType": {
                        "type": "string",
                        "description": "The type of Snowflake credential ('password' or 'keypair')\n"
                    },
                    "credentialId": {
                        "type": "integer",
                        "description": "Credential ID\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the Snowflake credential is active\n"
                    },
                    "numThreads": {
                        "type": "integer",
                        "description": "Number of threads to use\n"
                    },
                    "projectId": {
                        "type": "integer",
                        "description": "Project ID\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "Default schema name\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "Username for Snowflake\n"
                    }
                },
                "type": "object",
                "required": [
                    "authType",
                    "credentialId",
                    "isActive",
                    "numThreads",
                    "projectId",
                    "schema",
                    "user",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getUser:getUser": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myUser = dbtcloud.getUser({\n    email: \"my_user@email.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_user = dbtcloud.get_user(email=\"my_user@email.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myUser = Dbtcloud.GetUser.Invoke(new()\n    {\n        Email = \"my_user@email.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.GetUser(ctx, \u0026dbtcloud.GetUserArgs{\n\t\t\tEmail: \"my_user@email.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myUser = DbtcloudFunctions.getUser(GetUserArgs.builder()\n            .email(\"my_user@email.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myUser:\n    fn::invoke:\n      Function: dbtcloud:getUser\n      Arguments:\n        email: my_user@email.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email for the user\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email for the user\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of the user\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getUserGroups:getUserGroups": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as dbtcloud from \"@pulumi/dbtcloud\";\n\nconst myUserGroups = dbtcloud.getUserGroups({\n    userId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_dbtcloud as dbtcloud\n\nmy_user_groups = dbtcloud.get_user_groups(user_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Dbtcloud = Pulumi.Dbtcloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myUserGroups = Dbtcloud.GetUserGroups.Invoke(new()\n    {\n        UserId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/a-schot/pulumi-dbtcloud/sdk/go/dbtcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := dbtcloud.LookupUserGroups(ctx, \u0026dbtcloud.LookupUserGroupsArgs{\n\t\t\tUserId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.dbtcloud.DbtcloudFunctions;\nimport com.pulumi.dbtcloud.inputs.GetUserGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myUserGroups = DbtcloudFunctions.getUserGroups(GetUserGroupsArgs.builder()\n            .userId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myUserGroups:\n    fn::invoke:\n      Function: dbtcloud:getUserGroups\n      Arguments:\n        userId: 12345\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUserGroups.\n",
                "properties": {
                    "userId": {
                        "type": "integer",
                        "description": "ID of the user\n"
                    }
                },
                "type": "object",
                "required": [
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUserGroups.\n",
                "properties": {
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "IDs of the groups assigned to the user\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "ID of the user\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupIds",
                    "userId",
                    "id"
                ]
            }
        },
        "dbtcloud:index/getWebhook:getWebhook": {
            "inputs": {
                "description": "A collection of arguments for invoking getWebhook.\n",
                "properties": {
                    "webhookId": {
                        "type": "string",
                        "description": "Webhooks ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "webhookId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWebhook.\n",
                "properties": {
                    "accountIdentifier": {
                        "type": "string",
                        "description": "Webhooks Account Identifier\n"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Webhooks active flag\n"
                    },
                    "clientUrl": {
                        "type": "string",
                        "description": "Webhooks Client URL\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Webhooks Description\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Webhooks Event Types\n"
                    },
                    "httpStatusCode": {
                        "type": "string",
                        "description": "Webhooks HTTP Status Code\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "jobIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of job IDs to trigger the webhook\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Webhooks Name\n"
                    },
                    "webhookId": {
                        "type": "string",
                        "description": "Webhooks ID\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountIdentifier",
                    "active",
                    "clientUrl",
                    "description",
                    "eventTypes",
                    "httpStatusCode",
                    "jobIds",
                    "name",
                    "webhookId",
                    "id"
                ]
            }
        }
    }
}